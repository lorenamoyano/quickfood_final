1639029287
AwuilbDvXz%3A1efc9e99c04f188c8a03cfd5067a9e74-51b9062418063e343423bf2ce52b162a
s:306072:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjUxYjkwNjI0MTgwNjNlMzQzNDIzYmYyY2U1MmIxNjJhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6ODoiVGV4dC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo1NzoidmVuZG9yL2Z6YW5pbm90dG8vZmFrZXIvc3JjL0Zha2VyL1Byb3ZpZGVyL2ZyX0NBL1RleHQucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxMjI4Mzk6Ijw/cGhwCgpuYW1lc3BhY2UgRmFrZXJcUHJvdmlkZXJcZnJfQ0E7CgpjbGFzcyBUZXh0IGV4dGVuZHMgXEZha2VyXFByb3ZpZGVyXFRleHQKewogICAvKioKICAgICAqIFRoZSBQcm9qZWN0IEd1dGVuYmVyZyBFQm9vayBvZiBMYSBjaGFzc2UgZ2FsZXJpZSwgYnkgSG9ub3LDqSBCZWF1Z3JhbmQKICAgICAqCiAgICAgKiBUaGlzIGVCb29rIGlzIGZvciB0aGUgdXNlIG9mIGFueW9uZSBhbnl3aGVyZSBhdCBubyBjb3N0IGFuZCB3aXRoCiAgICAgKiBhbG1vc3Qgbm8gcmVzdHJpY3Rpb25zIHdoYXRzb2V2ZXIuICBZb3UgbWF5IGNvcHkgaXQsIGdpdmUgaXQgYXdheSBvcgogICAgICogcmUtdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgUHJvamVjdCBHdXRlbmJlcmcgTGljZW5zZSBpbmNsdWRlZAogICAgICogd2l0aCB0aGlzIGVCb29rIG9yIG9ubGluZSBhdCB3d3cuZ3V0ZW5iZXJnLm5ldAogICAgICoKICAgICAqCiAgICAgKiBUaXRsZTogTGEgY2hhc3NlIGdhbGVyaWUKICAgICAqICAgICAgICBMw6lnZW5kZXMgQ2FuYWRpZW5uZXMKICAgICAqCiAgICAgKiBBdXRob3I6IEhvbm9yw6kgQmVhdWdyYW5kCiAgICAgKgogICAgICogUmVsZWFzZSBEYXRlOiBKdWx5IDUsIDIwMDUgW0VCb29rICMxNjIxMF0KICAgICAqCiAgICAgKiBMYW5ndWFnZTogRnJlbmNoCiAgICAgKgogICAgICoKICAgICAqICoqKiBTVEFSVCBPRiBUSElTIFBST0pFQ1QgR1VURU5CRVJHIEVCT09LIExBIENIQVNTRSBHQUxFUklFICoqKgogICAgICoKICAgICAqCiAgICAgKgogICAgICoKICAgICAqIFRoaXMgdGV4dCB3YXMgYWRhcHRlZCBmcm9tIHRoYXQgZm91bmQgYXQgdGhlIEJpYmxpb3Row6hxdWUgdmlydHVlbGxlLgogICAgICogaHR0cDovL3d3dy5mc2oudWFsYmVydGEuY2EvYmlibGlvL2RlZmF1bHQuaHRtCiAgICAgKgogICAgICogVGhhbmsgeW91IHRvIERvbmFsZCBJcHBlcmNpZWwgYW5kIHRoZSBGYWN1bHTDqSBTYWludC1KZWFuCiAgICAgKiAoVW5pdmVyc2l0eSBvZiBBbGJlcnRhKSBmb3IgbWFraW5nIGl0IGF2YWlsYWJsZS4KICAgICAqCiAgICAgKgogICAgICoKICAgICAqCiAgICAgKgogICAgICogRFUgTcOKTUUgQVVURVVSCiAgICAgKgogICAgICogSkVBTk5FIExBIEZJTEVVU0UtLcOJcGlzb2RlIGRlIGwnw4ltaWdyYXRpb24gRnJhbmNvLUNhbmFkaWVubmUgYXV4CiAgICAgKiDDiXRhdHMtVW5pcy0tUHJlbWnDqHJlIMOpZGl0aW9uIDE4NzgtLUR1ZXhpw6htZSDDqWRpdGlvbi0tTW9udHLDqWFsLCAxODg4LgogICAgICoKICAgICAqIExFIFZJRVVYIE1PTlRSw4lBTCwgMTYxMS0xODAzLS1BbGJ1bSBoaXN0b3JpcXVlLCBjaHJvbm9sb2dpcXVlIGV0CiAgICAgKiB0b3BvZ3JhcGhpcXVlIGRlIGxhIHZpbGxlIGRlIE1vbnRyw6lhbCBkZXB1aXMgc2UgZm9uZGF0aW9uLS0xMyBwbGFuY2hlcwogICAgICogZW4gY291bGV1cnMtLURlc3NpbnMgZGUgUC4gTC4gTW9yaW4tLU1vbnRyw6lhbCwgMTg4NC4KICAgICAqCiAgICAgKiBNRUxBTkdFUy0tVHJvaXMgQ29uZsOpcmVuY2VzLS1Nb250csOpYWwsIDE4ODguCiAgICAgKgogICAgICogTEVUVFJFUyBERSBWT1lBR0UtLUZyYW5jZS0tSXRhbGllLS1TaWNpbGUtLU1hbHRlLS1UdW5pc2llLS1BbGfDqXJpZS0tCiAgICAgKiBFc3BhZ25lLS1Nb250csOpYWwsIDE4ODkuCiAgICAgKgogICAgICogU0lYIE1PSVMgREFOUyBMRVMgTU9OVEFHTkVTIFJPQ0hFVVNFUy0tQ29sb3JhZG8tLVV0YWgtLU5vdXZlYXUKICAgICAqIE1leGlxdWUtLcOJZGl0aW9uIGlsbHVzdHLDqWUtLU1vbnRyw6lhbCwgMTg5MC4KICAgICAqCiAgICAgKgogICAgICogTEEKICAgICAqIENIQVNTRQogICAgICogR0FMRVJJRQogICAgICogTMOpZ2VuZGVzCiAgICAgKiBDYW5hZGllbm5lcwogICAgICoKICAgICAqIHBhcgogICAgICogSC4gQmVhdWdyYW5kCiAgICAgKgogICAgICogTU9OVFJFQUwKICAgICAqIDE5MDAKICAgICAqCiAgICAgKgogICAgICoKICAgICAqCiAgICAgKiBUQUJMRSBERVMgTUFUScOIUkVTCiAgICAgKgogICAgICogTGEgQ2hhc3NlLUdhbGVyaWUKICAgICAqIExlIExvdXAtR2Fyb3UKICAgICAqIExhIELDqnRlIMOgIEdyYW5kJ3F1ZXVlCiAgICAgKiBNYWNsb3VuZQogICAgICogTGUgUMOocmUgTG91aXNvbgogICAgICoKICAgICAqCiAgICAgKgogICAgICogTGEgbMOpZ2VuZGUgcXVpIHN1aXQgYSBkw6lqw6Agw6l0w6kgcHVibGnDqWUgZGFucyBsYSBfUGF0cmllXywgaWwgeSBhCiAgICAgKiBxdWVscXVlIGRpeCBhbnMsIGV0IGVuIGFuZ2xhaXMgZGFucyBsZSBfQ2VudHVyeSBNYWdhemluZV8gZGUgTmV3CiAgICAgKiBZb3JrLCBkdSBtb2lzIGQnYW/Du3QgMTg5MiwgYXZlYyBpbGx1c3RyYXRpb25zIHBhciBIZW5yaSBKdWxpZW4uCiAgICAgKiBPbiB2b2l0IHF1ZSBjZWxhIG5lIGRhdGUgcGFzIGQnaGllci4gTGUgcsOpY2l0IGx1aS1tw6ptZSBlc3QgYmFzw6kKICAgICAqIHN1ciB1bmUgY3JveWFuY2UgcG9wdWxhaXJlIHF1aSByZW1vbnRlIMOgIGzDqXBvcXVlIGRlcyBjb3VyZXVycwogICAgICogZGVzIGJvaXMgZXQgZGVzIHZveWFnZXVycyBkdSBOb3JkLU91ZXN0LiBMZXMgImdlbnMgZGUgY2hhbnRpZXIiCiAgICAgKiBvbnQgY29udGludcOpIGxhIHRyYWRpdGlvbiwgZXQgYydlc3Qgc3VydG91dCBkYW5zIGxlcyBwYXJvaXNzZXMKICAgICAqIHJpdmVyYWluZXMgZHUgU2FpbnQtTGF1cmVudCBxdWUgbCdvbiBjb25uYcOudCBsZXMgbMOpZ2VuZGVzIGRlCiAgICAgKiBsYSBjaGFzc2UtZ2FsZXJpZS4gSidhaSByZW5jb250csOpIHBsdXMgZCd1biB2aWV1eCB2b3lhZ2V1ciBxdWkKICAgICAqIGFmZmlybWFpdCBhdm9pciB2dSB2b2d1ZXIgZGFucyBsJ2FpciBkZXMgY2Fub3RzIGQnw6ljb3JjZSByZW1wbGlzCiAgICAgKiBkZSAicG9zc8OpZMOpcyIgcydlbiBhbGxhbnQgdm9pciBsZXVycyBibG9uZGVzLCBzb3VzIGwnw6lnaWRlIGRlCiAgICAgKiBCZWx6w6lidXRoLiBTaSBqJ2FpIMOpdMOpIGZvcmPDqSBkZSBtZSBzZXJ2aXIgZCdleHByZXNzaW9ucyBwbHVzIG91CiAgICAgKiBtb2lucyBhY2Fkw6ltaXF1ZXMsIG9uIHZvdWRyYSBiaWVuIHNlIHJhcHBlbGVyIHF1ZSBqZSBtZXRzIGVuIHNjw6huZQogICAgICogZGVzIGhvbW1lcyBhdSBsYW5nYWdlIGF1c3NpIHJ1ZGUgcXVlIGxldXIgZGlmZmljaWxlIG3DqXRpZXIuCiAgICAgKgogICAgICogSC5CLgogICAgICoKICAgICAqCiAgICAgKgogICAgICoKICAgICAqIEBzZWUgaHR0cDovL3d3dy5ndXRlbmJlcmcub3JnL2NhY2hlL2VwdWIvMTYyMTAvcGcxNjIxMC50eHQKICAgICAqIEB2YXIgc3RyaW5nCiAgICAgKi8KICAgIHByb3RlY3RlZCBzdGF0aWMgJGJhc2VUZXh0ID0gPDw8J0VPVCcKTEEgQ0hBU1NFLUdBTEVSSUUKCkkKClBvdXIgbG9ycyBxdWUgamUgdmFpcyB2b3VzIHJhY29udGVyIHVuZSByw7RkZXVzZSBkJ2hpc3RvaXJlLCBkYW5zIGxlCmZpbiBmaWw7IG1haXMgcydpbCB5IGEgcGFybWkgdm91cyBhdXRyZXMgZGVzIGx1cm9ucyBxdWkgYXVyYWllbnQKZW52aWUgZGUgY291cmlyIGxhIGNoYXNzZS1nYWxlcmllIG91IGxlIGxvdXAtZ2Fyb3UsIGplIHZvdXMgYXZlcnRpcwpxdSdpbHMgZm9udCBtaWV1eCBkJ2FsbGVyIHZvaXIgZGVob3JzIHNpIGxlcyBjaGF0cy1odWFudHMgZm9udCBsZQpzYWJiYXQsIGNhciBqZSB2YWlzIGNvbW1lbmNlciBtb24gaGlzdG9pcmUgZW4gZmFpc2FudCB1biBncmFuZCBzaWduZQpkZSBjcm9peCBwb3VyIGNoYXNzZXIgbGUgZGlhYmxlIGV0IHNlcyBkaWFibG90aW5zLiBKJ2VuIGFpIGV1IGFzc2V6CmRlIGNlcyBtYXVkaXRzLWzDoCBkYW5zIG1vbiBqZXVuZSB0ZW1wcy4KClBhcyB1biBob21tZSBuZSBmaXQgbWluZSBkZSBzb3J0aXI7IGF1IGNvbnRyYWlyZSB0b3VzIHNlCnJhcHByb2Now6hyZW50IGRlIGxhIGNhbWJ1c2Ugb8O5IGxlIF9jb29rXyBmaW5pc3NhaXQgc29uIHByw6lhbWJ1bGUgZXQKc2UgcHLDqXBhcmFpdCDDoCByYWNvbnRlciB1bmUgaGlzdG9pcmUgZGUgY2lyY29uc3RhbmNlLgoKT24gw6l0YWl0IMOgIGxhIHZlaWxsZSBkdSBqb3VyIGRlIGwnYW4gMTg1OCwgZW4gcGxlaW5lIGZvcsOqdCB2aWVyZ2UsCmRhbnMgbGVzIGNoYW50aWVycyBkZXMgUm9zcywgZW4gaGF1dCBkZSBsYSBHYXRpbmVhdS4gTGEgc2Fpc29uIGF2YWl0CsOpdMOpIGR1cmUgZXQgbGEgbmVpZ2UgYXR0ZWlnbmFpdCBkw6lqw6AgbGEgaGF1dGV1ciBkdSB0b2l0IGRlIGxhIGNhYmFuZS4KCkxlIGJvdXJnZW9pcyBhdmFpdCwgc2Vsb24gbGEgY291dHVtZSwgb3Jkb25uw6kgbGEgZGlzdHJpYnV0aW9uIGR1CmNvbnRlbnUgZCd1biBwZXRpdCBiYXJpbCBkZSByaHVtIHBhcm1pIGxlcyBob21tZXMgZHUgY2hhbnRpZXIsIGV0IGxlCmN1aXNpbmllciBhdmFpdCB0ZXJtaW7DqSBkZSBib25uZSBoZXVyZSBsZXMgcHLDqXBhcmF0aWZzIGR1IGZyaWNvdCBkZQpwYXR0ZXMgZXQgZGVzIGdsaXNzYW50ZXMgcG91ciBsZSByZXBhcyBkdSBsZW5kZW1haW4uIExhIG3DqWxhc3NlCm1pam90YWl0IGRhbnMgbGUgZ3JhbmQgY2hhdWRyb24gcG91ciBsYSBwYXJ0aWUgZGUgdGlyZSBxdWkgZGV2YWl0CnRlcm1pbmVyIGxhIHNvaXLDqWUuCgpDaGFjdW4gYXZhaXQgYm91cnLDqSBzYSBwaXBlIGRlIGJvbiB0YWJhYyBjYW5hZGllbiwgZXQgdW4gbnVhZ2Ugw6lwYWlzCm9ic2N1cmNpc3NhaXQgbCdpbnTDqXJpZXVyIGRlIGxhIGNhYmFuZSwgb8O5IHVuIGZldSBww6l0aWxsYW50IGRlIHBpbgpyw6lzaW5ldXggamV0YWl0LCBjZXBlbmRhbnQsIHBhciBpbnRlcnZhbGxlcywgZGVzIGx1ZXVycyByb3VnZcOidHJlcwpxdWkgdHJlbWJsb3RhaWVudCBlbiDDqWNsYWlyYW50IHBhciBkZXMgZWZmZXRzIG1lcnZlaWxsZXV4IGRlCmNsYWlyLW9ic2N1ciwgbGVzIG3DomxlcyBmaWd1cmVzIGRlIGNlcyBydWRlcyB0cmF2YWlsbGV1cnMgZGVzIGdyYW5kcwpib2lzLgoKSm9lIGxlIF9jb29rXyDDqXRhaXQgdW4gcGV0aXQgaG9tbWUgYXNzZXogbWFsIGZhaXQsIHF1ZSBsJ29uCmFwcGVsYWl0IGFzc2V6IGfDqW7DqXJhbGVtZW50IGxlIGJvc3N1LCBzYW5zIHF1J2lsIHMnZW4gZm9ybWFsaXPDonQsIGV0CnF1aSBmYWlzYWl0IGNoYW50aWVyIGRlcHVpcyBhdSBtb2lucyA0MCBhbnMuIElsIGVuIGF2YWl0IHZ1IGRlIHRvdXRlcwpsZXMgY291bGV1cnMgZGFucyBzb24gZXhpc3RlbmNlIGJpZ2FycsOpZSBldCBpbCBzdWZmaXNhaXQgZGUgbHVpIGZhaXJlCnByZW5kcmUgdW4gcGV0aXQgY291cCBkZSBqYW1hw69xdWUgcG91ciBsdWkgZMOpbGllciBsYSBsYW5ndWUgZXQgbHVpCmZhaXJlIHJhY29udGVyIHNlcyBleHBsb2l0cy4KCklJCgotLUplIHZvdXMgZGlzYWlzIGRvbmMsIGNvbnRpbnVhLXQtaWwsIHF1ZSBzaSBqJ2FpIMOpdMOpIHVuIHBldSBfdG91Z2hfCmRhbnMgbWEgamV1bmVzc2UsIGplIG4nZW50ZW5kcyBwbHVzIHJpc8OpZSBzdXIgbGVzIGNob3NlcyBkZSBsYQpyZWxpZ2lvbi4gSid2YXMgw6AgY29uZmVzc2UgcsOpZ3VsacOocmVtZW50IHRvdXMgbGVzIGFucywgZXQgY2UgcXVlIGplCnZhaXMgdm91cyByYWNvbnRlciBsw6Agc2UgcGFzc2FpdCBhdXggam91cnMgZGUgbWEgamV1bmVzc2UgcXVhbmQgamUgbmUKY3JhaWduYWlzIG5pIERpZXUgbmkgZGlhYmxlLiBDJ8OpdGFpdCB1biBzb2lyIGNvbW1lIGNlbHVpLWNpLCBsYQp2ZWlsbGUgZHUgam91ciBkZSBsJ2FuLCBpbCB5IGEgZGUgY2VsYSAzNCBvdSAzNSBhbnMuIFLDqXVuaXMgYXZlYyB0b3VzCm1lcyBjYW1hcmFkZXMgYXV0b3VyIGRlIGxhIGNhbWJ1c2UsIG5vdXMgcHJlbmlvbnMgdW4gcGV0aXQgY291cDsKbWFpcyBzaSBsZXMgcGV0aXRzIHJ1aXNzZWF1eCBmb250IGxlcyBncmFuZGVzIHJpdmnDqHJlcywgbGVzIHBldGl0cwp2ZXJyZXMgZmluaXNzZW50IHBhciB2aWRlciBsZXMgZ3Jvc3NlcyBjcnVjaGVzLCBldCBkYW5zIGNlcyB0ZW1wcy1sw6AsCm9uIGJ1dmFpdCBwbHVzIHNlYyBldCBwbHVzIHNvdXZlbnQgcXUnYXVqb3VyZCdodWksIGV0IGlsIG4nw6l0YWl0IHBhcwpyYXJlIGRlIHZvaXIgZmluaXIgbGVzIGbDqnRlcyBwYXIgZGVzIGNvdXBzIGQgcG9pbmdzIGV0IGRlcyB0aXJhZ2VzIGRlCnRpZ25hc3NlLiBMYSBqYW1hw69xdWUgw6l0YWl0IGJvbm5lLC0tcGFzIG1laWxsZXVyZSBxdWUgY2Ugc29pciwtLW1haXMKZWxsZSDDqXRhaXQgYm91Z3JlbWVudCBib25uZSwgamUgdm91cyBsZSBwYXJzb3XDqnRlLiBKJ2VuIGF2YWlzIGJpZW4KbGFtcMOpIHVuZSBkb3V6YWluZSBkZSBwZXRpdHMgZ29iZWxldHMsIHBvdXIgbWEgcGFydCwgZXQgc3VyIGxlcyBvbnplCmhldXJlcywgamUgdm91cyBsJ2F2b3VlIGZyYW5jaGVtZW50LCBsYSB0w6p0ZSBtZSB0b3VybmFpdCBldCBqZSBtZQpsYWlzc2FpIHRvbWJlciBzdXIgbWEgcm9iZSBkZSBjYXJyaW9sZSBwb3VyIGZhaXJlIHVuIHBldGl0IHNvbW1lIGVuCmF0dGVuZGFudCBsJ2hldXJlIGRlIHNhdXRlciDDoCBwaWVkcyBqb2ludHMgcGFyLWRlc3N1cyBsYSB0w6p0ZSBkJ3VuCnF1YXJ0IGRlIGxhcmQsIGRlIGxhIHZpZWlsbGUgYW5uw6llIGRhbnMgbGEgbm91dmVsbGUsIGNvbW1lIG5vdXMKYWxsb25zIGxlIGZhaXJlIGNlIHNvaXIgc3VyIGwnaGV1cmUgZGUgbWludWl0LCBhdmFudCBkJ2FsbGVyIGNoYW50ZXIKbGEgZ3VpZ25vbMOpZSBldCBzb3VoYWl0ZXIgbGEgYm9ubmUgYW5uw6llIGF1eCBob21tZXMgZHUgY2hhbnRpZXIKdm9pc2luLgoKSmUgZG9ybWFpcyBkb25jIGRlcHVpcyBhc3NleiBsb25ndGVtcHMgbG9yc3F1ZSBqZSBtZSBzZW50aXMgc2Vjb3VlcgpydWRlbWVudCBwYXIgbGUgYm9zcyBkZXMgcGlxdWV1cnMsIEJhcHRpc3RlIER1cmFuZCwgcXVpIG1lIGRpdDoKCi0tSm9lISBtaW51aXQgdmllbnQgZGUgc29ubmVyIGV0IHR1IGVzIGVuIHJldGFyZCBwb3VyIGxlIHNhdXQgZHUKcXVhcnQuIExlcyBjYW1hcmFkZXMgc29udCBwYXJ0aXMgcG91ciBmYWlyZSBsZXVyIHRvdXJuw6llIGV0IG1vaSBqZQptJ2VuIHZhaXMgw6AgTGF2YWx0cmllIHZvaXIgbWEgYmxvbmRlLiBWZXV4LXR1IHZlbmlyIGF2ZWMgbW9pPwoKLS3DgCBMYXZhbHRyaWUhIGx1aSByw6lwb25kaXMtamUsIGVzLXR1IGZvdT8gbm91cyBlbiBzb21tZXMgw6AgcGx1cyBkZQpjZW50IGxpZXVlcyBldCBkJ2FpbGxldXJzIGF1cmFpcy10dSBkZXV4IG1vaXMgcG91ciBmYWlyZSBsZSB2b3lhZ2UsCnF1J2lsIG4neSBhIHBhcyBkZSBjaGVtaW4gZGUgc29ydGllIGRhbnMgbGEgbmVpZ2UuIEV0IHB1aXMsIGxlCnRyYXZhaWwgZHUgbGVuZGVtYWluIGR1IGpvdXIgZGUgbCdhbj8KCi0tQW5pbWFsISByw6lwb25kaXQgbW9uIGhvbW1lLCBpbCBuZSBzJ2FnaXQgcGFzIGRlIGNlbGEuIE5vdXMgZmVyb25zCmxlIHZveWFnZSBlbiBjYW5vdCBkJ8OpY29yY2Ugw6AgbCdhdmlyb24sIGV0IGRlbWFpbiBtYXRpbiDDoCBzaXggaGV1cmVzCm5vdXMgc2Vyb25zIGRlIHJldG91ciBhdSBjaGFudGllci4KCkplIGNvbXByZW5haXMuCgpNb24gaG9tbWUgbWUgcHJvcG9zYWl0IGRlIGNvdXJpciBsYSBjaGFzc2UtZ2FsZXJpZSBldCBkZSByaXNxdWVyIG1vbgpzYWx1dCDDqXRlcm5lbCBwb3VyIGxlIHBsYWlzaXIgZCdhbGxlciBlbWJyYXNzZXIgbWEgYmxvbmRlLCBhdQp2aWxsYWdlLiBDJ8OpdGFpdCByYWlkZSEgSWwgw6l0YWl0IGJpZW4gdnJhaSBxdWUgaifDqXRhaXMgdW4gcGV1IGl2cm9nbmUKZXQgZMOpYmF1Y2jDqSBldCBxdWUgbGEgcmVsaWdpb24gbmUgbWUgZmF0aWd1YWl0IHBhcyDDoCBjZXR0ZSDDqXBvcXVlLAptYWlzIHJpc3F1ZXIgZGUgdmVuZHJlIG1vbiDDom1lIGF1IGRpYWJsZSwgw6dhIG1lIHN1cnBhc3NhaXQuCgotLUNyw6kgcG91bGUgbW91aWxsw6llISBjb250aW51YSBCYXB0aXN0ZSwgdHUgc2FpcyBiaWVuIHF1J2lsIG4neSBhIHBhcwpkZSBkYW5nZXIuIElsIHMnYWdpdCBkJ2FsbGVyIMOgIExhdmFsdHJpZSBldCBkZSByZXZlbmlyIGRhbnMgc2l4CmhldXJlcy4gVHUgc2FpcyBiaWVuIHF1J2F2ZWMgbGEgY2hhc3NlLWdhbGVyaWUsIG9uIHZveWFnZSBhdSBtb2lucyA1MApsaWV1ZXMgw6AgbCdoZXVyZSBsb3JzcXUnb24gc2FpdCBtYW5pZXIgbCdhdmlyb24gY29tbWUgbm91cy4gSWwgcydhZ2l0CnRvdXQgc2ltcGxlbWVudCBkZSBuZSBwYXMgcHJvbm9uY2VyIGxlIG5vbSBkdSBib24gRGlldSBwZW5kYW50IGxlCnRyYWpldCwgZXQgZGUgbmUgcGFzIHMnYWNjcm9jaGVyIGF1eCBjcm9peCBkZXMgY2xvY2hlcnMgZW4gdm95YWdlYW50LgpDJ2VzdCBmYWNpbGUgw6AgZmFpcmUgZXQgcG91ciDDqXZpdGVyIHRvdXQgZGFuZ2VyLCBpbCBmYXV0IHBlbnNlciDDoCBjZQpxdSdvbiBkaXQsIGF2b2lyIGwnb2VpbCBvw7kgbCdvbiB2YSBldCBuZSBwYXMgcHJlbmRyZSBkZSBib2lzc29uIGVuCnJvdXRlLiBKJ2FpIGTDqWrDoCBmYWl0IGxlIHZveWFnZSBjaW5xIGZvaXMgZXQgdHUgdm9pcyBiaWVuIHF1J2lsIG5lCm0nZXN0IGphbWFpcyBhcnJpdsOpIG1hbGhldXIuIEFsbG9ucyBtb24gdmlldXgsIHByZW5kcyB0b24gY291cmFnZSDDoApkZXV4IG1haW5zIGV0LCBzaSBsZSBjb2V1ciB0J2VuIGRpdCwgZGFucyBkZXV4IGhldXJlcyBkZSB0ZW1wcyBub3VzCnNlcm9ucyDDoCBMYXZhbHRyaWUuIFBlbnNlIMOgIGxhIHBldGl0ZSBMaXphIEd1aW1iZXR0ZSBldCBhdSBwbGFpc2lyIGRlCmwnZW1icmFzc2VyLiBOb3VzIHNvbW1lcyBkw6lqw6Agc2VwdCBwb3VyIGZhaXJlIGxlIHZveWFnZSBtYWlzIGlsIGZhdXQKw6p0cmUgZGV1eCwgcXVhdHJlLCBzaXggb3UgaHVpdCBldCB0dSBzZXJhcyBsZSBodWl0acOobWUuCgotLU91aSEgdG91dCBjZWxhIGVzdCB0csOocyBiaWVuLCBtYWlzIGlsIGZhdXQgZmFpcmUgdW4gc2VybWVudCBhdQpkaWFibGUsIGV0IGMnZXN0IHVuIGFuaW1hbCBxdWkgbidlbnRlbmQgcGFzIMOgIHJpcmUgbG9yc3F1J29uIHMnZW5nYWdlCsOgIGx1aS4KCi0tVW5lIHNpbXBsZSBmb3JtYWxpdMOpLCBtb24gSm9lLiBJbCBzJ2FnaXQgc2ltcGxlbWVudCBkZSBuZSBwYXMgc2UKZ3Jpc2VyIGV0IGRlIGZhaXJlIGF0dGVudGlvbiDDoCBzYSBsYW5ndWUgZXQgw6Agc29uIGF2aXJvbi4gVW4gaG9tbWUKbidlc3QgcGFzIHVuIGVuZmFudCwgcXVlIGRpYWJsZSEgVmllbnMhIHZpZW5zISBub3MgY2FtYXJhZGVzIG5vdXMKYXR0ZW5kZW50IGRlaG9ycyBldCBsZSBncmFuZCBjYW5vdCBkZSBsYSBfZHJhdmVfIGVzdCB0b3V0IHByw6p0IHBvdXIKbGUgdm95YWdlLgoKSmUgbWUgbGFpc3NhaSBlbnRyYcOubmVyIGhvcnMgZGUgbGEgY2FiYW5lIG/DuSBqZSB2aXMgZW4gZWZmZXQgc2l4IGRlCm5vcyBob21tZXMgcXVpIG5vdXMgYXR0ZW5kYWllbnQsIGwnYXZpcm9uIMOgIGxhIG1haW4uIExlIGdyYW5kIGNhbm90CsOpdGFpdCBzdXIgbGEgbmVpZ2UgZGFucyB1bmUgY2xhaXJpw6hyZSBldCBhdmFudCBkJ2F2b2lyIGV1IGxlIHRlbXBzIGRlCnLDqWZsw6ljaGlyLCBqJ8OpdGFpcyBkw6lqw6AgYXNzaXMgZGFucyBsZSBkZXZhbnQsIGwnYXZpcm9uIHBlbmRhbnQgc3VyIGxlCnBsYXQtYm9yZCwgYXR0ZW5kYW50IGxlIHNpZ25hbCBkdSBkw6lwYXJ0LiBKJ2F2b3VlIHF1ZSBqJ8OpdGFpcyB1biBwZXUKdHJvdWJsw6ksIG1haXMgQmFwdGlzdGUgcXVpIHBhc3NhaXQsIGRhbnMgbGUgY2hhbnRpZXIsIHBvdXIgbifDqnRyZSBwYXMKYWxsw6kgw6AgY29uZmVzc2UgZGVwdWlzIHNlcHQgYW5zIG5lIG1lIGxhaXNzYSBwYXMgbGUgdGVtcHMgZGUgbWUKZMOpYnJvdWlsbGVyLiBJbCDDqXRhaXQgw6AgbCdhcnJpw6hyZSwgZGVib3V0LCBldCBkJ3VuZSB2b2l4IHZpYnJhbnRlIGlsCm5vdXMgZGl0OgoKLS1Sw6lww6l0ZXogYXZlYyBtb2khCgpFdCBub3VzIHLDqXDDqXTDom1lczoKCi0tU2F0YW4hIHJvaSBkZXMgZW5mZXJzLCBub3VzIHRlIHByb21ldHRvbnMgZGUgdGUgbGl2cmVyIG5vcyDDom1lcywKc2kgZCdpY2kgw6Agc2l4IGhldXJlcyBub3VzIHByb25vbsOnb25zIGxlIG5vbSBkZSB0b24gbWHDrnRyZSBldCBkdQpuw7R0cmUsIGxlIGJvbiBEaWV1LCBldCBub3VzIHRvdWNob25zIHVuZSBjcm9peCBkYW5zIGxlIHZveWFnZS4gw4AKY2V0dGUgY29uZGl0aW9uIHR1IG5vdXMgdHJhbnNwb3J0ZXJhcyDDoCB0cmF2ZXJzIGxlcyBhaXJzLCBhdSBsaWV1IG/DuQpub3VzIHZvdWxvbnMgYWxsZXIgZXQgdHUgbm91cyByYW3DqG5lcmFzIGRlIG3Dqm1lIGF1IGNoYW50aWVyIQoKSUlJCgogIEFjYWJyaXMhIEFjYWJyYXMhIEFjYWJyYW0KICBGYWlzLW5vdXMgdm95YWdlciBwYXItZGVzc3VzIGxlcyBtb250YWduZXMKCsOAIHBlaW5lIGF2aW9ucy1ub3VzIHByb25vbmPDqSBsZXMgZGVybmnDqHJlcyBwYXJvbGVzIHF1ZSBub3VzIHNlbnTDrm1lcwpsZSBjYW5vdCBzJ8OpbGV2ZXIgZGFucyBsJ2FpciDDoCB1bmUgaGF1dGV1ciBkZSBjaW5xIG91IHNpeCBjZW50cwpwaWVkcy4gSWwgbWUgc2VtYmxhaXQgcXVlIGonw6l0YWlzIGzDqWdlciBjb21tZSB1bmUgcGx1bWUgZXQgYXUKY29tbWFuZGVtZW50IGRlIEJhcHRpc3RlLCBub3VzIGNvbW1lbsOnw6JtZXMgw6AgbmFnZXIgY29tbWUgZGVzIHBvc3PDqWTDqXMKcXVlIG5vdXMgw6l0aW9ucy4gQXV4IHByZW1pZXJzIGNvdXBzIGQnYXZpcm9uIGxlIGNhbm90IHMnw6lsYW7Dp2EgZGFucwpsJ2FpciBjb21tZSB1bmUgZmzDqGNoZSwgZXQgYydlc3QgbGUgY2FzIGRlIGxlIGRpcmUsIGxlIGRpYWJsZSBub3VzCmVtcG9ydGFpdC4gw4dhIG5vdXMgZW4gY291cGFpdCBsZSByZXNwaXJlIGV0IGxlIHBvaWwgZW4gZnJpc2FpdCBzdXIKbm9zIGJvbm5ldHMgZGUgY2FyY2Fqb3UuCgpOb3VzIGZpbGlvbnMgcGx1cyB2aXRlIHF1ZSBsZSB2ZW50LiBQZW5kYW50IHVuIHF1YXJ0IGQnaGV1cmUsCmVudmlyb24sIG5vdXMgbmF2aWd1w6JtZXMgYXUtZGVzc3VzIGRlIGxhIGZvcsOqdCBzYW5zIGFwZXJjZXZvaXIgYXV0cmUKY2hvc2UgcXVlIGxlcyBib3VxdWV0cyBkZXMgZ3JhbmRzIHBpbnMgbm9pcnMuIElsIGZhaXNhaXQgdW5lIG51aXQKc3VwZXJiZSBldCBsYSBsdW5lLCBkYW5zIHNvbiBwbGVpbiwgaWxsdW1pbmFpdCBsZSBmaXJtYW1lbnQgY29tbWUKdW4gYmVhdSBzb2xlaWwgZHUgbWlkaS4gSWwgZmFpc2FpdCB1biBmcm9pZCBkdSB0b25uZXJyZSBldCBub3MKbW91c3RhY2hlcyDDqXRhaWVudCBjb3V2ZXJ0ZXMgZGUgZ2l2cmUsIG1haXMgbm91cyDDqXRpb25zIGNlcGVuZGFudAp0b3VzIGVuIG5hZ2UuIMOHYSBzZSBjb21wcmVuZCBhaXPDqW1lbnQgcHVpc3F1ZSBjJ8OpdGFpdCBsZSBkaWFibGUgcXVpCm5vdXMgbWVuYWl0IGV0IGplIHZvdXMgYXNzdXJlIHF1ZSBjZSBuJ8OpdGFpdCBwYXMgc3VyIGxlIHRyYWluIGRlIGxhCl9CbGFuY2hlXy4gTm91cyBhcGVyw6fDu21lcyBiaWVudMO0dCB1bmUgw6ljbGFpcmNpZSwgYyfDqXRhaXQgbGEKR2F0aW5lYXUgZG9udCBsYSBzdXJmYWNlIGdsYWPDqWUgZXQgcG9saWUgw6l0aW5jZWxhaXQgYXUtZGVzc291cyBkZQpub3VzIGNvbW1lIHVuIGltbWVuc2UgbWlyb2lyLiBQdWlzLCBwJ3RpdC3DoC1wJ3RpdCBub3VzIGFwZXLDp8O7bWVzIGRlcwpsdW1pw6hyZXMgZGFucyBsZXMgbWFpc29ucyBkJ2hhYml0YW50czsgcHVpcyBkZXMgY2xvY2hlcnMgZCfDqWdsaXNlcwpxdWkgcmVsdWlzYWllbnQgY29tbWUgZGVzIGJhw69vbm5ldHRlcyBkZSBzb2xkYXRzLCBxdWFuZCBpbHMgZm9udApsJ2V4ZXJjaWNlIHN1ciBsZSBDaGFtcCBkZSBNYXJzIGRlIE1vbnRyw6lhbC4gT24gcGFzc2FpdCBjZXMgY2xvY2hlcnMKYXVzc2kgdml0ZSBxdSdvbiBwYXNzZSBsZXMgcG90ZWF1eCBkZSB0w6lsw6lncmFwaGUsIHF1YW5kIG9uIHZveWFnZQplbiBjaGVtaW4gZGUgZmVyLiBFdCBub3VzIGZpbGlvbnMgdG91am91cnMgY29tbWUgdG91cyBsZXMgZGlhYmxlcywKcGFzc2FudCBwYXItZGVzc3VzIGxlcyB2aWxsYWdlcywgbGVzIGZvcsOqdHMsIGxlcyByaXZpw6hyZXMgZXQgbGFpc3NhbnQKZGVycmnDqHJlIG5vdXMgY29tbWUgdW5lIHRyYcOubsOpZSBkJ8OpdGluY2VsbGVzLiBDJ2VzdCBCYXB0aXN0ZSwgbGUKcG9zc8OpZMOpLCBxdWkgZ291dmVybmFpdCwgY2FyIGlsIGNvbm5haXNzYWl0IGxhIHJvdXRlIGV0IG5vdXMKYXJyaXbDom1lcyBiaWVudMO0dCDDoCBsYSByaXZpw6hyZSBkZXMgT3V0YW91YWlzIHF1aSBub3VzIHNlcnZpdCBkZSBndWlkZQpwb3VyIGRlc2NlbmRyZSBqdXNxdSdhdSBsYWMgZGVzIERldXgtTW9udGFnbmVzLgoKLS1BdHRlbmRleiB1biBwZXUsIGNyaWEgQmFwdGlzdGUuIE5vdXMgYWxsb25zIHJhc2VyIE1vbnRyw6lhbCBldCBub3VzCmFsbG9ucyBlZmZyYXllciBsZXMgY291cmV1eCBxdWkgc29udCBlbmNvcmUgZGVob3JzIMOgIGMndGUgaGV1cmUgY2l0ZS4KVG9pLCBKb2UhIGzDoCwgZW4gYXZhbnQsIMOpY2xhaXJjaXMtdG9pIGxlIGdvc2llciBldCBjaGFudGUtbm91cyB1bmUKY2hhbnNvbiBzdXIgbCdhdmlyb24uCgpFbiBlZmZldCwgbm91cyBhcGVyY2V2aW9ucyBkw6lqw6AgbGVzIG1pbGxlIGx1bWnDqHJlcyBkZSBsYSBncmFuZGUKdmlsbGUsIGV0IEJhcHRpc3RlLCBkJ3VuIGNvdXAgZCdhdmlyb24sIG5vdXMgZml0IGRlc2NlbmRyZSDDoCBwZXUgcHLDqHMKYXUgbml2ZWF1IGRlcyB0b3VycyBkZSBOb3RyZS1EYW1lLiBKJ2VubGV2YWkgbWEgY2hpcXVlIHBvdXIgbmUgcGFzCmwnYXZhbGVyLCBldCBqJ2VudG9ubmFpIMOgIHR1ZS10w6p0ZSBjZXR0ZSBjaGFuc29uIGRlIGNpcmNvbnN0YW5jZSBxdWUKdG91cyBsZXMgY2Fub3RpZXJzIHLDqXDDqXTDqHJlbnQgZW4gY2hvZXVyOgoKICBNb24gcMOocmUgbidhdmFpdCBmaWxsZSBxdWUgbW9pLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciwKICBFdCBkZXNzdXMgbGEgbWVyIGlsIG0nZW52b2llOgogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2b2xlLCBxdWkgdm9sZSwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIhCgogIEV0IGRlc3N1cyBsYSBtZXIgaWwgbSdlbnZvaWUsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyLAogIExlIG1hcmluaWVyIHF1aSBtZSBtZW5haXQ6CiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZvbGUsIHF1aSB2b2xlLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciEKCiAgTGUgbWFyaW5pZXIgcXVpIG1lIG1lbmFpdCwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIsCiAgTWUgZGl0LCBtYSBiZWxsZSwgZW1icmFzc2V6LW1vaToKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdm9sZSwgcXVpIHZvbGUsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyIQoKICBNZSBkaXQsIG1hIGJlbGxlLCBlbWJyYXNzZXotbW9pLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciwKICBOb24sIG5vbiwgbW9uc2lldXIsIGplIG5lIHNhdXJhaXM6CiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZvbGUsIHF1aSB2b2xlLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciEKCiAgTm9uLCBub24sIG1vbnNpZXVyLCBqZSBuZSBzYXVyYWlzLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciwKICBDYXIgc2kgbW9uIHBhcGEgbGUgc2F2YWl0OgogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2b2xlLCBxdWkgdm9sZSwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIhCgogIENhciBzaSBtb24gcGFwYSBsZSBzYXZhaXQsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyLAogIEFoISBjJ2VzdCBiaWVuIHPDu3IgcXUnaWwgbWUgYmF0dHJhaXQuCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZvbGUsIHF1aSB2b2xlLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciEKCgpJVgoKQmllbiBxdSdpbCBmw7t0IHByw6hzIGRlIGRldXggaGV1cmVzIGR1IG1hdGluLCBub3VzIHbDrm1lcyBkZXMgZ3JvdXBlcwpTJ2FycsOqdGVyIGRhbnMgbGVzIHJ1ZXMgcG91ciBub3VzIHZvaXIgcGFzc2VyLCBtYWlzIG5vdXMgZmlsaW9ucyBzaQp2aXRlIHF1J2VuIHVuIGNsaW4gZCdvZWlsIG5vdXMgYXZpb25zIGTDqXBhc3PDqSBNb250csOpYWwgZXQgc2VzCmZhdWJvdXJncywgZXQgYWxvcnMgamUgY29tbWVuw6dhaSDDoCBjb21wdGVyIGxlcyBjbG9jaGVyczogbGEKTG9uZ3VlLVBvaW50ZSwgbGEgUG9pbnRlLWF1eC1UcmVtYmxlcywgUmVwZW50aWdueSwgU2FpbnQtU3VscGljZSwgZXQKZW5maW4gbGVzIGRldXggZmzDqGNoZXMgYXJnZW50w6llcyBkZSBMYXZhbHRyaWUgcXVpIGRvbWluYWllbnQgbGUgdmVydApzb21tZXQgZGVzIGdyYW5kcyBwaW5zIGR1IGRvbWFpbmUuCgotLUF0dGVudGlvbiEgdm91cyBhdXRyZXMsIG5vdXMgY3JpYSBCYXB0aXN0ZS4gTm91cyBhbGxvbnMgYXR0ZXJyaXIgw6AKbCdlbnRyw6llIGR1IGJvaXMsIGRhbnMgbGUgY2hhbXAgZGUgbW9uIHBhcnJhaW4sIEplYW4tSmVhbiBHYWJyaWVsLCBldApub3VzIG5vdXMgcmVuZHJvbnMgZW5zdWl0ZSDDoCBwaWVkIHBvdXIgYWxsZXIgc3VycHJlbmRyZSBub3MKY29ubmFpc3NhbmNlcyBkYW5zIHF1ZWxxdWUgZnJpY290IG91IHF1ZWxxdWUgZGFuc2UgZHUgdm9pc2luYWdlLgoKUXVpIGZ1dCBkaXQgZnV0IGZhaXQsIGV0IGNpbnEgbWludXRlcyBwbHVzIHRhcmQgbm90cmUgY2Fub3QgcmVwb3NhaXQKZGFucyB1biBiYW5jIGRlIG5laWdlIMOgIGwnZW50csOpZSBkdSBib2lzIGRlIEplYW4tSmVhbiBHYWJyaWVsOyBldApub3VzIHBhcnTDrm1lcyB0b3VzIGxlcyBodWl0IMOgIGxhIGZpbGUgcG91ciBub3VzIHJlbmRyZSBhdSB2aWxsYWdlLiBDZQpuJ8OpdGFpdCBwYXMgdW5lIG1pbmNlIGJlc29nbmUgY2FyIGlsIG4neSBhdmFpdCBwYXMgZGUgY2hlbWluIGJhdHR1IGV0Cm5vdXMgYXZpb25zIGRlIGxhIG5laWdlIGp1c3F1J2F1IGNhbGlmb3VyY2hvbi4gQmFwdGlzdGUgcXVpIMOpdGFpdApwbHVzIGVmZnJvbnTDqSBxdWUgbGVzIGF1dHJlcyBzJ2VuIGFsbGEgZnJhcHBlciDDoCBsYSBwb3J0ZSBkZSBsYQptYWlzb24gZGUgc29uIHBhcnJhaW4gb8O5IGwnb24gYXBlcmNldmFpdCBlbmNvcmUgZGUgbGEgbHVtacOocmUsIG1haXMKaWwgbid5IHRyb3V2YSBxdSd1bmUgZmlsbGUgX2VuZ2Fnw6hyZV8gcXVpIGx1aSBhbm5vbsOnYSBxdWUgbGVzCnZpZWlsbGVzIGdlbnMgw6l0YWllbnQgw6AgdW4gX3NuYXF1ZV8gY2hleiBsZSBww6hyZSBSb2JpbGxhcmQsIG1haXMKcXVlIGxlcyBmYXJhdWRzIGV0IGxlcyBmaWxsZXMgZGUgbGEgcGFyb2lzc2Ugw6l0YWllbnQgcHJlc3F1ZSB0b3VzCnJlbmR1cyBjaGV6IEJhdGlzc2V0dGUgQXVnw6ksIMOgIGxhIFBldGl0ZS1NaXPDqHJlIGVuIGJhcyBkZQpDb250cmVjb2V1ciwgZGUgbCdhdXRyZSBjw7R0w6kgZHUgZmxldXZlLCBsw6Agb8O5IGlsIHkgYXZhaXQgdW4gcmlnb2RvbgpkdSBqb3VyIGRlIGwnYW4uCgotLUFsbG9ucyBhdSByaWdvZG9uLCBjaGV6IEJhdGlzc2V0dGUgQXVnw6ksIG5vdXMgZGl0IEJhcHRpc3RlLCBvbiBlc3QKY2VydGFpbiBkJ3kgcmVuY29udHJlciBub3MgYmxvbmRlcy4KCi0tQWxsb25zIGNoZXogQmF0aXNzZXR0ZSEKCkV0IG5vdXMgcmV0b3VybsOibWVzIGF1IGNhbm90LCB0b3V0IGVuIG5vdXMgbWV0dGFudCBtdXR1ZWxsZW1lbnQgZW4KZ2FyZGUgc3VyIGxlIGRhbmdlciBxdSdpbCB5IGF2YWl0IGRlIHByb25vbmNlciBjZXJ0YWluZXMgcGFyb2xlcyBldApkZSBwcmVuZHJlIHVuIGNvdXAgZGUgdHJvcCwgY2FyIGlsIGZhbGxhaXQgcmVwcmVuZHJlIGxhIHJvdXRlIGRlcwpjaGFudGllcnMgZXQgeSBhcnJpdmVyIGF2YW50IHNpeCBoZXVyZXMgZHUgbWF0aW4sIHNhbnMgcXVvaSBub3VzCsOpdGlvbnMgZmxhbWLDqXMgY29tbWUgZGVzIGNhcmNham91cywgZXQgbGUgZGlhYmxlIG5vdXMgZW1wb3J0YWl0IGF1CmZpbiBmb25kIGRlcyBlbmZlcnMuCgogIEFjYWJyaXMhIEFjYWJyYXMhIEFjYWJyYW0hCiAgRmFpcy1ub3VzIHZveWFnZXIgcGFyLWRlc3N1cyBsZXMgbW9udGFnbmVzIQoKY3JpYSBkZSBub3V2ZWF1IEJhcHRpc3RlLiBFdCBub3VzIHZvaWzDoCByZXBhcnRpcyBwb3VyIGxhClBldGl0ZS1NaXPDqHJlLCBlbiBuYXZpZ3VhbnQgZW4gbCdhaXIgY29tbWUgZGVzIHJlbsOpZ2F0cyBxdWUgbm91cwrDqXRpb25zIHRvdXMuIEVuIGRldXggdG91cnMgZCdhdmlyb24sIG5vdXMgYXZpb25zIHRyYXZlcnPDqSBsZSBmbGV1dmUKZXQgbm91cyDDqXRpb25zIHJlbmR1cyBjaGV6IEJhdGlzc2V0dGUgQXVnw6kgZG9udCBsYSBtYWlzb24gw6l0YWl0IHRvdXQKaWxsdW1pbsOpZS4gT24gZW50ZW5kYWl0IHZhZ3VlbWVudCwgYXUgZGVob3JzLCBsZXMgc29ucyBkdSB2aW9sb24gZXQKbGVzIMOpY2xhdHMgZGUgcmlyZSBkZXMgZGFuc2V1cnMgZG9udCBvbiB2b3lhaXQgbGVzIG9tYnJlcyBzZQp0csOpbW91c3Nlciwgw6AgdHJhdmVycyBsZXMgdml0cmVzIGNvdXZlcnRlcyBkZSBnaXZyZS4gTm91cyBjYWNow6JtZXMKbm90cmUgY2Fub3QgZGVycmnDqHJlIGxlcyB0YXMgZGUgYm91cmRpbGxvbnMgcXVpIGJvcmRhaWVudCBsYSByaXZlLApjYXIgbGEgZ2xhY2UgYXZhaXQgcmVmb3Vsw6ksIGNldHRlIGFubsOpZS1sw6AuCgotLU1haW50ZW5hbnQsIG5vdXMgcsOpcMOpdGEgQmFwdGlzdGUsIHBhcyBkZSBiw6p0aXNlcywgbGVzIGFtaXMsIGV0CmF0dGVudGlvbiDDoCB2b3MgcGFyb2xlcy4gRGFuc29ucyBjb21tZSBkZXMgcGVyZHVzLCBtYWlzIHBhcyB1biBzZXVsCnZlcnJlIGRlIE1vbHNvbiwgbmkgZGUgamFtYcOvcXVlLCB2b3VzIG0nZW50ZW5kZXohIEV0IGF1IHByZW1pZXIKc2lnbmUsIHN1aXZlei1tb2kgdG91cywgY2FyIGlsIGZhdWRyYSByZXBhcnRpciBzYW5zIGF0dGlyZXIKbCdhdHRlbnRpb24uCgpFdCBub3VzIGFsbMOibWVzIGZyYXBwZXIgw6AgbGEgcG9ydGUuCgpWCgpMZSBww6hyZSBCYXRpc3NldHRlIHZpbnQgb3V2cmlyIGx1aS1tw6ptZSBldCBub3VzIGbDu21lcyByZcOndXMgw6AgYnJhcwpvdXZlcnRzIHBhciBsZXMgaW52aXTDqXMgcXVlIG5vdXMgY29ubmFpc3Npb25zIHByZXNxdWUgdG91cy4KCk5vdXMgZsO7bWVzIGQnYWJvcmQgYXNzYWlsbGlzIGRlIHF1ZXN0aW9uczoKCi0tRCdvw7kgdmVuZXotdm91cz8KCi0tSmUgdm91cyBjcm95YWlzIGRhbnMgbGVzIGNoYW50aWVycyEKCi0tVm91cyBhcnJpdmV6IGJpZW4gdGFyZCEKCi0tVmVuZXogcHJlbmRyZSB1bmUgbGFybWUhCgpDZSBmdXQgZW5jb3JlIEJhcHRpc3RlIHF1aSBub3VzIHRpcmEgZCdhZmZhaXJlIGVuIHByZW5hbnQgbGEgcGFyb2xlOgoKLS1EJ2Fib3JkLCBsYWlzc2V6LW5vdXMgbm91cyBkw6ljYXBvdGVyIGV0IHB1aXMgZW5zdWl0ZSBsYWlzc2V6LW5vdXMKZGFuc2VyLiBOb3VzIHNvbW1lcyB2ZW51cyBleHByw6hzIHBvdXIgw6dhLiBEZW1haW4gbWF0aW4sIGplIHLDqXBvbmRyYWkKw6AgdG91dGVzIHZvcyBxdWVzdGlvbnMgZXQgbm91cyB2b3VzIHJhY29udGVyb25zIHRvdXQgY2UgcXVlIHZvdXMKdm91ZHJlei4KClBvdXIgbW9pIGonYXZhaXMgZMOpasOgIHJlbHVxdcOpIExpemEgR3VpbWJldHRlIHF1aSDDqXRhaXQgZmFyYXVkw6llIHBhcgpsZSBwJ3RpdCBCb2lzam9saSBkZSBMYW5vcmFpZS4gSmUgbSdhcHByb2NoYWkgZCdlbGxlIHBvdXIgbGEgc2FsdWVyCmV0IHBvdXIgbHVpIGRlbWFuZGVyIGwnYXZhbnRhZ2UgZGUgbGEgcHJvY2hhaW5lIHF1aSDDqXRhaXQgdW4gX3JlZWxfCsOgIHF1YXRyZS4gRWxsZSBhY2NlcHRhIGF2ZWMgdW4gc291cmlyZSBxdWkgbWUgZml0IG91YmxpZXIgcXVlIGonYXZhaXMKcmlzcXXDqSBsZSBzYWx1dCBkZSBtb24gw6JtZSBwb3VyIGF2b2lyIGxlIHBsYWlzaXIgZGUgbWUgdHLDqW1vdXNzZXIgZXQKZGUgYmF0dHJlIGRlcyBhaWxlcyBkZSBwaWdlb24gZW4gc2EgY29tcGFnbmllLiBQZW5kYW50IGRldXggaGV1cmVzIGRlCnRlbXBzLCB1bmUgZGFuc2UgbidhdHRlbmRhaXQgcGFzIGwnYXV0cmUgZXQgY2Ugbidlc3QgcGFzIHBvdXIgbWUKdmFudGVyIHNpIGplIHZvdXMgZGlzIHF1ZSBkYW5zIGNlIHRlbXBzLWzDoCwgaWwgbid5IGF2YWl0IHBhcyBtb24KcGFyZWlsIMOgIGRpeCBsaWV1ZXMgw6AgbGEgcm9uZGUgcG91ciBsYSBnaWd1ZSBzaW1wbGUgb3UgbGEgdm9sZXVzZS4KTWVzIGNhbWFyYWRlcywgZGUgbGV1ciBjw7R0w6ksIHMnYW11c2FpZW50IGNvbW1lIGRlcyBsdXJvbnMsIGV0IHRvdXQgY2UKcXVlIGplIHB1aXMgdm91cyBkaXJlLCBjJ2VzdCBxdWUgbGVzIGdhcsOnb25zIGQnaGFiaXRhbnRzIMOpdGFpZW50CmZhdGlndcOpcyBkZSBub3VzIGF1dHJlcywgbG9yc3F1ZSBxdWF0cmUgaGV1cmVzIHNvbm7DqHJlbnQgw6AgbGEKcGVuZHVsZS4gSidhdmFpcyBjcnUgYXBlcmNldm9pciBCYXB0aXN0ZSBEdXJhbmQgcXVpIHMnYXBwcm9jaGFpdCBkdQpidWZmZXQgb8O5IGxlcyBob21tZXMgcHJlbmFpZW50IGRlcyBuaXBwZXMgZGUgd2hpc2t5IGJsYW5jLCBkZSB0ZW1wcwplbiB0ZW1wcywgbWFpcyBqJ8OpdGFpcyB0ZWxsZW1lbnQgb2NjdXDDqSBhdmVjIG1hIHBhcnRlbmFpcmUgcXVlIGplCm4neSBwb3J0YWkgcGFzIGJlYXVjb3VwIGQnYXR0ZW50aW9uLiBNYWlzIG1haW50ZW5hbnQgcXVlIGwnaGV1cmUgZGUKcmVtb250ZXIgZW4gY2Fub3Qgw6l0YWl0IGFycml2w6llLCBqZSB2aXMgY2xhaXJlbWVudCBxdWUgQmFwdGlzdGUgYXZhaXQKcHJpcyB1biBjb3VwIGRlIHRyb3AgZXQgamUgZnVzIG9ibGlnw6kgZCdhbGxlciBsZSBwcmVuZHJlIHBhciBsZSBicmFzCnBvdXIgbGUgZmFpcmUgc29ydGlyIGF2ZWMgbW9pIGVuIGZhaXNhbnQgc2lnbmUgYXV4IGF1dHJlcyBkZSBzZQpwcsOpcGFyZXIgw6Agbm91cyBzdWl2cmUgc2FucyBhdHRpcmVyIGwnYXR0ZW50aW9uIGRlcyBkYW5zZXVzZXMuIE5vdXMKc29ydMOubWVzIGRvbmMgbGVzIHVucyBhcHLDqHMgbGVzIGF1dHJlcyBzYW5zIGZhaXJlIHNlbWJsYW50IGRlIHJpZW4KZXQsIGNpbnEgbWludXRlcyBwbHVzIHRhcmQsIG5vdXMgw6l0aW9ucyByZW1vbnTDqXMgZW4gY2Fub3QsIGFwcsOocwphdm9pciBxdWl0dMOpIGxlIGJhbCBjb21tZSBkZXMgc2F1dmFnZXMsIHNhbnMgZGlyZSBib25qb3VyIMOgIHBlcnNvbm5lLApwYXMgbcOqbWUgw6AgTGl6YSBxdWUgaidhdmFpcyBpbnZpdMOpZSBwb3VyIGRhbnNlciB1biBfZm9pbl8uIEonYWkKdG91am91cnMgcGVuc8OpIHF1ZSBjJ8OpdGFpdCBjZWxhIHF1aSBsJ2F2YWl0IGTDqWNpZMOpZSDDoCBtZSB0cmlnYXVkZXIKZXQgw6Agw6lwb3VzZXIgbGUgcGV0aXQgQm9pc2pvbGkgc2FucyBtw6ptZSBtJ2ludml0ZXIgw6Agc2VzIG5vY2VzLCBsYQpib3VncmVzc2UuIE1haXMgcG91ciByZXZlbmlyIMOgIG5vdHJlIGNhbm90LCBqZSB2b3VzIGF2b3VlIHF1ZSBub3VzCsOpdGlvbnMgcnVkZW1lbnQgZW1iw6p0w6lzIGRlIHZvaXIgcXVlIEJhcHRpc3RlIER1cmFuZCBhdmFpdCBidSB1bgpjb3VwIGNhciBjJ8OpdGFpdCBsdWkgcXVpIG5vdXMgZ291dmVybmFpdCBldCBub3VzIG4nYXZpb25zIGp1c3RlIHF1ZQpsZSB0ZW1wcyBkZSByZXZlbmlyIGF1IGNoYW50aWVyIHBvdXIgc2l4IGhldXJlcyBkdSBtYXRpbiwgYXZhbnQKbGUgcsOpdmVpbCBkZXMgaG9tbWVzIHF1aSBuZSB0cmF2YWlsbGFpZW50IHBhcyBsZSBqb3VyIGR1IGpvdXIgZGUKbCdhbi4gTGEgbHVuZSDDqXRhaXQgZGlzcGFydWUgZXQgaWwgbmUgZmFpc2FpdCBwbHVzIGF1c3NpIGNsYWlyCnF1J2F1cGFyYXZhbnQgZXQgY2Ugbidlc3QgcGFzIHNhbnMgY3JhaW50ZSBxdWUgamUgcHJpcyBtYSBwb3NpdGlvbiDDoApsJ2F2YW50IGR1IGNhbm90LCBiaWVuIGTDqWNpZMOpIMOgIGF2b2lyIGwnb2VpbCBzdXIgbGEgcm91dGUgcXVlIG5vdXMKYWxsaW9ucyBzdWl2cmUuIEF2YW50IGRlIG5vdXMgZW5sZXZlciBkYW5zIGxlcyBhaXJzLCBqZSBtZSByZXRvdXJuYWkKZXQgamUgZGlzIMOgIEJhcHRpc3RlOgoKLS1BdHRlbnRpb24hIGzDoCwgbW9uIHZpZXV4LiBQaXF1ZSB0b3V0IGRyb2l0IHN1ciBsYSBtb250YWduZSBkZQpNb250csOpYWwsIGF1c3NpdMO0dCBxdWUgdHUgcG91cnJhcyBsJ2FwZXJjZXZvaXIuCgotLUplIGNvbm5haXMgbW9uIGFmZmFpcmUsIHLDqXBsaXF1YSBCYXB0aXN0ZSwgZXQgbcOqbGUtdG9pIGRlcyB0aWVubmVzIQoKRXQgYXZhbnQgcXVlIGonYWllIGV1IGxlIHRlbXBzIGRlIHLDqXBsaXF1ZXI6CgogIEFjYWJyaXMhIEFjYWJyYXMhIEFjYWJyYW0hCiAgRmFpcy1ub3VzIHZveWFnZXIgcGFyLWRlc3N1cyBsZXMgbW9udGFnbmVzIQoKVkkKCkV0IG5vdXMgdm9pbMOgIHJlcGFydGlzIMOgIHRvdXRlIHZpdGVzc2UuIE1haXMgaWwgZGV2aW50IGF1c3NpdMO0dArDqXZpZGVudCBxdWUgbm90cmUgcGlsb3RlIG4nYXZhaXQgcGx1cyBsYSBtYWluIGF1c3NpIHPDu3JlLCBjYXIgbGUKY2Fub3QgZMOpY3JpdmFpdCBkZXMgemlnemFncyBpbnF1acOpdGFudHMuIE5vdXMgbmUgcGFzc8OibWVzIHBhcyDDoCBjZW50CnBpZWRzIGR1IGNsb2NoZXIgZGUgQ29udHJlY29ldXIgZXQgYXUgbGlldSBkZSBub3VzIGRpcmlnZXIgw6AgbCdvdWVzdCwKdmVycyBNb250csOpYWwsIEJhcHRpc3RlIG5vdXMgZml0IHByZW5kcmUgbGVzIGJvcmTDqWVzIHZlcnMgbGEgcml2acOocmUKUmljaGVsaWV1LiBRdWVscXVlcyBpbnN0YW50cyBwbHVzIHRhcmQsIG5vdXMgcGFzc8OibWVzIHBhci1kZXNzdXMgbGEKbW9udGFnbmUgZGUgQmVsb2VpbCBldCBpbCBuZSBzJ2VuIG1hbnF1YSBwYXMgZGUgZGl4IHBpZWRzIHF1ZSBsJ2F2YW50CmR1IGNhbm90IG4nYWxsw6J0IHNlIGJyaXNlciBzdXIgbGEgZ3JhbmRlIGNyb2l4IGRlIHRlbXDDqXJhbmNlIHF1ZQpsJ8OpdsOqcXVlIGRlIFF1w6liZWMgYXZhaXQgcGxhbnTDqWUgbMOgLgoKLS3DgCBkcm9pdGUhIEJhcHRpc3RlISDDoCBkcm9pdGUhIG1vbiB2aWV1eCwgY2FyIHR1IHZhcyBub3VzIGVudm95ZXIKY2hleiBsZSBkaWFibGUsIHNpIHR1IG5lIGdvdXZlcm5lcyBwYXMgbWlldXggcXVlIMOnYSEKCkV0IEJhcHRpc3RlIGZpdCBpbnN0aW5jdGl2ZW1lbnQgdG91cm5lciBsZSBjYW5vdCB2ZXJzIGxhIGRyb2l0ZSBlbgptZXR0YW50IGxlIGNhcCBzdXIgbGEgbW9udGFnbmUgZGUgTW9udHLDqWFsIHF1ZSBub3VzIGFwZXJjZXZpb25zIGTDqWrDoApkYW5zIGxlIGxvaW50YWluLiBKJ2F2b3VlIHF1ZSBsYSBwZXVyIGNvbW1lbsOnYWl0IMOgIG1lIHRvcnRpbGxlciwgY2FyCnNpIEJhcHRpc3RlIGNvbnRpbnVhaXQgw6Agbm91cyBjb25kdWlyZSBkZSB0cmF2ZXJzLCBub3VzIMOpdGlvbnMKZmxhbWLDqXMgY29tbWUgZGVzIGdvcmV0cyBxdSdvbiBncmlsbGUgYXByw6hzIGxhIGJvdWNoZXJpZS4gRXQgamUgdm91cwphc3N1cmUgcXVlIGxhIGTDqWdyaW5nb2xhZGUgbmUgc2UgZml0IHBhcyBhdHRlbmRyZSwgY2FyIGF1IG1vbWVudCBvw7kKbm91cyBwYXNzaW9ucyBhdS1kZXNzdXMgZGUgTW9udHLDqWFsLCBCYXB0aXN0ZSBub3VzIGZpdCBwcmVuZHJlIHVuZQpfc2hlZXJfIGV0LCBhdmFudCBkJ2F2b2lyIGV1IGxlIHRlbXBzIGRlIG0neSBwcsOpcGFyZXIsIGxlIGNhbm90CnMnZW5mb27Dp2FpdCBkYW5zIHVuIGJhbmMgZGUgbmVpZ2UsIGRhbnMgdW5lIMOpY2xhaXJjaWUsIHN1ciBsZSBmbGFuYwpkZSBsYSBtb250YWduZS4gSGV1cmV1c2VtZW50IHF1ZSBjJ8OpdGFpdCBkYW5zIGxhIG5laWdlIG1vbGxlLCBxdWUKcGVyc29ubmUgbidhdHRyYXBhIGRlIG1hbCBldCBxdWUgbGUgY2Fub3QgbmUgZnV0IHBhcyBicmlzw6kuIE1haXMgw6AKcGVpbmUgw6l0aW9ucy1ub3VzIHNvcnRpcyBkZSBsYSBuZWlnZSBxdWUgdm9pbMOgIEJhcHRpc3RlIHF1aSBjb21tZW5jZQrDoCBzYWNyZXIgY29tbWUgdW4gcG9zc8OpZMOpIGV0IHF1aSBkw6ljbGFyZSBxdSdhdmFudCBkZSByZXBhcnRpciBwb3VyIGxhCkdhdGluZWF1IGlsIHZldXQgZGVzY2VuZHJlIGVuIHZpbGxlIHByZW5kcmUgdW4gdmVycmUuIEonZXNzYXlhaSBkZQpyYWlzb25uZXIgYXZlYyBsdWksIG1haXMgYWxsZXogZG9uYyBmYWlyZSBlbnRlbmRyZSByYWlzb24gw6AgdW4KaXZyb2duZSBxdWkgdmV1dCBzZSBtb3VpbGxlciBsYSBsdWV0dGUuIEFsb3JzLCByZW5kdSDDoCBib3V0IGRlCnBhdGllbmNlLCBldCBwbHV0w7R0IHF1ZSBkZSBsYWlzc2VyIG5vcyDDom1lcyBhdSBkaWFibGUgcXVpIHNlIGzDqWNoYWl0CmTDqWrDoCBsZXMgYmFiaW5lcyBlbiBub3VzIHZveWFudCBkYW5zIGwnZW1iYXJyYXMsIGplIGRpcyB1biBtb3Qgw6AgbWVzCmF1dHJlcyBjb21wYWdub25zIHF1aSBhdmFpZW50IGF1c3NpIHBldXIgcXVlIG1vaSwgZXQgbm91cyBub3VzIGpldG9ucwp0b3VzIHN1ciBCYXB0aXN0ZSBxdWUgbm91cyB0ZXJyYXNzb25zLCBzYW5zIGx1aSBmYWlyZSBkZSBtYWwsIGV0IHF1ZQpub3VzIHBsYcOnb25zIGVuc3VpdGUgYXUgZm9uZCBkdSBjYW5vdCwtLWFwcsOocyBsJ2F2b2lyIGxpZ290w6kgY29tbWUgdW4KYm91dCBkZSBzYXVjaXNzZSBldCBsdWkgYXZvaXIgbWlzIHVuIGLDomlsbG9uIHBvdXIgbCdlbXDDqmNoZXIgZGUKcHJvbm9uY2VyIGRlcyBwYXJvbGVzIGRhbmdlcmV1c2VzLCBsb3JzcXVlIG5vdXMgc2VyaW9ucyBlbiBsJ2Fpci4gRXQ6CgogIEFjYWJyaXMhIEFjYWJyYXMhIEFjYWJyYW0hCgpub3VzIHZvaWzDoCByZXBhcnRpcyBzdXIgdW4gdHJhaW4gZGUgdG91cyBsZXMgZGlhYmxlcywgY2FyIG5vdXMKbidhdmlvbnMgcGx1cyBxdSd1bmUgaGV1cmUgcG91ciBub3VzIHJlbmRyZSBhdSBjaGFudGllciBkZSBsYQpHYXRpbmVhdS4gQydlc3QgbW9pIHF1aSBnb3V2ZXJuYWlzLCBjZXR0ZSBmb2lzLWzDoCwgZXQgamUgdm91cyBhc3N1cmUKcXVlIGonYXZhaXMgbCdvZWlsIG91dmVydCBldCBsZSBicmFzIHNvbGlkZS4gTm91cyByZW1vbnTDom1lcyBsYQpyaXZpw6hyZSBPdXRhb3VhaXMgY29tbWUgdW5lIHBvdXNzacOocmUganVzcXUnw6AgbGEgUG9pbnRlIMOgIEdhdGluZWF1IGV0CmRlIGzDoCBub3VzIHBpcXXDom1lcyBhdSBub3JkIHZlcnMgbGUgY2hhbnRpZXIuIE5vdXMgbidlbiDDqXRpb25zIHBsdXMKcXUnw6AgcXVlbHF1ZXMgbGlldWVzLCBxdWFuZCB2b2lsw6AtdC1pbCBwYXMgY2V0IGFuaW1hbCBkZSBCYXB0aXN0ZSBxdWkKc2UgZMOpdG9ydGlsbGUgZGUgbGEgY29yZGUgYXZlYyBsYXF1ZWxsZSBub3VzIGwnYXZpb25zIGZpY2Vsw6ksIHF1aQpzJ2FycmFjaGUgc29uIGLDomlsbG9uIGV0IHF1aSBzZSBsw6h2ZSB0b3V0IGRyb2l0LCBkYW5zIGxlIGNhbm90LCBlbgpsw6JjaGFudCB1biBzYWNyZSBxdWkgbWUgZml0IGZyw6ltaXIganVzcXVlIGRhbnMgbGEgcG9pbnRlIGRlcyBjaGV2ZXV4LgpJbXBvc3NpYmxlIGRlIGx1dHRlciBjb250cmUgbHVpIGRhbnMgbGUgY2Fub3Qgc2FucyBjb3VyaXIgbGUgcmlzcXVlCmRlIHRvbWJlciBkJ3VuZSBoYXV0ZXVyIGRlIGRldXggb3UgdHJvaXMgY2VudHMgcGllZHMsIGV0IGwnYW5pbWFsCmdlc3RpY3VsYWl0IGNvbW1lIExpbiBwZXJkdSBlbiBub3VzIG1lbmHDp2FudCB0b3VzIGRlIHNvbiBhdmlyb24gcXUnaWwKYXZhaXQgc2Fpc2kgZXQgcXUnaWwgZmFpc2FpdCB0b3Vybm95ZXIgc3VyIG5vcyB0w6p0ZXMsIGVuIGZhaXNhbnQgbGUKbW91bGluZXQgY29tbWUgdW4gSXJsYW5kYWlzIGF2ZWMgc29uIF9zaGlsZWxhZ2hfLiBMYSBwb3NpdGlvbiDDqXRhaXQKdGVycmlibGUsIGNvbW1lIHZvdXMgbGUgY29tcHJlbmV6IGJpZW4uIEhldXJldXNlbWVudCBxdWUgbm91cwphcnJpdmlvbnMsIG1haXMgaifDqXRhaXMgdGVsbGVtZW50IGV4Y2l0w6ksIHF1ZSBwYXIgdW5lIGZhdXNzZQptYW5vZXV2cmUgcXVlIGplIGZpcyBwb3VyIMOpdml0ZXIgbCdhdmlyb24gZGUgQmFwdGlzdGUsIGxlIGNhbm90CmhldXJ0YSBsYSB0w6p0ZSBkJ3VuIGdyb3MgcGluIGV0IHF1ZSBub3VzIHZvaWzDoCB0b3VzIHByw6ljaXBpdMOpcyBlbgpiYXMsIGTDqWdyaW5nb2xhbnQgZGUgYnJhbmNoZSBlbiBicmFuY2hlIGNvbW1lIGRlcyBwZXJkcml4IHF1ZSBsJ29uCnR1ZSBkYW5zIGxlcyDDqXBpbmV0dGVzLiBKZSBuZSBzYWlzIHBhcyBjb21iaWVuIGplIG1pcyBkZSB0ZW1wcyDDoApkZXNjZW5kcmUganVzcXUnZW4gYmFzIGNhciBqZSBwZXJkaXMgY29ubmFpc3NhbmNlIGF2YW50IGQnYXJyaXZlciwgZXQKbW9uIGRlcm5pZXIgc291dmVuaXIgw6l0YWl0IGNvbW1lIGNlbHVpIGQndW4gaG9tbWUgcXVpIHLDqnZlIHF1J2lsCnRvbWJlIGRhbnMgdW4gcHVpdHMgcXVpIG4nYSBwYXMgZGUgZm9uZC4KClZJSQoKVmVycyBsZXMgaHVpdCBoZXVyZXMgZHUgbWF0aW4sIGplIG0nw6l2ZWlsbGFpIGRhbnMgbW9uIGxpdCBkYW5zIGxhCmNhYmFuZSwgb8O5IG5vdXMgYXZhaWVudCB0cmFuc3BvcnTDqXMgZGVzIGLDu2NoZXJvbnMgcXVpIG5vdXMgYXZhaWVudAp0cm91dsOpcyBzYW5zIGNvbm5haXNzYW5jZSwgZW5mb25jw6lzIGp1c3F1J2F1IGNvdSBkYW5zIHVuIGJhbmMgZGUKbmVpZ2UgZHUgdm9pc2luYWdlLiBIZXVyZXVzZW1lbnQgcXVlIHBlcnNvbm5lIG5lIHMnw6l0YWl0IGNhc3PDqSBsZXMKcmVpbnMgbWFpcyBqZSBuJ2FpIHBhcyBiZXNvaW4gZGUgdm91cyBkaXJlIHF1ZSBqJ2F2YWlzIGxlcyBjw7R0ZXMgc3VyCmxlIGxvbmcgY29tbWUgdW4gaG9tbWUgcXVpIGEgY291Y2jDqSBzdXIgbGVzIHJhdmFsZW1lbnRzIHBlbmRhbnQgdG91dGUKdW5lIHNlbWFpbmUsIHNhbnMgcGFybGVyIGQndW4gX2JsYWNrZXllXyBldCBkZSBkZXV4IG91IHRyb2lzCmTDqWNoaXJ1cmVzIHN1ciBsZXMgbWFpbnMgZXQgZGFucyBsYSBmaWd1cmUuIEVuZmluLCBsZSBwcmluY2lwYWwsCmMnZXN0IHF1ZSBsZSBkaWFibGUgbmUgbm91cyBhdmFpdCBwYXMgdG91cyBlbXBvcnTDqXMgZXQgamUgbidhaSBwYXMKYmVzb2luIGRlIHZvdXMgZGlyZSBxdWUgamUgbmUgbSdlbXByZXNzYWkgcGFzIGRlIGTDqW1lbnRpciBjZXV4IHF1aQpwcsOpdGVuZGlyZW50IHF1J2lscyBtJ2F2YWllbnQgdHJvdXbDqSwgYXZlYyBCYXB0aXN0ZSBldCBsZXMgc2l4CmF1dHJlcywgdG91cyBzYW91bHMgY29tbWUgZGVzIGdyaXZlcywgZXQgZW4gdHJhaW4gZGUgY3V2ZXIgbm90cmUKamFtYcOvcXVlIGRhbnMgdW4gYmFuYyBkZSBuZWlnZSBkZXMgZW52aXJvbnMuIEMnw6l0YWl0IGTDqWrDoCBwYXMgc2kgYmVhdQpkJ2F2b2lyIHJpc3F1w6kgZGUgdmVuZHJlIHNvbiDDom1lIGF1IGRpYWJsZSwgcG91ciBzJ2VuIHZhbnRlciBwYXJtaQpsZXMgY2FtYXJhZGVzOyBldCBjZSBuJ2VzdCBxdWUgYmllbiBkZXMgYW5uw6llcyBwbHVzIHRhcmQgcXVlIGplCnJhY29udGFpIGwnaGlzdG9pcmUgdGVsbGUgcXUnZWxsZSBtJ8OpdGFpdCBhcnJpdsOpZS4KClRvdXQgY2UgcXVlIGplIHB1aXMgdm91cyBkaXJlLCBtZXMgYW1pcywgYydlc3QgcXVlIGNlIG4nZXN0IHBhcyBzaQpkcsO0bGUgcXUnb24gbGUgcGVuc2UgcXVlIGQnYWxsZXIgdm9pciBzYSBibG9uZGUgZW4gY2Fub3QgZCfDqWNvcmNlLCBlbgpwbGVpbiBjb2V1ciBkJ2hpdmVyLCBlbiBjb3VyYW50IGxhIGNoYXNzZS1nYWxlcmllOyBzdXJ0b3V0IHNpIHZvdXMKYXZleiB1biBtYXVkaXQgaXZyb2duZSBxdWkgc2UgbcOqbGUgZGUgZ291dmVybmVyLiBTaSB2b3VzIG0nZW4gY3JveWV6LAp2b3VzIGF0dGVuZHJleiDDoCBsJ8OpdMOpIHByb2NoYWluIHBvdXIgYWxsZXIgZW1icmFzc2VyIHZvcyBwJ3RpdHMKY29ldXJzLCBzYW5zIGNvdXJpciBsZSByaXNxdWUgZGUgdm95YWdlciBhdXggZMOpcGVucyBkdSBkaWFibGUuCgpFdCBKb2UgbGUgX2Nvb2tfIHBsb25nZWEgc2EgbWljb3VhbmUgZGFucyBsYSBtw6lsYXNzZSBib3VpbGxvbm5hbnRlCmF1eCByZWZsZXRzIGRvcsOpcywgZXQgZMOpY2xhcmEgcXVlIGxhIHRpcmUgw6l0YWl0IGN1aXRlIMOgIHBvaW50IGV0CnF1J2lsIG4neSBhdmFpdCBwbHVzIHF1J8OgIGwnw6l0aXJlci4KCgoKTEUgTE9VUC1HQVJPVQoKT3VpISBWb3VzIMOqdGVzIHRvdXMgZGVzIGZpbnMtZmlucywgbGVzIGF2b2NhdHMgZCBNb250csOpYWwsIHBvdXIgdm91cwptb3F1ZXIgZGVzIGxvdXBzLWdhcm91cy4gSWwgZXMgdnJhaSBxdWUgbGUgZGlhYmxlIG5lIGZhaXQgcGFzIHRhbnQgZGUKY8OpcsOpbW9uaWVzIGF2ZWMgdm91cyBhdXRyZXMgZXQgcXUnaWwgZXN0IHNpIHPDu3IgZGUgc29uIGFmZmFpcmUsIHF1J2lsCm4nYSBwYXMgYmVzb2luIGRlIHZvdXMgZmFpcmUgY291cmlyIGxhIHByw6l0ZW50YWluZSBwb3VyIHZvdXMgYXR0cmFwZXIKcGFyIGxlIGNoaWdub24gZHUgY291LCDDoCBsJ2hldXJlIHF1aSBsdWkgY29udmllbmRyYS4KCi0tVm95b25zLCBww6hyZSBCcmluZGFtb3VyLCBuZSB2b3VzIGbDomNoZXogcGFzLCBldCBzaSB2b3VzIGF2ZXogdnUgZGVzCmxvdXBzLWdhcm91cywgcmFjb250ZXotbm91cyDDp2EuCgpDJ8OpdGFpdCBwZW5kYW50IGxhIGRlcm5pw6hyZSBsdXR0ZSDDqWxlY3RvcmFsZSBkZSBSaWNoZWxpZXUsIGVudHJlCkJydW5lYXUgZXQgTW9yZ2FuLCBkYW5zIHVuZSBzYWxsZSBkdSBjb21pdMOpIGR1IFBvdC1hdS1iZXVycmUsIGVuIGJhcwpkZSBTb3JlbC4gTGVzIGNhYmFsZXVycyByw6l2aXNhaWVudCBsZXMgbGlzdGVzIGV0IGZhaXNhaWVudCBkZXMgY291cnMKZCfDqWNvbm9taWUgcG9saXRpcXVlIGF1eCBiYWRhdWRzIHF1aSBwcsOpdGVuZGFpZW50IHMnaW50w6lyZXNzZXIgw6AKbGV1cnMgYXJndW1lbnRzLCBwb3VyIGF0dHJhcGVyIGRlIHRlbXBzIGVuIHRlbXBzIHVuIHAndGl0IGNvdXAgZGUKd2hpc2t5IGJsYW5jIMOgIGxhIHNhbnTDqSBkZSBtb25zaWV1ciBNb3JnYW4uCgpEYW5zIHVuZSBzYWxsZSBiYXNzZSwgcmVtcGxpZSBkZSBmdW3DqWUsIGFzc2lzIHN1ciBkZXMgYmFuY3MgZ3Jvc3NpZXJzCmF1dG91ciBkJ3VuZSB0YWJsZSBkZSBib2lzIGRlIHNhcGluIGJydXQsIHZpbmd0LWNpbnEgw6AgdHJlbnRlCmdhaWxsYXJkcyBkZXMgYWxlbnRvdXJzIGNhdXNhaWVudCBwb2xpdGlxdWUgc291cyBsYSBoYXV0ZSBkaXJlY3Rpb24KZCd1biDDqXR1ZGlhbnQgZW4gZHJvaXQgcXVpIHBvbnRpZmlhaXQsIGZsYW5xdcOpIGRlIHF1YXRyZSBvdSBjaW5xCmV4ZW1wbGFpcmVzIGR1IEhhbnNhcmQgZXQgZGVzIGRlcm5pZXJzIGxpdnJlcyBibGV1cyBkZXMgbWluaXN0w6hyZXMKZCdPdHRhd2EuCgpMZSBww6hyZSBQaWVycmljaGUgQnJpbmRhbW91ciBlbiDDqXRhaXQgcmVuZHUgYXUgcGFyb3h5c21lIGQndW4KZW50aG91c2lhc21lIMOpY2hldmVsw6kgZXQgY3JpYWl0IGNvbW1lIHVuIHBvc3PDqWTDqToKCi0tSG91cnJhaCBwb3VyIG1vbnNpZXVyIE1vcmdhbiEgZXQgcXVlIGxlIGRpYWJsZSBlbXBvcnRlIHRvdXMgbGVzCnJvdWdlcyBkZSBTb3JlbDsgYydlc3QgdW5lIGJhbmRlIGRlIGNvdXJldXggZGUgbG91cC1nYXJvdXguCgpVbiDDqWNsYXQgZGUgcmlyZSBmb3JtaWRhYmxlIGFjY3VlaWxsaXQgY2V0dGUgZnJhc3F1ZSBkdSBww6hyZQpQaWVycmljaGUgZXQgY29tbWUgb24gbGUgc2F2YWl0IGJhdmFyZCwgw6Agc2VzIGhldXJlcyBkJ2VudGhvdXNpYXNtZSwKb24gcsOpc29sdXQgZGUgbGUgZmFpcmUgY2F1c2VyLgoKLS1EZXMgY291cmV1eCBkZSBsb3VwLWdhcm91ISBBbGxvbnMgZG9uYyBNLiBCcmluZGFtb3VyLCBlc3QtY2UgcXVlCnZvdXMgY3JveWV6IGVuY29yZSDDoCBjZXMgYmxhZ3Vlcy1sw6AsIGRhbnMgbGUgcmFuZyBkdSBQb3QtYXUtYmV1cnJlPwoKQydlc3QgYWxvcnMgcXVlIGxlIHZpZWlsbGFyZCByaXBvc3RhIGVuIHMnYXR0YXF1YW50IGF1IG1hbnF1ZSBkZSB2ZXJ0dQpldCBkJ29ydGhvZG94aWUgZGVzIGF2b2NhdHMgZW4gZ8OpbsOpcmFsIGV0IGRlIGNldXggZGUgTW9udHLDqWFsIGVuCnBhcnRpY3VsaWVyLgoKLS1BaCBiZW4gb3VpISB2b3VzIMOqdGVzIHRvdXMgcGFyZWlscywgdm91cyBhdXRyZXMgbGVzIGF2b2NhdHMsIGV0IHNpCmplIHZvdXMgZGVtYW5kYWlzIHNldWxlbWVudCBjZSBxdWUgYydlc3QgcXUndW4gbG91cC1nYXJvdSwgdm91cwpzZXJpZXogYmVuIGVuIHBlaW5lIGRlIG1lIGxlIGRpcmUuIFF1YW5kIGplIGRpcyBxdWUgdG91cyBsZXMgcm91Z2VzCmRlIFNvcmVsIGNvdXJlbnQgbGUgbG91cC1nYXJvdSwgYydlc3QgdW5lIG1hbmnDqHJlIGRlIHBhcmxlciwgY2FyIHZvdXMKZGV2cmlleiBzYXZvaXIgcXUnaWwgZmF1dCBhdm9pciBwYXNzw6kgc2VwdCBhbnMgc2FucyBhbGxlciDDoCBjb25mZXNzZSwKcG91ciBxdWUgbGUgZGlhYmxlIHB1aXNzZSBzJ2VtcGFyZXIgZCd1biBob21tZSBldCBsdWkgZmFpcmUgcG91c3NlcgpkdSBwb2lsIGVuIGRlZGFucy4gSmUgc3VwcG9zZSBxdWUgdm91cyBuZSBzYXZleiBtw6ptZSBwYXMgcXUndW4gaG9tbWUKcXVpIGNvdXJ0IGxlIGxvdXAtZ2Fyb3UgYSBsYSBjb3Vlbm5lIGNvbW1lIHVuZSBwZWF1IGRlIGxvdXAgcmV2aXLDqWUKw6AgbCdlbnZlcnMsIGF2ZWMgbGUgcG9pbCBlbiBkZWRhbnMuIFVuIHNhdXZhZ2UgZGUgU2FpbnQtRnJhbsOnb2lzCmNvbm5hw650IMOnYSwgbWFpcyB1biBhdm9jYXQgZGUgTW9udHLDqWFsLCDDp2EgcGV1dCBiYXZhc3NlciBzdXIgbGEKcG9saXRpcXVlLCBtYWlzIGVuIGRlaG9ycyBkZSDDp2EsIGZhdXQgcGFzIGx1aSBkZW1hbmRlciBncmFuZC1jaG9zZQpzdXIgbGVzIGNob3NlcyBzw6lyaWV1c2VzIGV0IHN1ciBjZSBxdWkgY29uY2VybmUgbGVzIGhhYml0YW50cy4KCi0tQydlc3QgdnJhaSwgcsOpcG9uZGlyZW50IHF1ZWxxdWVzIGZhcmNldXJzIHF1aSBzZSByYW5nZWFpZW50IGF2ZWMgbGUKcMOocmUgUGllcnJpY2hlLCBjb250cmUgbCdhdm9jYXQgZW4gaGVyYmUuCgotLU91aSEgdG91dCDDp2EsIGMnZXN0IHRyw6hzIGJpZW4sIHJpcG9zdGEgbCfDqXR1ZGlhbnQgZGFucyBsZSBidXQgZGUKcG91c3NlciBQaWVycmljaGUgw6AgYm91dCwgbWFpcyDDp2Egbidlc3QgcGFzIHVuZSB2w6lyaXRhYmxlIGhpc3RvaXJlIGRlCmxvdXAtZ2Fyb3UuIEVuIGF2ZXotdm91cyBqYW1haXMgdnUsIHZvdXMsIHVuIGxvdXAtZ2Fyb3UsIE0uCkJyaW5kYW1vdXI/IEMnZXN0IGNlbGEgcXVlIGplIHZvdWRyYWlzIHNhdm9pci4KCi0tT3VpLCBqJ2VuIGFpIHZ1IHVuIGxvdXAtZ2Fyb3UsIHBhcyB1biBzZXVsLCBtYWlzIHZpbmd0LWNpbnEsIGV0IHNpCmplIHZvdXMgcmVuY29udHJhaXMgc2V1bGVtZW50IHN1ciBsZSBib3JkIGQndW4gZm9zc8OpLCBkYW5zIHVuZSB0YWxsZQpkZSBoYXJ0LXJvdWdlIGFwcsOocyBuZXVmIGhldXJlcyBkdSBzb2lyLCBqZSBnYWdlcmFpcyBxdWUgdm91cyBhdXJpZXoKbGUgcG9pbCBhdXNzaSBsb25nIHF1J3VuIGxvdXAsIHZvdXMgcXVpIHBhcmxleiwgY2FyIMOnYSB2b3VzCmVtYsOqdGVyYWl0IGJlbiBkZSBtZSBtb250cmVyIHZvdHJlIGJpbGxldCBkZSBjb25mZXNzaW9uLiBMZSBwbHVzIHF1ZQrDp2EgcG91cnJhaXQgw6p0cmUgY2Ugc2VyYWl0IHVuIG1hdXZhaXMgYmlsbGV0IGRlIHDDonF1ZXMgZGUgcmVuYXJkLiBBaCEKb24gdm91cyBjb25uYcOudCBsZXMgZ2VucyBkZSBNb250csOpYWwuIEZhdXQgcGFzIHZlbmlyIG5vdXMgcG91c3NlciBkZXMKcG9pbnRlcywgcGFyY2UgcXVlIHZvdXMgw6p0ZXMgcGx1cyDDqWR1cXXDqXMgcXVlIG5vdXMgYXV0cmVzLgoKLS1PdWkhIG91aSwgdG91dCDDp2EsIGMnZXN0IGJpZW4gYmVhdSBtYWlzIGMnZXN0IHBvdXIgbm91cyBlbmRvcm1pcgpxdWUgdm91cyBibGFndWV6IGNvbW1lIMOnYS4gQWxsZXogZGlyZSDDp2EgYXV4IGdlbnMgZGUgQnJ1bmVhdS4gQ2UgcXVpCm1lIGZhdXQgw6AgbW9pIGMnZXN0IGRlcyBwcmV1dmVzLCBldCBzaSB2b3VzIHNhdmV6IHVuZSBoaXN0b2lyZSBkZQpsb3VwLWdhcm91LCByYWNvbnRlei1sYSwgY2FyIG9uIHZhIGZpbmlyIHBhciBjcm9pcmUgcXVlIHZvdXMgbidlbgpzYXZleiBwYXMgZXQgcXVlIHZvdXMgdm91bGV6IHZvdXMgbW9xdWVyIGRlIG5vdXMgYXV0cmVzLgoKLS1PdWktZGEhIG91aS4gRWggYmVuIGonZW4gYWkgdW5lIGhpc3RvaXJlIGV0IGplIHZhcyB2b3VzIGxhIGNvbnRlciwKbWFpcyDDoCB1bmUgY29uZGl0aW9uOiB2b3VzIGFsbGV6IG5vdXMgZmFpcmUgc2VydmlyIHVuIGdhbGxvbiBkZQp3aGlza3kgZCfDqWxlY3Rpb24gcG91ciBxdWUgbm91cyBidXZpb25zIMOgIGxhIHNhbnTDqSBkZSBtb25zaWV1cgpNb3JnYW4sIG5vdHJlIGNhbmRpZGF0LgoKTGEgcHJvcG9zaXRpb24gZnV0IGFncsOpw6llIGV0IGxlIHAndGl0IGxhaXQgw6lsZWN0b3JhbCBmdXQgdmVyc8OpIMOgIGxhCnJvbmRlLCBoYXVzc2FudCBkJ3VuIGNyYW4gbCdlbnRob3VzaWFzbWUgZMOpasOgIHN1cmNoYXVmZsOpIGRlIGNldAphdWRpdG9pcmUgZMOpc2ludMOpcmVzc8OpIQoKRXQgYXByw6hzIGF2b2lyIGNvbnN0YXTDqSBxdSdpbCBuZSByZXN0YWl0IHBsdXMgdW5lIGdvdXR0ZSBkZSBsaXF1aWRlCmF1IGZvbmQgZGUgbGEgbWVzdXJlIGQndW4gZ2FsbG9uIHF1J29uIGF2YWl0IHBsYWPDqSBzdXIgdW5lIHBpbGUgZGUKbGl0dMOpcmF0dXJlIMOpbGVjdG9yYWxlLCBhdSBiZWF1IG1pbGlldSBkZSBsYSB0YWJsZSwgUGllcnJpY2hlCkJyaW5kYW1vdXIgcHJpdCBsYSBwYXJvbGU6CgpDJ2VzdCBwYXMgcG91ciB1biB2ZXJyZSBkZSB3aGlza3kgZHUgZ291dmVybmVtZW50IHF1ZSBqZSB2b3VkcmFpcwp2b3VzIGNvbnRlciB1bmUgbWVudGVyaWUuIElsIG1lIGZhdWRyYWl0IHF1ZWxxdWUgY2hvc2UgZGUgcGx1cwpzw6lyaWV1eCBxdWUgw6dhIHF1ZSBqZSBtZSBtZXR0ZSBlbiBjb25zY2llbmNlIGVuIHRlbXBzIGQnw6lsZWN0aW9uLiBMZXMKZ3JvcyBib25uZXRzIHNlIHZlbmRlbnQgdHJvcCBjaGVyIMOgIE90dGF3YSBjb21tZSDDoCBRdcOpYmVjLCBwb3VyIHF1ZQpsZXMgZ2VucyBkdSBjb210w6kgZGUgU29yZWwgcGFzc2VudCBwb3VyIGfDonRlciBsZXMgcHJpeC4gSmUgdm91cyBkaXJhaQpkb25jIGxhIHbDqXJpdMOpIGV0IHJpZW4gcXVlIGxhIHbDqXJpdMOpLCBjb21tZSBvbiBkaXQgw6AgbGEgY291ciBkZSBTb3JlbApxdWFuZCBvbiBlc3QgYXBwZWzDqSBjb21tZSB0w6ltb2luLiBQb3VyIGRlcyBsb3Vwcy1nYXJvdXMsIGonZW4gYWkgdnUKYXNzZXogcG91ciBmYWlyZSB1biByw6lnaW1lbnQsIGRhbnMgbW9uIGpldW5lIHRlbXBzLCBsb3JzcXVlIGplCm5hdmlndWFpcyBsJ8OpdMOpIMOgIGJvcmQgZGVzIGJhdGVhdXggZXQgcXVlIGplIGZhaXNhaXMgbGEgcMOqY2hlIGF1CnBldGl0IHBvaXNzb24sIGwnaGl2ZXIsIGF1eCBjaGVuYXV4IGRlcyBUcm9pcy1SaXZpw6hyZXM7IG1haXMgamUgdm91cwpsZSBkaXJhaSBiaWVuIHF1ZSBqJ2VuIGFpIGphbWFpcyBkw6lsaXZyw6kuIEonYXZhaXMgYmllbiBkb3V6ZSBvdQp0cmVpemUgYW5zIGV0IGonw6l0YWlzIF9jb29rXyDDoCBib3JkIGQndW4gY2hhbGFuZCBhdmVjIG1vbiBkw6lmdW50CnDDqHJlIHF1aSDDqXRhaXQgY2FwaXRhaW5lLiBDJ8OpdGFpdCBsZSBqb3VyIGRlIGxhIFRvdXNzYWludCBldCBub3VzCm1vbnRpb25zIGRlIFF1w6liZWMgYXZlYyB1bmUgY2FyZ2Fpc29uIGRlIGNoYXJib24sIHBhciB1bmUgZ3JhbmRlCmJyaXNlIGRlIG5vcmQtZXN0LiBOb3VzIGF2aW9ucyBkw6lwYXNzw6kgbGUgbGFjIFNhaW50LVBpZXJyZSBldCBzdXIgbGVzCmh1aXQgaGV1cmVzIGR1IHNvaXIgbm91cyBub3VzIHRyb3V2aW9ucyDDoCBsYSB0w6p0ZSBkdSBsYWMuIElsIGZhaXNhaXQKbm9pciBjb21tZSBsZSBsb3VwIGV0IGlsIGJydW1hc3NhaXQgbcOqbWUgdW4gcGV1LCBjZSBxdWkgbm91cwplbXDDqmNoYWl0IGRlIGJpZW4gZGlzdGluZ3VlciBsZSBwaGFyZSBkZSBsJ8OubGUgZGUgR3LDomNlLiBKJ8OpdGFpcyBkZQp2aWdpZSDDoCBsJ2F2YW50IGV0IG1vbiBkw6lmdW50IHDDqHJlIMOpdGFpdCDDoCBsYSBiYXJyZS4gVm91cyBzYXZleiBxdWUKbCdlbnRyw6llIGR1IGNoZW5hbCBuJ2VzdCBwYXMgbGFyZ2UgZXQgcXUnaWwgZmF1dCBvdXZyaXIgbCdvZWlsIHBvdXIgbmUKcGFzIHMnw6ljaG91ZXIuIElsIGZhaXNhaXQgdW5lIGJvbm5lIGJyaXNlIGV0IG5vdXMgYXZpb25zIHByaXMgbm90cmUKcGVycm9xdWV0IGV0IG5vdHJlIGh1bmllciwgY2UgcXVpIG5lIG5vdXMgZW1ww6pjaGFpdCBwYXMgZGUgbW9udGVyCmdyYW5kIHRyYWluIHN1ciBub3RyZSBncmFuZGUgdm9pbGUuIFRvdXQgw6AgY291cCBsZSB0ZW1wcyBwYXJ1dApzJ8OpY2xhaXJjaXIgZXQgbm91cyBhcGVyw6fDu21lcyBzdXIgbGEgcml2ZSBkZSBsJ8OubGUgZGUgR3LDomNlLCBxdWUgbm91cwpyYXNpb25zIGVuIG1vbnRhbnQsIHVuIGdyYW5kIGZldSBkZSBzYXBpbmFnZXMgYXV0b3VyIGR1cXVlbCBkYW5zYWllbnQKdW5lIHZpbmd0YWluZSBkZSBwb3Nzw6lkw6lzIHF1aSBhdmFpZW50IGRlcyB0w6p0ZXMgZXQgZGVzIHF1ZXVlcyBkZSBsb3VwCmV0IGRvbnQgbGVzIHlldXggYnJpbGxhaWVudCBjb21tZSBkZXMgdGlzb25zLiBEZXMgcmljYW5lbWVudHMKdGVycmlibGVzIGFycml2YWllbnQganVzcXUnw6Agbm91cyBldCBvbiBwb3V2YWl0IGFwZXJjZXZvaXIgdmFndWVtZW50CmxlIGNvcnBzIGQndW4gaG9tbWUgY291Y2jDqSBwYXIgdGVycmUgZXQgcXVlIHF1ZWxxdWVzIG1hdWRpdHMgw6l0YWllbnQKZW4gdHJhaW4gZGUgZMOpY291cGVyIHBvdXIgZW4gZmFpcmUgdW4gZnJpY290LiBDJ8OpdGFpdCB1bmUgcm9uZGUgZGUKbG91cHMtZ2Fyb3VzIHF1ZSBsZSBkaWFibGUgYXZhaXQgcsOpdW5pcyBwb3VyIGxldXIgZmFpcmUgYm9pcmUgZHUgc2FuZwpkZSBjaHLDqXRpZW4gZXQgbGV1ciBmYWlyZSBtYW5nZXIgZGUgbGEgdmlhbmRlIGZyYcOuY2hlLiBKZSBjb3VydXMgw6AKbCdhcnJpw6hyZSBwb3VyIGF0dGlyZXIgbCdhdHRlbnRpb24gZGUgbW9uIGTDqWZ1bnQgcMOocmUgZXQgZGUgQmFwdGlzdGUKTGFmbGV1ciwgbGUgbWF0ZWxvdCBxdWkgbmF2aWd1YWl0IGF2ZWMgbm91cywgbWFpcyBxdWkgbifDqXRhaXQgcGFzIGRlCnF1YXJ0IMOgIGNlIG1vbWVudC1sw6AuIElscyBhdmFpZW50IGTDqWrDoCBhcGVyw6d1IGxlIHBpcXVlLW5pcXVlIGRlcwpsb3Vwcy1nYXJvdXMuIEJhcHRpc3RlIGF2YWl0IHByaXMgbGEgYmFycmUgZXQgbW9uIGTDqWZ1bnQgcMOocmUgw6l0YWl0CmVuIHRyYWluIGRlIGNoYXJnZXIgc29uIGZ1c2lsIHBvdXIgdGlyZXIgc3VyIGxlcyBwb3Nzw6lkw6lzIHF1aQpjb250aW51YWllbnQgw6AgY3JpZXIgY29tbWUgZGVzIHBlcmR1cyBlbiBzYXV0YW50IGVuIHJvbmQgYXV0b3VyIGR1CmZldS4gSWwgZmFsbGFpdCBzZSBkw6lww6pjaGVyIGNhciBsZSBiYXRlYXUgZmlsYWl0IGJvbiB0cmFpbiBkZXZhbnQgbGUKbm9yZC1lc3QuCgotLVZpdGUhIFBpZXJyaWNoZSwgdml0ZSEgZG9ubmUtbW9pIGxhIGJyYW5jaGUgZGUgcmFtZWF1IGLDqW5pdCwgcXUnaWwKeSBhIMOgIGxhIHTDqnRlIGRlIG1vbiBsaXQsIGRhbnMgbGEgY2FiaW5lLiBUdSB0cm91dmVyYXMgYXVzc2kgdW4KdHLDqGZsZSDDoCBxdWF0cmUgZmV1aWxsZXMgZGFucyB1biBsaXZyZSBkZSBwcmnDqHJlcywgZXQgcHVpcyBwcmVuZHMKZGV1eCBiYWxsZXMgZXQgc2F1Y2UtbGVzIGRhbnMgbCdlYXUgYsOpbml0ZS4gVml0ZSwgZMOpcMOqY2hlLXRvaSEKCkplIHRyb3V2YWkgYmllbiBsZSByYW1lYXUgYsOpbml0LCBtYWlzIGplIG5lIHB1cyBtZXR0cmUgbGEgbWFpbiBzdXIgbGUKdHLDqGZsZSDDoCBxdWF0cmUgZmV1aWxsZXMgZXQgZGFucyBtYSBwcsOpY2lwaXRhdGlvbiBqZSByZW52ZXJzYWkgbGUKcGV0aXQgYsOpbml0aWVyIHNhbnMgcG91dm9pciBzYXVjZXIgbGVzIGJhbGxlcyBkZWRhbnMuCgpNb24gcMOocmUgcHVsdsOpcmlzYSBsZSByYW1lYXUgc2VjIGVudHJlIHNlcyBkb2lndHMgZXQgcydlbiBzZXJ2aXQgcG91cgpib3VycmVyIHNvbiBmdXNpbCwgbWFpcyBqZSBuJ29zYWkgbHVpIGF2b3VlciBxdWUgbGUgdHLDqGZsZSDDoCBxdWF0cmUKZmV1aWxsZXMgbifDqXRhaXQgcGFzIGzDoCBldCBxdWUgbGVzIGJhbGxlcyBuJ2F2YWllbnQgcGFzIMOpdMOpIG1vdWlsbMOpZXMKZGFucyBsJ2VhdSBiw6luaXRlLiBJbCBtaXQgbGVzIGRldXggYmFsbGVzIGRhbnMgbGUgY2Fub24sIGZpdCB1biBncmFuZApzaWduZSBkZSBjcm9peCBldCB2aXNhIGRhbnMgbGUgdGFzIGRlIG3DqWNyw6lhbnRzLgoKTGUgY291cCBwYXJ0aXQsIG1haXMgYydlc3QgY29tbWUgcydpbCBhdmFpdCBjaGFyZ8OpIHNvbiBmdXNpbCBhdmVjIGRlcwpwb2lzIGV0IGxlcyBsb3Vwcy1nYXJvdXMgY29udGludcOocmVudCDDoCBkYW5zZXIgZXQgw6AgcmljYW5lciwgZW4gbm91cwptb250cmFudCBkdSBkb2lndC4KCkxlcyBtYXVkaXRzISBkaXQgbW9uIGTDqWZ1bnQgcMOocmUsIGplIHZhaXMgZXNzYXllciBlbmNvcmUgdW5lIGZvaXMuCgpFdCBpbCByZWNoYXJnZWEgc29uIGZ1c2lsIGV0IGVuIGd1aXNlIGRlIGJhbGxlIGlsIGZvdXJyYSBzb24gY2hhcGVsZXQKZGFucyBsZSBjYW5vbi4KCkV0IHBhZiEKCkNldHRlIGZvaXMgbGUgY291cCBhdmFpdCBwb3J0w6khIExlIGZldSBzJ8OpdGVpZ25pdCBzdXIgbGEgcml2ZSBldCBsZXMKbG91cHMtZ2Fyb3VzIHMnZW5mdWlyZW50IGRhbnMgbGVzIGJvaXMgZW4gcG91c3NhbnQgZGVzIGNyaXMgw6AgZmFpcmUKZnLDqW1pciB1biBjYWJhbGV1ciBkJ8OpbGVjdGlvbnMuCgpMZXMgZ3JhaW5lcyBkdSBjaGFwZWxldCBsZXMgYXZhaWVudCDDqXZpZGVtbWVudCByZW5kdXMgbWFsYWRlcyBldCBsZXMKYXZhaWVudCBkaXNwZXJzw6lzLCBtYWlzIGNvbW1lIGMnw6l0YWl0IHVuIGNoYXBlbGV0IG5ldWYgcXVpIG4nYXZhaXQKcGFzIGVuY29yZSDDqXTDqSBiw6luaXQsIG1vbiBkw6lmdW50IHDDqHJlIMOpdGFpdCBkJ29waW5pb24gcXUnaWwgbidhdmFpdApwYXMgcsOpdXNzaSDDoCBsZXMgZMOpbGl2cmVyIGV0IHF1J2lscyBpcmFpZW50IHNhbnMgZG91dGUgY29udGludWVyIGxldXIKc2FiYmF0IHN1ciB1biBhdXRyZSBwb2ludCBkZSBsJ8OubGUuCgpDZSBxdWkgYXZhaXQgZW1ww6pjaMOpIGxlIHByZW1pZXIgY291cCBkZSBwb3J0ZXIsIGMnZXN0IHF1ZSBsZSBmdXNpbApuJ2F2YWl0IHBhcyDDqXTDqSBib3VycsOpIGF2ZWMgbGUgdHLDqGZsZSDDoCBxdWF0cmUgZmV1aWxsZXMgZXQgcXVlIGxlcwpiYWxsZXMgbidhdmFpZW50IHBhcyDDqXTDqSBwbG9uZ8OpZXMgZGFucyBsJ2VhdSBiw6luaXRlLgoKLS1IZWluISBxdSdlc3QtY2UgcXVlIHZvdXMgZGl0ZXMgZGUgw6dhLCBNLiBsJ2F2b2NhdC4gSidlbiBhaS10LXkgdnUKZGVzIGxvdXBzLWdhcm91cz8gY29udGludWUgUGllcnJpY2hlIEJyaW5kYW1vdXIuCgotLU91aSEgTCdoaXN0b2lyZSBuJ2VzdCBwYXMgbWF1dmFpc2UsIG1haXMgamUgdHJvdXZlIHF1ZSB2b3VzIGxlcwphdmV6IHZ1cyB1biBwZXUgZGUgbG9pbiBldCBxdSdpbCB5IGEgYmllbiBsb25ndGVtcHMgZGUgw6dhLiBTaSBsYQpjaG9zZSBzJ8OpdGFpdCBwYXNzw6llIGwnYXV0b21uZSBkZXJuaWVyLCBqZSBjcm9pcmFpcyBxdWUgY2Ugc29udCBsZXMKbWVtYnJlcyBkdSBDbHViIGRlIHDDqmNoZSBkZSBQaGFuZXVmIGV0IGRlIEpvZSBSaWVuZGVhdSBkZSBNb250csOpYWwKcXVlIHZvdXMgYXZleiBhcGVyw6d1cyBzdXIgbCfDrmxlIGRlIEdyw6JjZSBlbiB0cmFpbiBkZSBjb3VyaXIgbGEKZ2FsaXBldHRlLiBWb3VzIGF2ZXogZGl0IHZvdXMtbcOqbWUgcXVlIHRvdXMgbGVzIHJvdWdlcyDDqXRhaWVudCBkZXMKY291cmV1eCBkZSBsb3VwLWdhcm91IGV0IHZvdXMgc2F2ZXogYmllbiwgTS4gQnJpbmRhbW91ciwgcXUnaWwgbid5IGEKcGFzIGRlIGJsZXVzIGRhbnMgY2UgY2x1Yi1sw6AhCgotLUFoISB2b3VzIHZvdXMgbW9xdWV6IGRlIG1vbiBoaXN0b2lyZSBzYW5zIGRvdXRlIHF1ZSBjJ8OpdGFpdCBlbgp0ZW1wcyBkJ8OpbGVjdGlvbiBldCBxdWUgaidhdmFpcyBwcmlzIHVuIGNvdXAgZGUgdHJvcCBkdSB3aGlza3kgZHUKY2FuZGlkYXQgZGUgY2UgdGVtcHMtbMOgLiBFaCBiaWVuISBhcnLDqnRleiB1biBwZXUsIGplIG4nYWkgcGFzIGZpbmkgZXQKaidlbiBhaSB1bmUgYXV0cmUgcXVlIG1vbiBkw6lmdW50IHDDqHJlIG0nYSByYWNvbnTDqWUsIGNlIHNvaXItbMOgLCBlbgptb250YW50IMOgIE1vbnRyw6lhbCDDoCBib3JkIGRlIHNvbiBiYXRlYXUuIEMnZXN0IHVuZSBoaXN0b2lyZSBxdWkgbHVpCmVzdCBhcnJpdsOpZSDDoCBsdWktbcOqbWUgZXQgamUgdm91cyBhdmVydGlzIGQnYXZhbmNlIHF1ZSBqZSBtZSBmw6JjaGVyYWkKdW4gcGV1IHPDqXJpZXVzZW1lbnQgc2kgdm91cyBmYWl0ZXMgc2V1bGVtZW50IHNlbWJsYW50IGQnZW4gZG91dGVyLgoKTW9uIGTDqWZ1bnQgcMOocmUsIGRhbnMgc29uIGpldW5lIHRlbXBzLCBmYWlzYWl0IGxhIGNoYXNzZSBhdmVjIGxlcwpzYXV2YWdlcyBkZSBTYWludC1GcmFuw6dvaXMgZGFucyBsZSBoYXV0IGR1IFNhaW50LU1hdXJpY2UgZXQgZGFucyBsZQpwYXlzIGRlIGxhIE1hdGF3YW4uIEMnw6l0YWl0IHVuIGx1cm9uIHF1aSBuJ2F2YWl0IHBhcyBmcm9pZCBhdXggeWV1eApldCwgZW50cmUgbm91cywgaidwZXV4IGJpZW4gdm91cyBkaXJlIHF1J2lsIG4naGHDr3NzYWl0IHBhcyBsZXMKc2F1dmFnZXNzZXMuIExlIGN1csOpIGRlIGxhIG1pc3Npb24gZGVzIEFiw6luYWtpcyBsJ2F2YWl0IGF2ZXJ0aQpkZXV4IG91IHRyb2lzIGZvaXMgZGUgYmllbiBwcmVuZHJlIGdhcmRlIMOgIGx1aSwgY2FyIGxlcyBzYXV2YWdlcwpwb3VycmFpZW50IGx1aSBmYWlyZSB1biBtYXV2YWlzIHBhcnRpLCBzJ2lscyBsJ2F0dHJhcGFpZW50IMOgIHLDtGRlcgphdXRvdXIgZGUgbGV1cnMgY2FiYW5lcy4gTWFpcyBsZXMgY291cmV1cnMgZGVzIGJvaXMgZGUgY2UgdGVtcHMtbMOgIG5lCmNyYWlnbmFpZW50IHBhcyBncmFuZC1jaG9zZSBldCwgbWEgZm9pLCB2b3VzIGF1dHJlcywgbGVzIGdvZGVsdXJlYXV4CmRlIE1vbnRyw6lhbCwgdm91cyBzYXZleiBiaWVuIHF1J2lsIGZhdXQgcXVlIGpldW5lc3NlIHNlIHBhc3NlLiBNb24KZMOpZnVudCBww6hyZSDDqXRhaXQgZG9uYyBwYXJ0aSBwb3VyIGFsbGVyIGZhaXJlIGxhIGNoYXNzZSBhdSBjYXN0b3IsCmF1IHJhdCBtdXNxdcOpIGV0IGF1IGNhcmNham91IGRhbnMgbGUgaGF1dCBkdSBTYWludC1NYXVyaWNlLiBVbmUgZm9pcwpyZW5kdSBsw6AsIGlsIGF2YWl0IGNhbXDDqSBhdmVjIGxlcyBBYsOpbmFraXMsIGV0IHNhIGNhYmFuZSBkZSBzYXBpbmFnZXMKw6l0YWl0IMOgIHBlaW5lIGNvdXZlcnRlIGRlIG5laWdlIHF1J2lsIGF2YWl0IGTDqWrDoCBqZXTDqSBsJ29laWwgc3VyIHVuZQpiZWxsZSBzYXV2YWdlc3NlIHF1aSBhdmFpdCBzdWl2aSBzb24gcMOocmUgw6AgbGEgY2hhc3NlLiBDJ8OpdGFpdCB1bmUKYmVsbGUgZmlsbGUsIHVuZSBiZWxsZSEgbWFpcyBlbGxlIHBhc3NhaXQgcG91ciDDqnRyZSBzb3JjacOocmUgZGFucyBsYQp0cmlidSBldCBlbGxlIHNlIGZhaXNhaXQgY3JhaW5kcmUgZGUgdG91cyBsZXMgY2hhc3NldXJzIHF1aSBuJ29zYWllbnQKbCdhcHByb2NoZXIuIE1vbiBkw6lmdW50IHDDqHJlIHF1aSDDqXRhaXQgdW4gYnJhdmUgc2UgcGlxdWEgYXUgamV1IGV0LApjb21tZSBpbCBwYXJsYWl0IGNvdXJhbW1lbnQgc2F1dmFnZSwgaWwgY29tbWVuw6dhIMOgIGNvbnRlciBmbGV1cmV0dGUgw6AKbGEgc2F1dmFnZXNzZS4gTGUgcMOocmUgZGUgbGEgYmVsbGUgZmFpc2FpdCBkZXMgYWJzZW5jZXMgZGUgZGV1eCBvdQp0cm9pcyBqb3VycyBwb3VyIGFsbGVyIHRlbmRyZSBzZXMgcGnDqGdlcyBldCBzZXMgYXR0cmFwZXMsIGV0IHBlbmRhbnQKY2UgdGVtcHMtbMOgLCBsZXMgY2hvc2VzIGFsbGFpZW50IHJvbmRlbWVudC4gSWwgZmF1dCB2b3VzIGRpcmUgcXVlCmxhIHNhdXZhZ2Vzc2Ugw6l0YWl0IHVuZSB2J2xpbWV1c2UgZGUgcGF5ZW5uZSBxdWkgbidhbGxhaXQgamFtYWlzIMOgCmwnw6lnbGlzZSBkZSBTYWludC1GcmFuw6dvaXMgZXQgb24gcHLDqXRlbmRhaXQgbcOqbWUgcXUnZWxsZSBuJ2F2YWl0CmphbWFpcyDDqXTDqSBiYXB0aXPDqWUuIFBhcyBiZXNvaW4gZGUgdm91cyBkaXJlIHRvdXQgYXUgbG9uZyBjb21tZW50CmxlcyBjaG9zZXMgc2UgcGFzc8OocmVudCwgbWFpcyBtb24gZMOpZnVudCBww6hyZSBmaW5pdCBwYXIgb2J0ZW5pciB1bgpyZW5kZXotdm91cywgw6AgcXVlbHF1ZXMgYXJwZW50cyBkdSBjYW1wLCBzdXIgbGUgY291cCBkZSBtaW51aXQgZCd1bgpkaW1hbmNoZSBhdSBzb2lyLgoKSWwgdHJvdXZhIGJpZW4gbCdoZXVyZSB1biBwZXUgc2luZ3VsacOocmUgZXQgbGUgam91ciB1biBwZXUgc3VzcGVjdCwKbWFpcyBxdWFuZCBvbiBlc3QgYW1vdXJldXggb24gcGFzc2UgcGFyLWRlc3N1cyBiaWVuIGRlcyBjaG9zZXMuCklsIHNlIHJlbmRpdCBkb25jIMOgIGwnZW5kcm9pdCBkw6lzaWduw6kgYXZhbnQgbCdoZXVyZSBldCBpbCBmdW1haXQKdHJhbnF1aWxsZW1lbnQgc2EgcGlwZSBwb3VyIHByZW5kcmUgcGF0aWVuY2UsIGxvcnNxdSdpbCBlbnRlbmRpdCBkdQpicnVpdCBkYW5zIGxhIGZhcmRvY2hlLiBJbCBzJ2ltYWdpbmEgcXVlIGMnw6l0YWl0IHNhIHNhdXZhZ2Vzc2UgcXVpCnMnYXBwcm9jaGFpdCwgbWFpcyBpbCBjaGFuZ2VhIGJpZW50w7R0IGQnaWTDqWUgZW4gYXBlcmNldmFudCBkZXV4IHlldXgKcXVpIGJyaWxsYWllbnQgY29tbWUgZGVzIF9maWZvbGxldHNfIGV0IHF1aSBsZSBmaXhhaWVudCBkJ3VuZQptYW5pw6hyZSDDqXRyYW5nZS4gSWwgY3J1dCBkJ2Fib3JkIHF1ZSBjJ8OpdGFpdCB1biBjaGF0IHNhdXZhZ2Ugb3UKdW4gY2FyY2Fqb3UsIGV0IGlsIGV1dCBqdXN0ZSBsZSB0ZW1wcyBkJ8OpcGF1bGVyIHNvbiBmdXNpbCBxdSdpbApuZSBxdWl0dGFpdCBqYW1haXMgZXQgZCdlbnZveWVyIHVuZSBiYWxsZSBlbnRyZSBsZXMgZGV1eCB5ZXV4CmRlIGwnYW5pbWFsIHF1aSBzJ2F2YW7Dp2FpdCBlbiByYW1wYW50IGRhbnMgbGEgbmVpZ2UgZXQgc291cyBsZXMKYnJvdXNzYWlsbGVzLiBNYWlzIGlsIGF2YWl0IG1hbnF1w6kgc29uIGNvdXAgZXQsIGF2YW50IHF1J2lsIGV1dCBsZQp0ZW1wcyBkZSBzZSBnYXJlciwgbGEgYsOqdGUgw6l0YWl0IHN1ciBsdWksIGRyZXNzw6llIHN1ciBzZXMgcGF0dGVzIGRlCmRlcnJpw6hyZSBldCB0w6JjaGFudCBkZSAnbGVudG91cmVyIGF2ZWMgc2VzIHBhdHRlcyBkZSBkZXZhbnQuIEMnw6l0YWl0CnVuIGxvdXAsIG1haXMgdW4gbG91cCBpbW1lbnNlLCBjb21tZSBtb24gZMOpZnVudCBww6hyZSBuJ2VuIGF2YWl0CmphbWFpcyB2dS4gSWwgc29ydGl0IHNvbiBjb3V0ZWF1IGRlIGNoYXNzZSBldCBsJ2lkw6llIGx1aSB2aW50IHF1J2lsCmF2YWl0IGFmZmFpcmUgw6AgdW4gbG91cC1nYXJvdS4gSWwgc2F2YWl0IHF1ZSBsYSBzZXVsZSBtYW5pw6hyZSBkZSBzZQpkw6liYXJyYXNzZXIgZGUgY2VzIG1hdWRpdGVzIGLDqnRlcy1sw6AsIGMnw6l0YWl0IGRlIGxldXIgdGlyZXIgZHUgc2FuZwplbiBsZXVyIGZhaXNhbnQgdW5lIGJsZXNzdXJlLCBkYW5zIGxlIGZyb250LCBlbiBmb3JtZSBkZSBjcm9peC4gQydlc3QKY2UgcXUnaWwgdGVudGEgZGUgZmFpcmUsIG1haXMgbGUgbG91cC1nYXJvdSBzZSBkw6lmZW5kYWl0IGNvbW1lIHVuCmRhbW7DqSBxdSdpbCDDqXRhaXQsIGV0IG1vbiBkw6lmdW50IHDDqHJlIGVzc2F5YSB2YWluZW1lbnQgZGUgbHVpIHBsb25nZXIKc29uIGNvdXRlYXUgZGFucyBsZSBjb3JwcywgcHVpc3F1J2lsIG5lIHBvdXZhaXQgcGFzIHBhcnZlbmlyIMOgIGxlCmTDqWxpdnJlci4gTWFpcyBsYSBwb2ludGUgZHUgY291dGVhdSBwbGlhaXQgY2hhcXVlIGZvaXMgY29tbWUgcydpbCBldXQKZnJhcHDDqSBkYW5zIHVuIGPDtHTDqSBkZSBjdWlyIMOgIHNlbWVsbGUuIExhIGx1dHRlIHNlIHByb2xvbmdlYWl0IGV0CmRldmVuYWl0IHRlcnJpYmxlIGV0IGRhbmdlcmV1c2UuIExlIGxvdXAtZ2Fyb3UgZMOpY2hpcmFpdCBsZXMgZmxhbmNzCmRlIG1vbiBkw6lmdW50IHDDqHJlIGF2ZWMgc2VzIGxvbmd1ZXMgZ3JpZmZlcyBsb3JzcXVlIGNlbHVpLWNpLCBkJ3VuCmNvdXAgZGUgc29uIGNvdXRlYXUgcXVpIGNvdXBhaXQgY29tbWUgdW4gcmFzb2lyLCByw6l1c3NpdCDDoCBsdWkKZW5sZXZlciB1bmUgcGF0dGUgZGUgZGV2YW50LiBMYSBiw6p0ZSBwb3Vzc2EgdW4gaHVybGVtZW50IHF1aQpyZXNzZW1ibGFpdCBhdSBjcmkgZCd1bmUgZmVtbWUgcXUnb24gw6lnb3JnZSBldCBkaXNwYXJ1dCBkYW5zIGxhCmZvcsOqdC4gTW9uIGTDqWZ1bnQgcMOocmUgbidvc2EgcGFzIGxhIHBvdXJzdWl2cmUsIG1haXMgaWwgbWl0IGxhCnBhdHRlIGRhbnMgc29uIHNhYyBldCByZW50cmEgYXUgY2FtcCBwb3VyIHBhbnNlciBzZXMgYmxlc3N1cmVzIHF1aSwKYmllbiBxdWUgZG91bG91cmV1c2VzLCBuZSBwcsOpc2VudGFpZW50IGNlcGVuZGFudCBhdWN1biBkYW5nZXIuIExlCmxlbmRlbWFpbiwgbG9yc3F1J2lsIHMnaW5mb3JtYSBkZSBsYSBzYXV2YWdlc3NlLCBpbCBhcHByaXQgcXUnZWxsZQrDqXRhaXQgcGFydGllLCBwZW5kYW50IGxhIG51aXQsIGF2ZWMgc29uIHDDqHJlLCBldCBwZXJzb25uZSBuZQpjb25uYWlzc2FpdCBsYSByb3V0ZSBxdSdpbHMgYXZhaWVudCBwcmlzZS4gTWFpcyBqdWdleiBkZSBsJ8OpdG9ubmVtZW50CmRlIG1vbiBkw6lmdW50IHDDqHJlIGxvcnNxdSdlbiBmb3VpbGxhbnQgZGFucyBzb24gc2FjIHBvdXIgeSBjaGVyY2hlcgp1bmUgcGF0dGUgZGUgbG91cCwgaWwgeSB0cm91dmEgdW5lIG1haW4gZGUgc2F1dmFnZXNzZSwgY291cMOpZSBqdXN0ZQphdS1kZXNzdXMgZHUgcG9pZ25ldC4gQyfDqXRhaXQgdG91dCBib25uZW1lbnQgbGEgbWFpbiBkZSBsYSBjb3F1aW5lCnF1aSBzJ8OpdGFpdCB0cmFuc2Zvcm3DqWUgZW4gbG91cC1nYXJvdSBwb3VyIGJvaXJlIHNvbiBzYW5nIGV0CmwnZW52b3llciBjaGV6IGxlIGRpYWJsZSBzYW5zIGx1aSBkb25uZXIgc2V1bGVtZW50IGxlIHRlbXBzIGRlIGZhaXJlCnVuIGFjdGUgZGUgY29udHJpdGlvbi4gTW9uIHDDqHJlIG5lIHBhcmxhIHBhcyBkZSBsYSBjaG9zZSBhdXggc2F1dmFnZXMKZHUgY2FtcCwgbWFpcyBzb24gcHJlbWllciBzb2luLCBlbiBkZXNjZW5kYW50IMOgIFNhaW50LUZyYW7Dp29pcywgbGUKcHJpbnRlbXBzIHN1aXZhbnQsIGZ1dCBkZSBzJ2luZm9ybWVyIGRlIGxhIHNhdXZhZ2Vzc2UgcXVpIMOpdGFpdApyZXZlbnVlIGF1IHZpbGxhZ2UsIHByw6l0ZW5kYW50IGF2b2lyIHBlcmR1IGxhIG1haW4gZHJvaXRlIGRhbnMgdW4KcGnDqGdlIMOgIGNhcmNham91LiBMYSBzY8OpbMOpcmF0ZSDDqXRhaXQgZGlzcGFydWUgZXQgY291cmFpdCBwcm9iYWJsZW1lbnQKbGUgZmFyZmFkZXQgcGFybWkgbGVzIHJlbsOpZ2F0cyBkZSBzYSB0cmlidS4KClZvaWzDoCBtb24gaGlzdG9pcmUsIG1vbnNpZXVyIGwnaW5jcsOpZHVsZSwgdGVybWluYSBsZSBww6hyZSBQaWVycmljaGUsCmV0IGplIHZvdXMgYXNzdXJlIHF1J2VsbGUgZXN0IGRpYWJsZW1lbnQgcGx1cyB2cmFpZSBxdWUgdG91dCBjZSBxdWUKdm91cyB2ZW5leiBub3VzIHJhY29udGVyIMOgIHByb3BvcyBkZSBMZWN0b3IgTGFuZ2V2aW4sIGRlIG1vbnNpZXVyCk1vcmdhbiBldCBkdSBwJ3RpdCBCYXB0aXN0ZSBHdcOodnJlbW9udC4gVMOiY2hleiBzZXVsZW1lbnQgZGUgdm91cwpkw6lsaXZyZXIgZGUgQnJ1bmVhdSBjb21tZSBtb24gZMOpZnVudCBww6hyZSBzJ8OpdGFpdCBkw6lsaXZyw6kgZGUgbGEKc2F1dmFnZXNzZSwgbWFpcywgcydpbCBmYXV0IGVuIGNyb2lyZSBCYXB0aXN0ZSBSb3VpbGxhcmQgcXVpIGNhYmFsZQpkZSBsJ2F1dHJlIGPDtHTDqSwgaidhaSBiaWVuIHBldXIgcXVlIGxlcyByb3VnZXMgbm91cyBmYXNzZW50IHRvdXMKY291cmlyIGxlIGxvdXAtZ2Fyb3UsIGxlIHNvaXIgZGUgbCfDqWxlY3Rpb24uIEVuIGF0dGVuZGFudCBwcmVub25zIHVuCmF1dCdjb3VwIMOgIGxhIHNhbnTDqSBkZSBub3RyZSBjYW5kaWRhdCBldCBhbGxvbnMgbm91cyBjb3VjaGVyLCBjaGFjdW4KY2hleiBub3VzLgoKCgpMQSBCw4pURSDDgCBHUkFORCdRVUVVRQoKSQoKQydlc3QgYWJzb2x1bWVudCBjb21tZSBqZSB0ZSBsZSBkaXMsIGluc2lzdGEgbGUgcCd0aXQgUGllcnJpY2hlCkRlc3Jvc2llcnMsIGonYWkgdnUgbW9pLW3Dqm1lIGxhIHF1ZXVlIGRlIGxhIGLDqnRlLiBVbmUgcXVldWUgcG9pbHVlCmQndW4gcm91Z2Ugw6ljYXJsYXRlIGV0IGNvdXDDqWUgZW4gc2lmZmxldCBwYXMgbG9pbiBkdS4uLiB0cm9nbm9uLgpVbmUgcXVldWUgZGUgc2l4IHBpZWRzLCBtb24gdmlldXghCgotLU91aSBjJ2VzdCBiZW4gYm9uIGRlIHZvaXIgbGEgcXVldWUgZGUgbGEgYsOqdGUsIG1haXMgYyd2bGltZXV4IGRlCkZhbmZhbiBMYXpldHRlIGVzdCBzaSBibGFndWV1ciBxdSdpbCBtZSBmYXVkcmFpdCBkJ2F1dHJlcyBwcmV1dmVzIHF1ZQrDp2EgcG91ciBsZSBjcm9pcmUgc3VyIHBhcm9sZS4KCi0tRCdhYm9yZCwgY29udGludWEgUGllcnJpY2hlLCB0dSBhdm91ZXJhcyBiZW4gcXUnaWwgYSB0b3V0IGNlIHF1J2lsCmZhdXQgcG91ciBzZSBmYWlyZSBwb3Vyc3VpdnJlIHBhciBsYSBiw6p0ZSDDoCBncmFuZCdxdWV1ZS4gSWwgZXN0CmJsYWd1ZXVyLCB0dSB2aWVucyBkZSBsZSBkaXJlLCBpbCBhaW1lIMOgIHByZW5kcmUgbGEgZ291dHRlLCB0b3V0IGxlCm1vbmRlIGxlIHNhaXQsIGV0IMOnYSBjb3VydCBzdXIgbGEgaHVpdGnDqG1lIGFubsOpZSBxdSdpbCBmYWl0IGRlcwpww6JxdWVzIGRlIHJlbmFyZC4gUydpbCBmYXV0IMOqdHJlIHNlcHQgYW5zIHNhbnMgZmFpcmUgc2VzIHDDonF1ZXMKb3JkaW5haXJlcyBwb3VyIGNvdXJpciBsZSBsb3VwLWdhcm91LCBpbCBzdWZmaXQgZGUgZmFpcmUgZGVzIHDDonF1ZXMKZGUgcmVuYXJkIHBlbmRhbnQgbGEgbcOqbWUgcMOpcmlvZGUgcG91ciBzZSBmYWlyZSBhdHRhcXVlciBwYXIgbGEgYsOqdGUKw6AgZ3JhbmQncXVldWUuIEV0IGlsIGwnYSByZW5jb250csOpZSBlbiBmYWNlIGR1IG1hbm9pciBkZSBEYXV0cmF5ZSwKZGFucyBsZXMgZ3JhbmRzIGFyYnJlcyBxdWkgYm9yZGVudCBsYSByb3V0ZSBvw7kgbGUgc29sZWlsIG5lIHDDqW7DqHRyZQpqYW1haXMsIG3Dqm1lIGVuIHBsZWluIG1pZGkuIEp1c3RlIMOgIGxhIG3Dqm1lIHBsYWNlIG/DuSBMb3Vpc29uIExhcm9jaGUKcyfDqXRhaXQgZmFpdCBhcnJhY2hlciB1biBvZWlsIHBhciBsZSBtYXVkaXQgYW5pbWFsLCBpbCBhIGVudmlyb24gdW5lCmRpemFpbmUgZCdhbm7DqWVzLgoKQWluc2kgY2F1c2FpZW50IFBpZXJyaWNoZSBEZXNyb3NpZXJzIGV0IE1heGltZSBTYW5zc291Y2ksIGVuIHByZW5hbnQKY2xhbmRlc3RpbmVtZW50IHVuIHAndGl0IGNvdXAgZGFucyBsYSBtYWlzb25uZXR0ZSBkdSB2aWVpbCBBbmRyw6kKTGFsaWJlcnTDqSBxdWkgdmVuZGFpdCB1biB2ZXJyZSBwYXIgY2kgZXQgcGFyIGzDoCDDoCBzZXMgY29ubmFpc3NhbmNlcywKc2FucyB0cm9wIHMnb2NjdXBlciBkZXMgbG9pcyBkZSBwYXRlbnRlcyBvdSBkZXMgcmVtb250cmFuY2VzIGR1IGN1csOpLgoKLS1FdCB0b2ksIEFuZHLDqSwgcXVlIHBlbnNlcy10dSBkZSB0b3V0IMOnYT8gZGVtYW5kYSBQaWVycmljaGUuIFR1IGFzCmTDuyBlbiB2b2lyIGRlcyBiw6p0ZXMgw6AgZ3JhbmQncXVldWUgZGFucyB0b24gamV1bmUgdGVtcHMuIENyb2lzLXR1IHF1ZQpGYW5mYW4gTGF6ZXR0ZSBlbiBhaXQgcmVuY29udHLDqSB1bmUsIMOgIERhdXRyYXllPwoKLS1DJ2VzdCBjZSBxdSdpbCBwcsOpdGVuZCwgbWVzIGVuZmFudHMsIGV0LCBjb21tZSBsZSB2b2ljaSBxdWkgdmllbnQKcHJlbmRyZSBzYSBuaXBwZSBvcmRpbmFpcmUsIHZvdXMgbidhdmV6IHF1J8OgIGxlIGZhaXJlIGphc2VyIGx1aS1tw6ptZQpzaSB2b3VzIHZvdWxleiBlbiBzYXZvaXIgcGx1cyBsb25nLgoKSUkKCkZhbmZhbiBMYXpldHRlIMOpdGFpdCB1biBtYXV2YWlzIHN1amV0IHF1aSBmYWlzYWl0IGxlIGTDqXNlc3BvaXIgZGUgc2VzCnBhcmVudHMsIHF1aSBzZSBtb3F1YWl0IGRlcyBzZXJtb25zIGR1IGN1csOpLCBxdWkgc2VtYWl0IGxlIGTDqXNvcmRyZQpkYW5zIGxhIHBhcm9pc3NlIGV0IHF1aS0tY29uc8OpcXVlbmNlIGZhdGFsZS0tw6l0YWl0IGxhIGNvcXVlbHVjaGUgZGUKdG91dGVzIGxlcyBqb2xpZXMgZmlsbGVzIGRlcyBhbGVudG91cnMuCgpMZSBww6hyZSBMYXpldHRlIGwnYXZhaXQgbWlzIGF1IGNvbGzDqGdlIGRlIEwnQXNzb21wdGlvbiwgZCdvw7kgaWwKcyfDqXRhaXQgw6ljaGFwcMOpIHBvdXIgYWxsZXIgw6AgTW9udHLDqWFsIGwnYWlyZSB1biBtw6l0aWVyIHF1ZWxjb25xdWUuIEV0CnB1aXMgaWwgYXZhaXQgcGFzc8OpIGRldXggc2Fpc29ucyBkYW5zIGxlcyBjaGFudGllcnMgZXQgw6l0YWl0IHJldmVudQpjaGV6IHNvbiBww6hyZSBxdWkgc2UgZmFpc2FpdCB2aWV1eCwgcG91ciBkaXJpZ2VyIGxlcyB0cmF2YXV4IGRlIGxhCmZlcm1lLgoKRmFuZmFuIMOpdGFpdCB1biBydWRlIGdhcnMgYXUgdHJhdmFpbCwgaWwgZmFsbGFpdCBsdWkgZG9ubmVyIGNlbGEsIGV0CmlsIGJlc29nbmFpdCBjb21tZSBxdWF0cmUgbG9yc3F1J2lsIHMneSBtZXR0YWl0OyBtYWlzIGlsIMOpdGFpdApqb3VybmFsaWVyLCBjb21tZSBvbiBkaXQgYXUgcGF5cywgZXQgaWwgZmFpc2FpdCBhc3NleiBzb3V2ZW50IGRlcwpuZXV2YWluZXMgcXVpIG4nw6l0YWllbnQgcGFzIHRvdWpvdXJzIHNvdXMgbCdpbnZvY2F0aW9uIGRlIHNhaW50CkZyYW7Dp29pcy1YYXZpZXIuCgpDb21tZSBpbCBmYWlzYWl0IHRvdXQgw6Agc2EgdMOqdGUsIGlsIGF2YWl0IHByaXMgcG91ciBoYWJpdHVkZSBkZSBuZQpmYWlyZSBzZXMgcMOicXVlcyBxdSdhcHLDqHMgbGEgcMOpcmlvZGUgZGUgcmlndWV1ciwgZXQgaWwgbWV0dGFpdCB1bmUKZXNww6hjZSBkZSBmYW5mYXJvbm5hZGUgw6AgbmUgcydhcHByb2NoZXIgZGVzIHNhY3JlbWVudHMgcXUnYXByw6hzIHF1ZQp0b3VzIGxlcyBmaWTDqGxlcyBzJ8OpdGFpZW50IG1pcyBlbiByw6hnbGUgYXZlYyBsZXMgY29tbWFuZGVtZW50cyBkZQpsJ8OJZ2xpc2UuCgpCcmVmLCBGYW5mYW4gw6l0YWl0IHVuIGx1cm9uIHF1ZSBsZXMgY29tbcOocmVzIGR1IHZpbGxhZ2UgdHJhaXRhaWVudCBkZQpfcGVuZGFyZF8sIHF1ZSBsZXMgbWFtYW5zIHF1aSBhdmFpZW50IGRlcyBmaWxsZXMgw6AgbWFyaWVyCmNyYWlnbmFpZW50IGNvbW1lIGxhIHBlc3RlIGV0IHF1aSBwYXNzYWl0LCBzZWxvbiBsZXMgbGlldXggb8O5IG9uCnMnb2NjdXBhaXQgZGUgc2EgcGVyc29ubmUsIHBvdXIgdW4gYm9uIGRpYWJsZSBvdSBwb3VyIHVuIG1hdXZhaXMKZ2FybmVtZW50LgoKUGllcnJpY2hlIERlc3Jvc2llcnMgZXQgTWF4aW1lIFNhbnNzb3VjaSBzZSBsZXbDqHJlbnQgcG91ciBsdWkKc291aGFpdGVyIGxhIGJpZW52ZW51ZSBldCBwb3VyIGwnaW52aXRlciDDoCBwcmVuZHJlIHVuIGNvdXAsIHF1J2lsCnMnZW1wcmVzc2EgZGUgbmUgcGFzIHJlZnVzZXIuCgotLUV0IG1haW50ZW5hbnQsIEZhbmZhbiwgcmFjb250ZS1ub3VzIHRvbiBoaXN0b2lyZSBkZSBiw6p0ZSDDoApncmFuZCdxdWV1ZS4gTWF4aW1lIHZldXQgZmFpcmUgbCdpbmNyw6lkdWxlIGV0IHByw6l0ZW5kIHF1ZSB0dSB2ZXV4Cm5vdXMgZW4gZmFpcmUgYWNjcm9pcmUuCgotLU91aWTDoCwgb3VpISBFaCBiaWVuLCB0b3V0IGNlIHF1ZSBqZSBwZXV4IHZvdXMgZGlyZSwgYydlc3QgcXVlIHNpCmMnZcO7dCDDqXTDqSBNYXhpbWUgU2Fuc3NvdWNpIHF1aSBldXQgcmVuY29udHLDqSBsYSBiw6p0ZSBhdSBsaWV1IGRlIG1vaSwKamUgY3JvaXMgcXUnaWwgbmUgcmVzdGVyYWl0IHBsdXMgcGVyc29ubmUgcG91ciByYWNvbnRlciBsJ2hpc3RvaXJlLAphdSBqb3VyIGQnYXVqb3VyZCdodWkuCgpFdCwgcydhZHJlc3NhbnQgw6AgTWF4aW1lIFNhbnNzb3VjaToKCi0tRXQgdG9pLCBtb24gcCd0aXQgTWF4aW1lLCB0b3V0IGNlIHF1ZSBqZSB0ZSBzb3VoYWl0ZSwgYydlc3QgZGUgbmUKamFtYWlzIHRlIHRyb3V2ZXIgZW4gcGFyZWlsbGUgY29tcGFnbmllOyB0dSBuJ2FzIHBhcyBsZXMgYnJhcyBhc3Nlegpsb25ncywgbGVzIHJlaW5zIGFzc2V6IHNvbGlkZXMgZXQgbGUgY29ycHMgYXNzZXogcmFpZGUgcG91ciB0ZSB0aXJlcgpkJ2FmZmFpcmUgZGFucyB1bmUgcGFyZWlsbGUgcmVuY29udHJlLiDDiWNvdXRlLW1vaSBiaWVuIGV0IHR1IG0nZW4KZGlyYXMgZGVzIG5vdXZlbGxlcyBlbnN1aXRlLgoKRXQgcHVpczoKCi0tQW5kcsOpLCB0cm9pcyB2ZXJyZXMgZGUgTW9sc29uIHLDqWR1aXQuCgpJSUkKCi0tRCdhYm9yZCwgamUgbidhaSBwYXMgZCdvYmplY3Rpb24gw6AgcmVjb25uYcOudHJlIHF1J2lsIHkgYSBwbHVzIGRlCnNlcHQgYW5zIHF1ZSBqZSBmYWlzIGRlcyBww6JxdWVzIGRlIHJlbmFyZCBldCBtw6ptZSwgZW4geSByw6lmbMOpY2hpc3NhbnQKYmllbiwgaidhdm91ZXJhaSBxdWUgaidhaSBtw6ptZSBwYXNzw6kgZGV1eCBhbnMgc2FucyBmYWlyZSBkZSBww6JxdWVzIGR1CnRvdXQsIGxvcnNxdWUgaifDqXRhaXMgZGFucyBsZXMgY2hhbnRpZXJzLiBKJ2F2YWlzIGRvbmMgY2UgcXUnaWwKZmFsbGFpdCBwb3VyIHJlbmNvbnRyZXIgbGEgYsOqdGUsIHMnaWwgZmF1dCBlbiBjcm9pcmUgQmFwdGlzdGUKR2FsbGllbiwgcXVpIGEgw6l0dWRpw6kgY2VzIGNob3Nlcy1sw6AgZGFucyBsZXMgZ3JvcyBsaXZyZXMgcXUnaWwgYQp0cm91dsOpcyBjaGV6IGxlIG5vdGFpcmUgTGF0b3VyLgoKSmUgbWUgbW9xdWFpcyBiaWVuIGRlIGxhIGNob3NlIGF1cGFyYXZhbnQ7IG1haXMsIGxvcnNxdWUgamUgdm91cwphdXJhaSByYWNvbnTDqSBjZSBxdWkgdmllbnQgZGUgbSdhcnJpdmVyIMOgIERhdXRyYXllLCBkYW5zIGxhIG51aXQgZGUKc2FtZWRpIMOgIGRpbWFuY2hlLCB2b3VzIG0nZW4gZGlyZXogZGVzIG5vdXZlbGxlcy4gSifDqXRhaXMgcGFydGkKc2FtZWRpIG1hdGluIGF2ZWMgdmluZ3QtY2lucSBwb2NoZXMgZCdhdm9pbmUgcG91ciBhbGxlciBsZXMgcG9ydGVyCsOgIEJlcnRoaWVyIGNoZXogUsOpbWkgVHJhbmNoZW1vbnRhZ25lIGV0IHBvdXIgZW4gcmFwcG9ydGVyIHF1ZWxxdWVzCm1hcmNoYW5kaXNlczogdW4gcCd0aXQgYmFyaWwgZGUgbcOpbGFzc2UsIHVuIHAndGl0IHF1YXJ0IGRlIGNhc3NvbmFkZSwKdW5lIG1ldWxlIGRlIGZyb21hZ2UsIHVuZSBkYW1lLWplYW5uZSBkZSBqYW1hw69xdWUgZXQgcXVlbHF1ZXMgbGl2cmVzCmRlIHRow6kgcG91ciBub3MgcHJvdmlzaW9ucyBkJ2hpdmVyLiBMZSBncmFuZCBTZW0gw6AgR3Jvcy1Mb3VpcwpDaGFtcGFnbmUgbSdhY2NvbXBhZ25haXQgZXQgbm91cyBmYWlzaW9ucyBsZSB2b3lhZ2UgZW4gZ3JhbmQnY2hhcmV0dGUKYXZlYyBtYSBwb3VsaWNoZSBibG9uZGUtLWxhIG1laWxsZXVyZSBiw6p0ZSBkZSBsYSBwYXJvaXNzZSwgc2FucyBtZQp2YW50ZXIsIG5pIGxhIHBvdWxpY2hlIG5vbiBwbHVzLiBOb3VzIMOpdGlvbnMgw6AgQmVydGhpZXIgc3VyIGxlcwpvbnplIGhldXJlcyBkZSBsYSBtYXRpbsOpZSBldCwgYXByw6hzIGF2b2lyIHLDqWdsw6kgbm9zIGFmZmFpcmVzIGNoZXoKVHJhbmNoZW1vbnRhZ25lLCBkw6ljaGFyZ8OpIG5vdHJlIGF2b2luZSwgcmVjaGFyZ8OpIG5vcyBwcm92aXNpb25zLAppbCBuZSBub3VzIHJlc3RhaXQgcGx1cyBxdSfDoCBwcmVuZHJlIHVuIHAndGl0IGNvdXAgZW4gYXR0ZW5kYW50IGxhCmZyYcOuY2hlIGR1IHNvaXIgcG91ciByZXByZW5kcmUgbGEgcm91dGUgZGUgTGFub3JhaWUuIExlIGdyYW5kIFNlbQpDaGFtcGFnbmUgZnLDqXF1ZW50ZSB1bmUgcGV0aXRlIExhdmlvbGV0dGUgZGUgbGEgcGV0aXRlIHJpdmnDqHJlIGRlCkJlcnRoaWVyLCBldCBpbCBwYXJ0aXQgw6AgbCdhdmFuY2UgcG91ciBhbGxlciBmYXJhdWRlciBzYSBwcsOpdGVuZHVlCmp1c3F1J8OgIGwnaGV1cmUgZHUgZMOpcGFydC4KCkplIGRldmFpcyBsZSBwcmVuZHJlIGVuIHBhc3NhbnQsIHN1ciBsZXMgaHVpdCBoZXVyZXMgZHUgc29pciwgZXQsCnBvdXIgdHVlciBsZSB0ZW1wcywgaidhbGxhaSByZW5jb250cmVyIGRlcyBjb25uYWlzc2FuY2VzIGNoZXoKSmFsYmVydCwgY2hleiBHYWdub24gZXQgY2hleiBHdWlsbWV0dGUsIG/DuSBub3VzIHBhecOibWVzIGNoYWN1biB1bmUKdG91cm7DqWUsIHNhbnMgY2VwZW5kYW50IG5vdXMgZ3Jpc2VyIHPDqXJpZXVzZW1lbnQgbmkgbGVzIHVucyBuaSBsZXMKYXV0cmVzLiBMYSBqb3VybsOpZSBhdmFpdCDDqXTDqSBiZWxsZSwgbWFpcywgc3VyIGxlIHNvaXIsIGxlIHRlbXBzCmRldmludCBsb3VyZCBldCBqZSBtJ2FwZXLDp3VzIHF1ZSBub3VzIG5lIHRhcmRlcmlvbnMgcGFzIMOgIGF2b2lyIGRlCmwnb3JhZ2UuIEplIHNlcmFpcyBiaWVuIHBhcnRpIHZlcnMgbGVzIHNpeCBoZXVyZXMsIG1haXMgaidhdmFpcyBkb25uw6kKcmVuZGV6LXZvdXMgYXUgZ3JhbmQgU2VtIMOgIGh1aXQgaGV1cmVzIGV0IGplIG5lIHZvdWxhaXMgcGFzIGTDqXJhbmdlcgp1biBnYXLDp29uIHF1aSBfZ29zc2FpdF8gc8OpcmlldXNlbWVudCBldCBwb3VyIGxlIGJvbiBtb3RpZi4KSidhdHRlbmRpcyBkb25jIHBhdGllbW1lbnQgZXQgamUgZG9ubmFpIHVuZSBib25uZSBwb3J0aW9uIMOgIG1hCnBvdWxpY2hlLCBjYXIgaidhdmFpcyBsJ2ludGVudGlvbiBkZSByZXRvdXJuZXIgw6AgTGFub3JhaWUgc3VyIHVuIGJvbgp0cmFpbi4gw4AgaHVpdCBoZXVyZXMgcHLDqWNpc2VzLCBqJ8OpdGFpcyDDoCBsYSBwZXRpdGUgcml2acOocmUsIGNoZXogbGUKcMOocmUgTGF2aW9sZXR0ZSwgb8O5IGlsIG1lIGZhbGx1dCBkZXNjZW5kcmUgcHJlbmRyZSB1biBjb3VwIGV0IHNhbHVlcgpsYSBjb21wYWduaWUuIENvbW1lIG9uIG5lIHBhcnQgamFtYWlzIHN1ciB1bmUgc2V1bGUgamFtYmUsIGlsIGZhbGx1dAplbiBwcmVuZHJlIHVuIGRldXhpw6htZSBwb3VyIHLDqXRhYmxpciBsJ8OpcXVpbGlicmUsIGNvbW1lIGRpdCBCYXB0aXN0ZQpHYWxsaWVuLCBldCBhcHLDqHMgYXZvaXIgZGl0IGxlIGJvbnNvaXIgw6AgdG91dCBsZSBtb25kZSwgbm91cyBwcsOubWVzCmxlIENoZW1pbiBkdSBSb2kuIExhIHBsdWllIG5lIHRvbWJhaXQgcGFzIGVuY29yZSwgbWFpcyBpbCDDqXRhaXQKZmFjaWxlIGRlIHZvaXIgcXUnb24gYXVyYWl0IHVuZSB0ZW1ww6p0ZSBhdmFudCBsb25ndGVtcHMgZXQgamUKZm91ZXR0YWkgbWEgcG91bGljaGUgZGFucyBsJ2VzcG9pciBkJ2Fycml2ZXIgY2hleiBub3VzIGF2YW50IGxlCmdyYWluLgoKSVYKCkVuIGVudHJhbnQgY2hleiBsZSBww6hyZSBMYXZpb2xldHRlLCBqJ2F2YWlzIGJpZW4gcmVtYXJxdcOpIHF1ZSBTZW0KYXZhaXQgcHJpcyB1biBjb3VwIGRlIHRyb3A7IGV0IGMnZXN0IGZhY2lsZSDDoCB2b2lyIGNoZXogbHVpLCBjYXIKdm91cyBzYXZleiBxdSdpbCBhIGxlcyB5ZXV4IGNvbW1lIHVuZSBtb3J1ZSBnZWzDqWUsIGxvcnNxdSdpbCBzZSBtZXQKZW4gZsOqdGUsIG1haXMgbGVzIGRldXggZGVybmllcnMgY291cHMgZHUgZMOpcGFydCBsZSBmaW5pcmVudApjb21wbMOodGVtZW50IGV0IGlsIHMnZW5kb3JtaXQgY29tbWUgdW5lIG1hcm1vdHRlIGF1IG1vdXZlbWVudCBkZSBsYQpjaGFycmV0dGUuIEplIGx1aSBwbGHDp2FpIGxhIHTDqnRlIHN1ciB1bmUgYm90dGUgZGUgZm9pbiBxdWUgaidhdmFpcyBhdQpmb25kIGRlIGxhIHZvaXR1cmUgZXQgamUgcGFydGlzIGdyYW5kIHRyYWluLiBNYWlzIGonYXZhaXMgw6AgcGVpbmUKZmFpdCB1bmUgZGVtaS1saWV1ZSwgcXVlIGxhIHRlbXDDqnRlIMOpY2xhdGEgYXZlYyB1bmUgZnVyZXVyIHRlcnJpYmxlLgpWb3VzIHZvdXMgcmFwcGVsZXogbGEgdGVtcMOqdGUgZGUgc2FtZWRpIGRlcm5pZXIuIExhIHBsdWllIHRvbWJhaXQgw6AKdG9ycmVudHMsIGxlIHZlbnQgc2lmZmxhaXQgZGFucyBsZXMgYXJicmVzIGV0IGNlIG4nZXN0IHF1ZSBwYXIgbGEKbHVldXIgZGVzIMOpY2xhaXJzIHF1ZSBqJ2VudHJldm95YWlzIHBhcmZvaXMgbGEgcm91dGUuIEhldXJldXNlbWVudApxdWUgbWEgcG91bGljaGUgYXZhaXQgbCdpbnN0aW5jdCBkZSBtZSB0ZW5pciBkYW5zIGxlIG1pbGlldSBkdQpjaGVtaW4sIGNhciBpbCBmYWlzYWl0IG5vaXIgY29tbWUgZGFucyB1biBmb3VyLiBMZSBncmFuZCBTZW0gZG9ybWFpdAp0b3Vqb3VycywgYmllbiBxdSdpbCBmw7t0IHRyZW1ww6kgY29tbWUgdW5lIGxhdmV0dGUuIEplIG4nYWkgcGFzIGJlc29pbgpkZSB2b3VzIGRpcmUgcXVlIGonw6l0YWlzIGRhbnMgbGUgbcOqbWUgw6l0YXQuIE5vdXMgYXJyaXbDom1lcyBhaW5zaQpqdXNxdWUgY2hleiBMb3VpcyBUcmVtcGUgZG9udCBqJ2FwZXLDp3VzIGxhIG1haXNvbiBqYXVuZSDDoCBsYSBsdWV1cgpkJ3VuIMOpY2xhaXIgcXVpIG0nYXZldWdsYSwgZXQgcXVpIGZ1dCBzdWl2aSBkJ3VuIGNvdXAgZGUgdG9ubmVycmUgcXVpCmZpdCB0cmVtYmxlciBtYSBiw6p0ZSBldCBsYSBmaXQgcydhcnLDqnRlciB0b3V0IGNvdXJ0LiBTZW0gbHVpLW3Dqm1lCnMnw6l2ZWlsbGEgZGUgc2EgbMOpdGhhcmdpZSBldCBwb3Vzc2EgdW4gZ8OpbWlzc2VtZW50IHN1aXZpIGQndW4gY3JpIGRlCnRlcnJldXI6CgotLVJlZ2FyZGUsIEZhbmZhbiEgbGEgYsOqdGUgw6AgZ3JhbmQncXVldWUhCgpKZSBtZSByZXRvdXJuYWkgcG91ciBhcGVyY2V2b2lyIGRlcnJpw6hyZSBsYSB2b2l0dXJlIGRldXggZ3JhbmRzIHlldXgKcXVpIGJyaWxsYWllbnQgY29tbWUgZGVzIHRpc29ucyBldCwgdG91dCBlbiBtw6ptZSB0ZW1wcywgdW4gw6ljbGFpciBtZQpmaXQgdm9pciB1biBhbmltYWwgcXVpIHBvdXNzYSB1biBodXJsZW1lbnQgZGUgX2LDqnRlLcOgLXNlcHQtdMOqdGVzXwplbiBzZSBiYXR0YW50IGxlcyBmbGFuY3MgZCd1bmUgcXVldWUgcm91Z2UgZGUgc2l4IHBpZWRzIGRlIGxvbmcuLS1KJ2FpCmxhIHF1ZXVlIGNoZXogbW9pIGV0IGplIHZvdXMgbGEgbW9udHJlcmFpIHF1YW5kIHZvdXMgdm91ZHJleiEtLUplIG5lCnN1aXMgZ3XDqHJlIHBldXJldXggZGUgbWEgbmF0dXJlLCBtYWlzIGonYXZvdWUgcXVlIG1lIHZveWFudCBhaW5zaSwgw6AKbGEgbm9pcmNldXIsIHNldWwgYXZlYyB1biBob21tZSBzYW91bCwgYXUgbWlsaWV1IGQndW5lIHRlbXDDqnRlCnRlcnJpYmxlIGV0IGVuIGZhY2UgZCd1bmUgYsOqdGUgY29tbWUgw6dhLCBqZSBzZW50aXMgdW4gZnJpc3NvbiBtZQpwYXNzZXIgZGFucyBsZSBkb3MgZXQgamUgbGFuw6dhaSB1biBncmFuZCBjb3VwIGRlIGZvdWV0IMOgIG1hIGp1bWVudApxdWkgcGFydGl0IGNvbW1lIHVuZSBmbMOoY2hlLiBKZSB2aXMgcXVlIGonYXZhaXMgbGEgZG91YmxlIGNoYW5jZSBkZQptZSBjYXNzZXIgbGUgY291IGRhbnMgdW5lIGNvdWzDqWUgb3UgZW4gcm91bGFudCBlbiBiYXMgZGUgbGEgY8O0dGUsIG91CmJpZW4gZGUgbWUgdHJvdXZlciBmYWNlIMOgIGZhY2UgYXZlYyBjZXR0ZSBmYW1ldXNlIGLDqnRlIMOgIGdyYW5kJ3F1ZXVlCmRvbnQgb24gbSdhdmFpdCB0YW50IHBhcmzDqSwgbWFpcyDDoCBsYXF1ZWxsZSBqZSBjcm95YWlzIMOgIHBlaW5lLiBDJ2VzdAphbG9ycyBxdWUgdG91dGVzIG1lcyBww6JxdWVzIGRlIHJlbmFyZCBtZSByZXZpbnJlbnQgw6AgbGEgbcOpbW9pcmUgZXQgamUKcHJvbWlzIGJpZW4gZGUgZmFpcmUgbWVzIGRldm9pcnMgY29tbWUgdG91dCBsZSBtb25kZSwgc2kgbGUgYm9uIERpZXUKbWUgdGlyYWl0IGRlIGzDoC4gSmUgc2F2YWlzIGJpZW4gcXVlIGxlIHNldWwgbW95ZW4gZGUgdmVuaXIgw6AgYm91dCBkZQpsYSBiw6p0ZSwgc2kgw6dhIGVuIHZlbmFpdCDDoCB1bmUgcHJpc2UgZGUgY29ycHMsIGMnw6l0YWl0IGRlIGx1aSBjb3VwZXIKbGEgcXVldWUgYXUgcmFzIGR1IHRyb2dub24sIGV0IGplIG0nYXNzdXJhaSBxdWUgaidhdmFpcyBiaWVuIGRhbnMgbWEKcG9jaGUgdW4gYm9uIGNvdXRlYXUgw6AgcmVzc29ydCBkZSBjaGFudGllciBxdWkgY291cGFpdCBjb21tZSB1bgpyYXNvaXIuIFRvdXQgY2VsYSBtZSBwYXNzYSBwYXIgbGEgdMOqdGUgZGFucyB1biBpbnN0YW50IHBlbmRhbnQgcXVlIG1hCmp1bWVudCBnYWxvcGFpdCBjb21tZSB1bmUgZMOpY2hhw65uw6llIGV0IHF1ZSBsZSBncmFuZCBTZW0gQ2hhbXBhZ25lLCDDoAptb2l0acOpIGTDqWdyaXPDqSBwYXIgbGEgcGV1ciwgY3JpYWl0OgoKLS1Gb3VldHRlLCBGYW5mYW4hIGxhIGLDqnRlIG5vdXMgcG91cnN1aXQuIEonbHVpIHZvaXMgbGVzIHlldXggZGFucyBsYQpub2lyY2V1ci4KCkV0IG5vdXMgYWxsaW9ucyB1biB0cmFpbiBkJ2VuZmVyLiBOb3VzIHBhc3PDom1lcyBsZSB2aWxsYWdlIGRlcyBCbGFpcwpldCBpbCBmYWxsdXQgbm91cyBlbmdhZ2VyIGRhbnMgbGEgcm91dGUgcXVpIGxvbmdlIGxlIG1hbm9pciBkZQpEYXV0cmF5ZS4gTGEgcm91dGUgZXN0IMOpdHJvaXRlLCBjb21tZSB2b3VzIHNhdmV6LiBEJ3VuIGPDtHTDqSwgdW5lIGhhaWUKZW4gaGFsbGllciBib3Jkw6llIGQndW4gZm9zc8OpIGFzc2V6IHByb2ZvbmQgc8OpcGFyZSBsZSBwYXJjIGR1IGNoZW1pbiwKZXQgZGUgbCdhdXRyZSwgdW5lIHJhbmfDqWUgZGUgZ3JhbmRzIGFyYnJlcyBsb25nZSBsYSBjw7R0ZSBqdXNxdSdhdQpwb250IGRlIERhdXRyYXllLiBMZXMgw6ljbGFpcnMgcMOpbsOpdHJhaWVudCDDoCBwZWluZSDDoCB0cmF2ZXJzIGxlCmZldWlsbGFnZSBkZXMgYXJicmVzIGV0IGxlIG1vaW5kcmUgw6ljYXJ0IGRlIGxhIHBvdWxpY2hlIGRldmFpdCBub3VzCmpldGVyIGRhbnMgbGUgZm9zc8OpIGR1IGPDtHTDqSBkdSBtYW5vaXIsIG91IGJyaXNlciBsYSBjaGFycmV0dGUgZW4KbW9yY2VhdXggc3VyIGxlcyB0cm9uY3MgZGVzIGdyYW5kcyBhcmJyZXMuIEplIGRpcyDDoCBTZW06CgotLVRpZW5zLXRvaSBiaWVuIG1vbiBTZW0hIElsIHZhIG5vdXMgYXJyaXZlciB1biBhY2NpZGVudC4KCkV0IHZsYW4hIHBhdGF0cmFzISB1biBncmFuZCBjb3VwIGRlIHRvbm5lcnJlIMOpY2xhdGUgZXQgdm9pbMOgIGxhCnBvdWxpY2hlIGFmZm9sw6llIHF1aSBzZSBqZXR0ZSDDoCBkcm9pdGUgZGFucyBsZSBmb3Nzw6ksIGV0IGxhIGNoYXJyZXR0ZQpxdWkgc2UgdHJvdXZlIHNlbnMgZGVzc3VzIGRlc3NvdXMuIElsIGZhaXNhaXQgdW5lIG5vaXJjZXVyIMOgIG5lIHBhcwpzZSB2b2lyIGxlIGJvdXQgZHUgbmV6LCBtYWlzLCBlbiBtZSByZWxldmFudCB0YW50IGJpZW4gcXVlIG1hbCwKaidhcGVyw6d1cyBhdS1kZXNzdXMgZGUgbW9pIGxlcyBkZXV4IHlldXggZGUgbGEgYsOqdGUgcXVpIHMnw6l0YWl0CmFycsOqdMOpZSBldCBxdWkgbWUgcmVsdXF1YWl0IGQndW4gYWlyIGbDqXJvY2UuIEplIG1lIHTDonRhaSBwb3VyIHZvaXIgc2kKamUgbidhdmFpcyByaWVuIGRlIGNhc3PDqS4gSmUgbidhdmFpcyBhdWN1biBtYWwgZXQgbWEgcHJlbWnDqHJlIGlkw6llCmZ1dCBkZSBzYWlzaXIgbCdhbmltYWwgcGFyIGxhIHF1ZXVlIGV0IGRlIG1lIGdhcmVyIGRlIHNhIGd1ZXVsZSBkZQpwb3Nzw6lkw6kuIEplIG1lIHRyYcOubmFpIGVuIHJhbXBhbnQsIGV0LCB0b3V0IGVuIG91dnJhbnQgbW9uIGNvdXRlYXUKw6AgcmVzc29ydCBxdWUgamUgcGxhw6dhaSBkYW5zIG1hIGNlaW50dXJlLCBldCBhdSBtb21lbnQgb8O5IGxhIGLDqnRlCnMnw6lsYW7Dp2FpdCBzdXIgbW9pIGVuIHBvdXNzYW50IHVuIHJ1Z2lzc2VtZW50IGluZmVybmFsLCBqZSBmaXMgdW4KYm9uZCBkZSBjw7R0w6kgZXQgbCdhdHRyYXBhaSBwYXIgbGEgcXVldWUgcXVlIGonZW1wb2lnbmFpIHNvbGlkZW1lbnQKZGUgbWVzIGRldXggbWFpbnMuIElsIGZhbGxhaXQgdm9pciBsYSBsdXR0ZSBxdWkgcydlbnN1aXZpdC4gTGEgYsOqdGUsCnF1aSBzZW50YWl0IGJpZW4gcXVlIGplIGxhIHRlbmFpcyBwYXIgbGUgYm9uIGJvdXQsIGZhaXNhaXQgZGVzIHNhdXRzCnRlcnJpYmxlcyBwb3VyIG1lIGZhaXJlIGzDomNoZXIgcHJpc2UsIG1haXMgamUgbWUgY3JhbXBvbm5haXMgY29tbWUgdW4KZMOpc2VzcMOpcsOpLiBFdCBjZWxhIGR1cmEgcGVuZGFudCBhdSBtb2lucyB1biBxdWFydCBkJ2hldXJlLiBKZSB2b2xhaXMKw6AgZHJvaXRlLCDDoCBnYXVjaGUsIGNvbW1lIHVuZSBjYXNzZXJvbGUgYXUgYm91dCBkZSBsYSBxdWV1ZSBkJ3VuCmNoaWVuLCBtYWlzIGplIHRlbmFpcyBib24uIEonYXVyYWlzIGJpZW4gdm91bHUgc2Fpc2lyIG1vbiBjb3V0ZWF1CnBvdXIgbGEgY291cGVyLCBjZXR0ZSBtYXVkaXRlIHF1ZXVlLCBtYWlzIGltcG9zc2libGUgZCd5IHBlbnNlciB0YW50CnF1ZSBsYSBjaGFyb2duZSBzZSBkw6ltw6huZXJhaXQgYWluc2kuIMOAIGxhIGZpbiwgdm95YW50IHF1J2VsbGUgbmUKcG91dmFpdCBwYXMgbWUgZmFpcmUgbMOiY2hlciBwcmlzZSwgbGEgdm9pbMOgIHBhcnRpZSBzdXIgbGEgcm91dGUgYXUKdHJpcGxlIGdhbG9wLCBldCBtb2kgcGFyIGRlcnJpw6hyZSwgbmF0dXJlbGxlbWVudC4KCkplIG4nYWkgamFtYWlzIHZveWFnw6kgYXVzc2kgdml0ZSBxdWUgY2VsYSBkZSBtYSB2aWUuIExlcyBjaGV2ZXV4IG0nZW4KZnJpc2FpZW50IGVuIGTDqXBpdCBkZSBsYSBwbHVpZSBxdWkgdG9tYmFpdCB0b3Vqb3VycyDDoCB0b3JyZW50cy4gTGEKYsOqdGUgcG91c3NhaXQgZGVzIGJldWdsZW1lbnRzIHBvdXIgbSdlZmZyYXllciBkYXZhbnRhZ2UgZXQsIMOgIGxhCmZhdmV1ciBkJ3VuIMOpY2xhaXIsIGplIG0nYXBlcsOndXMgcXVlIG5vdXMgZmlsaW9ucyB2ZXJzIGxlIHBvbnQgZGUKRGF1dHJheWUuIEplIHBlbnNhaXMgYmllbiDDoCBtb24gY291dGVhdSwgbWFpcyBuJ29zYWlzIHBhcyBtZSByaXNxdWVyCmQndW5lIHNldWxlIG1haW4sIGxvcnNxdSdlbiBhcnJpdmFudCBhdSBwb250LCBsYSBiw6p0ZSB0b3VybmEgdmVycyBsYQpnYXVjaGUgZXQgdGVudGEgZCdlc2NhbGFkZXIgbGEgcGFsaXNzYWRlLiBMYSBtYXVkaXRlIHZvdWxhaXQgc2F1dGVyCsOgIGwnZWF1IHBvdXIgbWUgbm95ZXIuIEhldXJldXNlbWVudCBxdWUgc29uIHByZW1pZXIgc2F1dCBuZSByw6l1c3NpdApwYXMsIGNhciwgYXZlYyBsJ2VycmUgZCdhbGxlciBxdWUgaidhdmFpcyBhY3F1aXNlLCBqJ2F1cmFpcwpjZXJ0YWluZW1lbnQgZmFpdCBsZSBwbG9uZ2Vvbi4gRWxsZSByZWN1bGEgcG91ciBwcmVuZHJlIHVuIG5vdXZlbArDqWxhbiBldCBjJ2VzdCBjZSBxdWkgbWUgZG9ubmEgbWEgY2hhbmNlLiBKZSBzYWlzaXMgbW9uIGNvdXRlYXUgZGUKbGEgbWFpbiBkcm9pdGUgZXQsIGF1IG1vbWVudCBvw7kgZWxsZSBzYXV0YWl0LCBqZSByw6l1bmlzIHRvdXMgbWVzCmVmZm9ydHMsIGplIGZyYXBwYWkganVzdGUgZXQgbGEgcXVldWUgbWUgcmVzdGEgZGFucyBsYSBtYWluLiBKJ8OpdGFpcwpkw6lsaXZyw6kgZXQgaidlbnRlbmRpcyBsYSBjaGFyb2duZSBxdWkgc2UgZMOpYmF0dGFpdCBkYW5zIGxlcyBlYXV4IGRlCmxhIHJpdmnDqHJlIERhdXRyYXllIGV0IHF1aSBmaW5pdCBwYXIgZGlzcGFyYcOudHJlIGF2ZWMgbGUgY291cmFudC4gSmUKbWUgcmVuZGlzIGF1IG1vdWxpbiBvw7kgamUgcmFjb250YWkgbW9uIGFmZmFpcmUgYXUgbWV1bmllciBldCBub3VzCmV4YW1pbsOibWVzIGVuc2VtYmxlIGxhIHF1ZXVlIHF1ZSBqJ2F2YWlzIGFwcG9ydMOpZS4gQyfDqXRhaXQgdW5lIHF1ZXVlCmxvbmd1ZSBkZSBjaW5xIMOgIHNpeCBwaWVkcywgYXZlYyB1biBib3VxdWV0IGRlIHBvaWwgYXUgYm91dCwgbWFpcyB1bmUKcXVldWUgcm91Z2Ugw6ljYXJsYXRlOyB1bmUgdnJhaWUgcXVldWUgZGUgcG9zc8OpZMOpZSwgcXVvaSEKCkxhIHRlbXDDqnRlIHMnw6l0YWl0IGFwYWlzw6llIGV0IMOgIGwnYWlkZSBkJ3VuIGZhbmFsLCBqZSBwYXJ0aXMgw6AgbGEKcmVjaGVyY2hlIGRlIG1hIHZvaXR1cmUgcXVlIGplIHRyb3V2YWkgZW1ib3VyYsOpZSBkYW5zIHVuIGZvc3PDqSBkZSBsYQpyb3V0ZSwgYXZlYyBsZSBncmFuZCBTZW0gQ2hhbXBhZ25lIHF1aSwgY29tcGzDqHRlbWVudCBkw6lncmlzw6ksIGF2YWl0CmTDqWdhZ8OpIGxhIHBvdWxpY2hlIGV0IHRyYXZhaWxsYWl0IMOgIHJhbWFzc2VyIG1lcyBtYXJjaGFuZGlzZXMgcXVlIGxlCmNob2MgYXZhaXQgw6lwYXJwaWxsw6llcyBzdXIgbGEgcm91dGUuCgpTZW0gZnV0IGwnaG9tbWUgbGUgcGx1cyDDqXRvbm7DqSBkdSBtb25kZSBkZSBtZSB2b2lyIHJldmVuaXIgc2FpbiBldApzYXVmLCBjYXIgaWwgY3JveWFpdCBiaWVuIHF1ZSBjJ8OpdGFpdCBsZSBkaWFibGUgZW4gcGVyc29ubmUgcXVpCm0nYXZhaXQgZW1wb3J0w6kuCgpBcHLDqHMgYXZvaXIgZW1wcnVudMOpIHVuIGhhcm5haXMgYXUgbWV1bmllciBwb3VyIHJlbXBsYWNlciBsZSBuw7R0cmUsCnF1J2lsIGF2YWl0IGZhbGx1IGNvdXBlciBwb3VyIGxpYsOpcmVyIGxhIHBvdWxpY2hlLCBub3VzIHJlcHLDrm1lcyBsYQpyb3V0ZSBkdSB2aWxsYWdlIG/DuSBub3VzIGFycml2w6JtZXMgc3VyIGwnaGV1cmUgZGUgbWludWl0LgoKLS1Wb2lsw6AgbW9uIGhpc3RvaXJlIGV0IGplIHZvdXMgaW52aXRlIGNoZXogbW9pIHVuIGRlIGNlcyBqb3VycyBwb3VyCnZvaXIgbGEgcXVldWUgZGUgbGEgYsOqdGUuIEJhcHRpc3RlIExhbWJlcnQgZXN0IGVuIHRyYWluIGRlCmwnZW1wYWlsbGVyIHBvdXIgbGEgY29uc2VydmVyLgoKVgoKTGUgcsOpY2l0IHF1aSBwcsOpY8OoZGUgZG9ubmEgbGlldSwgcXVlbHF1ZXMgam91cnMgcGx1cyB0YXJkLCDDoCB1bgpkw6ltw6psw6kgcmVzdMOpIGPDqWzDqGJyZSBkYW5zIGxlcyBhbm5hbGVzIGNyaW1pbmVsbGVzIGRlIExhbm9yYWllLiBQb3VyCmVtcMOqY2hlciB1biB2cmFpIHByb2PDqHMgZXQgbGVzIGZyYWlzIHJ1aW5ldXggcXVpIHMnZW5zdWl2ZW50LCBvbiBldXQKcmVjb3VycyDDoCB1biBhcmJpdHJhZ2UgZG9udCB2b2ljaSBsZSBwcm9jw6hzLXZlcmJhbDoKCiJDZSBzZXB0acOobWUgam91ciBkZSBub3ZlbWJyZSAxODU2LCDDoCAzIGhldXJlcyBkZSByZWxldsOpZSwgbm91cwpzb3Vzc2lnbsOpcywgSmVhbi1CYXB0aXN0ZSBHYWxsaWVuLCBpbnN0aXR1dGV1ciBkaXBsw7Rtw6kgZXQKbWHDrnRyZS1jaGFudHJlIGRlIGxhIHBhcm9pc3NlIGRlIExhbm9yYWllLCBPbsOpc2ltZSBCb21iZW5sZXJ0LCBiZWRlYXUKZGUgbGEgZGl0ZSBwYXJvaXNzZSwgZXQgRGFtYXNlIEJyaXF1ZWxldXIsIMOpcGljaWVyLCBheWFudCDDqXTDqSBjaG9pc2lzCmNvbW1lIGFyYml0cmVzIGR1IHBsZWluIGdyw6kgZGVzIGludMOpcmVzc8OpcyBlbiBjZXR0ZSBjYXVzZSwgYXZvbnMKcmVuZHUgbGEgc2VudGVuY2UgZCdhcmJpdHJhZ2UgcXVpIHN1aXQgZGFucyBsZSBkaWZmw6lyZW5kIHN1cnZlbnUKZW50cmUgRnJhbsOnb2lzLVhhdmllciBUcmVtcGUsIHN1cm5vbW3DqSBGcmFuY2lzIEplYW4tSmVhbiBldCBKb3NlcGgsCnN1cm5vbW3DqSBGYW5mYW4gTGF6ZXR0ZS4KCkxlIHN1cy1ub21tw6kgRi4tWC4gVHJlbXBlIHJldmVuZGlxdWUgZGVzIGRvbW1hZ2VzLWludMOpcsOqdHMsIGF1IG1vbnRhbnQKZGUgY2VudCBmcmFuY3MsIGF1IGRpdCBGYW5mYW4gTGF6ZXR0ZSwgZW4gbCdhY2N1c2FudCBkJ2F2b2lyIGNvdXDDqSBsYQpxdWV1ZSBkZSBzb24gdGF1cmVhdSByb3VnZSBkYW5zIGxhIG51aXQgZHUgc2FtZWRpIDMgb2N0b2JyZSBkZXJuaWVyLApldCBkJ2F2b2lyIGFpbnNpIGNhdXPDqSBsYSBtb3J0IGR1IGRpdCB0YXVyZWF1IGQndW5lIG1hbmnDqHJlIGNydWVsbGUsCmlsbMOpZ2FsZSBldCBzdWJyZXB0aWNlLCBzdXIgbGUgcG9udCBkZSBsYSByaXZpw6hyZSBEYXV0cmF5ZSwgcHLDqHMgZHUKbWFub2lyIGRlcyBzZWlnbmV1cnMgZGUgTGFub3JhaWUuCgpMZSBkaXQgRmFuZmFuIExhemV0dGUgbmllIGQndW5lIG1hbmnDqHJlIMOpbmVyZ2lxdWUgbCdhY2N1c2F0aW9uIGR1ZGl0CkYuLVguIFRyZW1wZSBldCBsYSBkw6ljbGFyZSBtYWxpY2lldXNlIGV0IGlycsOpdsOpcmVuY2lldXNlLCBhdSBwbHVzCmhhdXQgZGVncsOpLiBJbCByZWNvbm5hw650IGF2b2lyIGNvdXDDqSBsYSBxdWV1ZSBkJ3VuIGFuaW1hbCBjb25udSBkYW5zCm5vcyBjYW1wYWduZXMgc291cyBsZSBub20gZGUgX2LDqnRlIMOgIGdyYW5kJ3F1ZXVlXyBkYW5zIGRlcwpjb25kaXRpb25zIGZvcnQgZGFuZ2VyZXVzZXMgcG91ciBzYSB2aWUgY29ycG9yZWxsZSBldCBwb3VyIGxlIHNhbHV0CmRlIHNvbiDDom1lLCBtYWlzIGNlbGEgw6Agc29uIGNvcnBzIGTDqWZlbmRhbnQgZXQgcGFyY2UgcXVlIGMnZXN0IGxlCnNldWwgbW95ZW4gcmVjb25udSBkZSBzZSBkw6liYXJyYXNzZXIgZGUgbGEgYsOqdGUuCgpFdCBsZXMgZGV1eCBpbnTDqXJlc3PDqXMgcHJvZHVpc2VudCBjaGFjdW4gdW4gdMOpbW9pbiBwb3VyIHNvdXRlbmlyCmxldXJzIHByw6l0ZW50aW9ucywgdGVsIHF1ZSBjb252ZW51IGRhbnMgbGVzIGNvbmRpdGlvbnMgZCdhcmJpdHJhZ2UuCgpMZSBub21tw6kgUGllcnJlIEJ1c3NlYXUsIGVuZ2Fnw6kgYXUgc2VydmljZSBkdSBkaXQgRi4tWC4gVHJlbXBlLApkw6ljbGFyZSBxdWUgbGEgcXVldWUgcHJvZHVpdGUgcGFyIGxlIHN1c2RpdCBGYW5mYW4gTGF6ZXR0ZSBsdWkgcGFyYcOudArDqnRyZSBsYSBxdWV1ZSBkdSBkw6lmdW50IHRhdXJlYXUgZGUgc29uIG1hw650cmUsIGRvbnQgaWwgYSB0cm91dsOpIGxhCmNhcmNhc3NlIMOpY2hvdcOpZSBzdXIgbGEgZ3LDqHZlLCBxdWVscXVlcyBqb3VycyBhdXBhcmF2YW50LCBkYW5zIHVuCsOpdGF0IGF2YW5jw6kgZGUgZMOpY29tcG9zaXRpb24uIExlIHRhdXJlYXUgZXN0IHByw6ljaXPDqW1lbnQgZGlzcGFydSBkYW5zCmxhIG51aXQgZHUgMyBvY3RvYnJlLCBkYXRlIG/DuSBsZSBkaXQgRmFuZmFuIExhemV0dGUgcHLDqXRlbmQgYXZvaXIKcmVuY29udHLDqSBsYSBfYsOqdGUgw6AgZ3JhbmQncXVldWVfLiBFdCBjZSBxdWkgbGUgY29uZmlybWUgZGFucyBzYQpjb252aWN0aW9uLCBjJ2VzdCBsYSBjb3VsZXVyIGRlIGxhIHN1c2RpdGUgcXVldWUgZHUgc3VzZGl0IHRhdXJlYXUKcXVpLCBxdWVscXVlcyBqb3VycyBhdXBhcmF2YW50LCBzJ8OpdGFpdCBhbXVzw6kgw6Agc2UgZ3JhdHRlciBzdXIgdW5lCmJhcnJpw6hyZSByw6ljZW1tZW50IHBlaW50ZSBlbiB2ZXJtaWxsb24uCgpFdCBzZSBwcsOpc2VudGUgZW5zdWl0ZSBsZSBub21tw6kgU2VtIENoYW1wYWduZSwgc3Vybm9tbcOpClNlbS3DoC1ncm9zLUxvdWlzLCBxdWkgZMOpc2lyZSBjb25maXJtZXIgZGUgbGEgbWFuacOocmUgbGEgcGx1cyBhYnNvbHVlCmxlcyBkw6ljbGFyYXRpb25zIGRlIEZhbmZhbiBMYXpldHRlLCBjYXIgaWwgw6l0YWl0IGF2ZWMgbHVpIHBlbmRhbnQgbGEKdGVtcMOqdGUgZHUgMyBvY3RvYnJlIGV0IGlsIGEgYXBlcsOndSBldCB2dSBkaXN0aW5jdGVtZW50IGxhIF9iw6p0ZSDDoApncmFuZCdxdWV1ZV8gdGVsbGUgcXVlIGTDqWNyaXRlIGRhbnMgbGEgZMOpcG9zaXRpb24gZHUgZGl0IExhemV0dGUuCgpFbiB2dWUgZGUgY2VzIHTDqW1vaWduYWdlcyBldCBkw6lwb3NpdGlvbnMgZXQ6CgpDb25zaWTDqXJhbnQgcXVlIGwnZXhpc3RlbmNlIGRlIGxhIF9iw6p0ZSDDoCBncmFuZCcgcXVldWVfIGEgw6l0w6kgZGUKdGVtcHMgaW1tw6ltb3JpYXV4IHJlY29ubnVlIGNvbW1lIHLDqWVsbGUsIGRhbnMgbm9zIGNhbXBhZ25lcywgZXQgcXVlCmxlIHNldWwgbW95ZW4gZGUgc2UgcHJvdMOpZ2VyIGNvbnRyZSBsYSBzdXNkaXRlIGLDqnRlIGVzdCBkZSBsdWkgY291cGVyCmxhIHF1ZXVlIGNvbW1lIHBhcmHDrnQgbCdhdm9pciBmYWl0IHNpIGJyYXZlbWVudCBGYW5mYW4gTGF6ZXR0ZSwgdW4KZGVzIGludMOpcmVzc8OpcyBlbiBjZXR0ZSBjYXVzZTsKCkNvbnNpZMOpcmFudCwgZCdhdXRyZSBwYXJ0LCBxdSd1biB0YXVyZWF1IHJvdWdlIGFwcGFydGVuYW50IMOgIEYuLVguClRyZW1wZSBlc3QgZGlzcGFydSDDoCBsYSBtw6ptZSBkYXRlIGV0IHF1ZSBsYSBjYXJjYXNzZSBhIMOpdMOpIHRyb3V2w6llLArDqWNob3XDqWUgZXQgc2FucyBxdWV1ZSwgc3VyIGxhIGdyw6h2ZSBkdSBTYWludC1MYXVyZW50IHBhciBsZSB0w6ltb2luClBpZXJyZSBCdXNzZWF1LCBxdWVscXVlcyBqb3VycyBwbHVzIHRhcmQ7CgpDb25zaWTDqXJhbnQgcXUnZW4gZmFjZSBkZSB0w6ltb2lnbmFnZXMgYXVzc2kgY29udHJhZGljdG9pcmVzIGlsIGVzdApmb3J0IGRpZmZpY2lsZSBkZSBmYWlyZSBwbGFpc2lyIMOgIHRvdXQgbGUgbW9uZGUsIHRvdXQgZW4gcmVzdGFudCBkYW5zCmxlcyBsaW1pdGVzIGQndW5lIGTDqWNpc2lvbiBww6lyZW1wdG9pcmU7CgpEw6ljaWRvbnM6CgoxLiBRdSfDoCBsJ2F2ZW5pciBsZSBkaXQgRmFuZmFuIExhemV0dGUgc29pdCBmb3Jjw6kgZGUgZmFpcmUgc2VzIHDDonF1ZXMKZGFucyBsZXMgY29uZGl0aW9ucyB2b3VsdWVzIHBhciBub3RyZSBTYWludGUgTcOocmUgbCfDiWdsaXNlLCBjZSBxdWkgbGUKcHJvdMOpZ2VyYSBjb250cmUgbGEgcmVuY29udHJlIGRlcyBsb3Vwcy1nYXJvdXMsIGLDqnRlcyDDoCBncmFuZCdxdWV1ZQpldCBmZXV4IGZvbGxldHMgcXVlbGNvbnF1ZXMsIGVuIGFsbGFudCDDoCBCZXJ0aGllciBvdSBhaWxsZXVycy4KCjIuIFF1ZSBsZSBkaXQgRi4tWC4gVHJlbXBlIHNvaXQgZm9yY8OpIGRlIHJlbmZlcm1lciBzZXMgdGF1cmVhdXggZGUKbWFuacOocmUgw6AgbGVzIGVtcMOqY2hlciBkZSBmcsOpcXVlbnRlciBsZXMgY2hlbWlucyBwdWJsaWNzIGV0IGRlCnMnYXR0YXF1ZXIgYXV4IHBhc3NhbnRzIGRhbnMgbGVzIHTDqW7DqGJyZXMsIMOgIGRlcyBoZXVyZXMgaW5kdWVzIGR1CmpvdXIgZXQgZGUgbGEgbnVpdC4KCjMuIFF1ZSBsZXMgZGV1eCBpbnTDqXJlc3PDqXMgZW4gY2V0dGUgY2F1c2UsIGxlcyBzdXNkaXRzIEZhbmZhbiBMYXpldHRlCmV0IEYuLVguIFRyZW1wZSBzb2llbnQgY29uZGFtbsOpcyDDoCBwcmVuZHJlIGxhIHF1ZXVlIGNvdXDDqWUgcGFyIEZhbmZhbgpMYXpldHRlIGV0IMOgIGxhIG1ldHRyZSBlbiBsb3RlcmllIHBhcm1pIGxlcyBoYWJpdGFudHMgZGUgbGEgcGFyb2lzc2UKYWZpbiBxdWUgbGEgc29tbWUgcsOpYWxpc8OpZSBub3VzIHNvaXQgcmVtaXNlIMOgIHRpdHJlIGRlIGNvbXBlbnNhdGlvbgpwb3VyIG5vdHJlIGFyYml0cmFnZSwgcG91ciBzdWl2cmUgbGEgYm9ubmUgdHJhZGl0aW9uIHF1aSB2ZXV0IHF1ZSwKZGFucyBsZXMgcHJvY8OocyBkb3V0ZXV4LCBsZXMganVnZXMgZXQgbGVzIGF2b2NhdHMgc29pZW50IHLDqW11bsOpcsOpcywKcXVlbCBxdWUgc29pdCBsZSBzb3J0IGRlcyBwbGFpZGV1cnMgcXVpIHNvbnQgcmVudm95w6lzIGRvcyDDoCBkb3MsCmNoYWN1biBwYXlhbnQgbGVzIGZyYWlzLgoKRW4gZm9pIGRlIHF1b2kgbm91cyBhdm9ucyBzaWduw6ksCgogIEplYW4tQmFwdGlzbGUgR2FsbGllbiwKICBPbsOpc2ltZSBCb21iZW5sZXJ0LAogIERhbWFzZSBCcmlxdWVsZXVyLgoKUG91ciBjb3BpZSBjb25mb3JtZTogSC4gQmVhdWdyYW5kLgoKCgpNQUNMT1VORQoKSQoKQmllbiBxdSdvbiBsdWkgZcO7dCBkb25uw6ksIGF1IGJhcHTDqm1lLCBsZSBwcsOpbm9tIGRlIE1heGltZSwgdG91dCBsZQptb25kZSBhdSB2aWxsYWdlIGwnYXBwZWxhaXQgX01hY2xvdW5lXy4KCkV0IHRvdXQgY2VsYSwgcGFyY2UgcXVlIHNhIG3DqHJlLCBNYXJpZSBHYWxsaWVuLCBhdmFpdCB1biBkw6lmYXV0CmQnYXJ0aWN1bGF0aW9uIHF1aSBsJ2VtcMOqY2hhaXQgZGUgcHJvbm9uY2VyIGRpc3RpbmN0ZW1lbnQgc29uIG5vbS4KRWxsZSBkaXNhaXQgX01hY2xvdW5lXyBhdSBsaWV1IGRlIE1heGltZSwgZXQgbGVzIHZpbGxhZ2VvaXMKbCdhcHBlbGFpZW50IGNvbW1lIHNhIG3DqHJlLgoKQyfDqXRhaXQgdW4gcGF1dnJlIGjDqHJlIHF1aSDDqXRhaXQgbsOpIGV0IHF1aSBhdmFpdCBncmFuZGkgZGFucyBsYSBwbHVzCnByb2ZvbmRlIGV0IGRhbnMgbGEgcGx1cyByZXNwZWN0YWJsZSBtaXPDqHJlLgoKU29uIHDDqHJlIMOpdGFpdCB1biBicmF2ZSBiYXRlbGllciBxdWkgcyfDqXRhaXQgbm95w6kgYWxvcnMgcXVlIE1hY2xvdW5lCsOpdGFpdCBlbmNvcmUgYXUgYmVyY2VhdSwgZXQgbGEgbcOocmUgYXZhaXQgcsOpdXNzaSB0YW50IGJpZW4gcXVlIG1hbCwKZW4gYWxsYW50IGVuIGpvdXJuw6llIMOgIGRyb2l0ZSBldCDDoCBnYXVjaGUsIMOgIHRyYcOubmVyIHVuZSBww6luaWJsZQpleGlzdGVuY2UgZXQgw6AgcsOpY2hhcHBlciBsYSB2aWUgZGUgc29uIGVuZmFudCBxdWkgw6l0YWl0IG7DqSByYWNoaXRpcXVlCmV0IHF1aSBhdmFpdCB2w6ljdSBldCBncmFuZGksIGVuIGTDqXBpdCBkZXMgcHLDqWRpY3Rpb25zIGRlIHRvdXRlcyBsZXMKY29tbcOocmVzIGRlcyBhbGVudG91cnMuCgpMZSBwYXV2cmUgZ2Fyw6dvbiDDqXRhaXQgdW4gbW9uc3RyZSBkZSBsYWlkZXVyLiBNYWwgZmFpdCBhdSBwb3NzaWJsZSwKaWwgYXZhaXQgdW4gcGF1dnJlIGNvcnBzIG1hbGluZ3JlIGF1cXVlbCBzZSB0cm91dmFpZW50IHRhbnQgYmllbiBxdWUKbWFsIGF0dGFjaMOpcyBkZSBsb25ncyBicmFzIGV0IGRlIGxvbmd1ZXMgamFtYmVzIGdyw6psZXMgcXVpIHNlCnRlcm1pbmFpZW50IHBhciBkZXMgcGllZHMgZXQgZGVzIG1haW5zIHF1aSBuJ2F2YWllbnQgZ3XDqHJlIHNlbWJsYW5jZQpodW1haW5lLiBJbCDDqXRhaXQgYmFuY2FsLCBib2l0ZXV4LCB0b3J0dS1ib3NzdSBjb21tZSBvbiBkaXQgZGFucyBub3MKY2FtcGFnbmVzLCBldCBsZSBtYWxoZXVyZXV4IGF2YWl0IHVuZSB0w6p0ZSDDoCBsJ2F2ZW5hbnQ6IHVuZSB2w6lyaXRhYmxlCnTDqnRlIGRlIG1hY2FxdWUgZW4gcnVwdHVyZSBkZSBtw6luYWdlcmllLiBMYSBuYXR1cmUgYXZhaXQgb3VibGnDqSBkZSBsZQpkb3RlciBkJ3VuIG1lbnRvbiwgZXQgZGV1eCBsb25ndWVzIGRlbnRzIGphdW7DonRyZXMgc29ydGFpZW50IGQndW4KcGV0aXQgdHJvdSBjaXJjdWxhaXJlIHF1aSBsdWkgdGVuYWl0IGxpZXUgZGUgYm91Y2hlIGNvbW1lIGRlcwpkw6lmZW5zZXMgZGUgYsOqdGUgZsOpcm9jZS4gSWwgbmUgcG91dmFpdCBwYXMgbcOiY2hlciBzZXMgYWxpbWVudHMgZXQKYyfDqXRhaXQgdW5lIGN1cmlvc2l0w6kgcXVlIGRlIGxlIHZvaXIgbWFuZ2VyLgoKU29uIGxhbmdhZ2Ugc2UgY29tcG9zYWl0IGRlIHBocmFzZXMgaW5jb2jDqXJlbnRlcyBldCBkZSBzb25zCmluYXJ0aWN1bMOpcyBxdSdpbCBhY2NvbXBhZ25haXQgZCd1bmUgcGFudG9taW1lIHRyw6hzIGV4cHJlc3NpdmUuIEV0IGlsCnBhcnZlbmFpdCBhc3NleiBmYWNpbGVtZW50IMOgIHNlIGZhaXJlIGNvbXByZW5kcmUsIG3Dqm1lIGRlIGNldXggcXVpCmwnZW50ZW5kYWllbnQgcG91ciBsYSBwcmVtacOocmUgZm9pcy4KCkVuIGTDqXBpdCBkZSBjZXR0ZSBsYWlkZXVyIHZyYWltZW50IHJlcG91c3NhbnRlIGV0IGRlIGNldHRlIGRpZmZpY3VsdMOpCmRlIGxhbmdhZ2UsIE1hY2xvdW5lIMOpdGFpdCBhZG9yw6kgcGFyIHNhIG3DqHJlIGV0IGFpbcOpIGRlIHRvdXMgbGVzCnZpbGxhZ2VvaXMuCgpDJ2VzdCBxdSdpbCDDqXRhaXQgYXVzc2kgYm9uIHF1J2lsIMOpdGFpdCBsYWlkLCBldCBpbCBhdmFpdCBkZXV4IGdyYW5kcwp5ZXV4IGJsZXVzIHF1aSB2b3VzIGZpeGFpZW50IGNvbW1lIHBvdXIgdm91cyBkaXJlOgoKLS1DJ2VzdCB2cmFpISBqZSBzdWlzIGJpZW4gaG9ycmlibGUgw6Agdm9pciwgbWFpcywgdGVsIHF1ZSB2b3VzIG1lCnZveWV6LCBqZSBzdWlzIGxlIHNldWwgc3VwcG9ydCBkZSBuaWEgdmllaWxsZSBtw6hyZSBtYWxhZGUgZXQsIHNpCmNow6l0aWYgcXVlIGplIHNvaXMsIGlsIG1lIGZhdXQgdHJhdmFpbGxlciBwb3VyIGx1aSBkb25uZXIgZHUgcGFpbi4KCkV0IHBhcyB1biBnYW1pbiwgbcOqbWUgbGVzIHBsdXMgbcOpY2hhbnRzLCBhdXJhaXQgb3PDqSBzZSBtb3F1ZXIgZGUgc2EKbGFpZGV1ciBvdSBhYnVzZXIgZGUgc2EgZmFpYmxlc3NlLgoKRXQgcHVpcywgb24gbGUgcHJlbmFpdCBlbiBwaXRpw6kgcGFyY2UgcXVlIGwnb24gZGlzYWl0IGF1IHZpbGxhZ2UKcXUndW5lIHNhdXZhZ2Vzc2UgYXZhaXQgamV0w6kgdW4gX3NvcnRfIMOgIE1hcmllIEdhbGxpZW4sIHF1ZWxxdWVzCm1vaXMgYXZhbnQgbGEgbmFpc3NhbmNlIGRlIE1hY2xvdW5lLiBDZXR0ZSBzYXV2YWdlc3NlIMOpdGFpdCB1bmUKZmFpc2V1c2UgZGUgcGFuaWVycyBxdWkgY291cmFpdCBsZXMgY2FtcGFnbmVzIGV0IHF1aSBzJ2VuaXZyYWl0LCBkw6hzCnF1J2VsbGUgYXZhaXQgcHUgYW1hc3NlciBhc3NleiBkZSBncm9zIHNvdXMgcG91ciBhY2hldGVyIHVuZQpib3V0ZWlsbGUgZGUgd2hpc2t5LCBldCBjJ8OpdGFpdCBhbG9ycyB1bmUgb3JnaWUgcXVpIHJlc3RhaXQgw6AgamFtYWlzCmdyYXbDqWUgZGFucyBsYSBtw6ltb2lyZSBkZSBjZXV4IHF1aSBlbiDDqXRhaWVudCB0w6ltb2lucy4KCkxhIG1hbGhldXJldXNlIGNvdXJhaXQgcGFyIGxlcyBydWVzIGVuIHBvdXNzYW50IGRlcyBjcmlzIGRlIGLDqnRlCmZhdXZlIGV0IGVuIHMnYXJyYWNoYW50IGxlcyBjaGV2ZXV4LiBJbCBmYXV0IGF2b2lyIHZ1IGRlcyBzYXV2YWdlcwpzb3VzIGwnaW5mbHVlbmNlIGRlIGwnYWxjb29sIHBvdXIgc2UgZmFpcmUgdW5lIGlkw6llIGRlIGNlcyBzY8OobmVzCnZyYWltZW50IGluZmVybmFsZXMuIEMnZXN0IGRhbnMgdW5lIGRlIGNlcyBvY2Nhc2lvbnMgcXVlIGxhCnNhdXZhZ2Vzc2UgYXZhaXQgdm91bHUgZm9yY2VyIGxhIHBvcnRlIGRlIGxhIG1haXNvbm5ldHRlIGRlIE1hcmllCkdhbGxpZW4gZXQgcXUnZWxsZSBhdmFpdCBtYXVkaXQgbGEgcGF1dnJlIGZlbW1lLCBkZW1pIG1vcnRlIGRlIHBldXIsCnF1aSBhdmFpdCByZWZ1c8OpIGRlIGxhIGxhaXNzZXIgZW50cmUgY2hleiBlbGxlLgoKRXQgbCdvbiBjcm95YWl0IGfDqW7DqXJhbGVtZW50IGF1IHZpbGxhZ2UgcXVlIGMnw6l0YWl0IGxhIG1hbMOpZGljdGlvbiBkZQpsYSBzYXV2YWdlc3NlIHF1aSDDqXRhaXQgbGEgY2F1c2UgZGUgbGEgbGFpZGV1ciBkZSBjZSBwYXV2cmUgTWFjbG91bmUuCk9uIGRpc2FpdCBhdXNzaSwgbWFpcyBzYW5zIGwnYWZmaXJtZXIgY2F0w6lnb3JpcXVlbWVudCwgcXUndW4gcXXDqnRldXgKZGUgU2FpbnQtTWljaGVsIGRlIFlhbWFza2EgcXVpIGF2YWl0IGxhIHLDqXB1dGF0aW9uIGQnw6p0cmUgdW4gcGV1CnNvcmNpZXIsIGF2YWl0IGpldMOpIHVuIGF1dHJlIHNvcnQgw6AgTWFyaWUgR2FsbGllbiBwYXJjZSBxdWUgbGEgcGF1dnJlCmZlbW1lIG4nYXZhaXQgcHUgbHVpIGZhaXJlIGwnYXVtw7RuZSwgYWxvcnMgcXUnZWxsZSDDqXRhaXQgZWxsZS1tw6ptZQpkYW5zIGxhIHBsdXMgZ3JhbmRlIG1pc8OocmUsIHBlbmRhbnQgc2VzIHJlbGV2YWlsbGVzLCBhcHLDqHMgbGEKbmFpc3NhbmNlIGRlIHNvbiBlbmZhbnQuCgpJSQoKTWFjbG91bmUgYXZhaXQgZ3JhbmRpIGVuIHRyYXZhaWxsYW50LCBzZSByZW5kYWl0IHV0aWxlIGxvcnNxdSdpbCBsZQpwb3V2YWl0IGV0IHRvdWpvdXJzIHByw6p0IMOgIHJlbmRyZSBzZXJ2aWNlLCDDoCBmYWlyZSB1bmUgY29tbWlzc2lvbiwKb3Ugw6AgcHLDqnRlciBsYSBtYWluIGxvcnNxdWUgbCdvY2Nhc2lvbiBzZSBwcsOpc2VudGFpdC4gSWwgbidhdmFpdApqYW1haXMgw6l0w6kgw6AgbCfDqWNvbGUgZXQgY2Ugbidlc3QgcXVlIHRyw6hzIHRhcmQsIMOgIGwnw6JnZSBkZSB0cmVpemUKb3UgcXVhdG9yemUgYW5zLCBxdWUgbGUgY3Vyw6kgZHUgdmlsbGFnZSBsdWkgYXZhaXQgcGVybWlzIGRlIGZhaXJlCnNhIHByZW1pw6hyZSBjb21tdW5pb24uIEJpZW4gcXUnaWwgbmUgZsO7dCBwYXMgY2UgcXVlIGwnb24gYXBwZWxsZQp1biBzaW1wbGUgZCdlc3ByaXQsIGlsIGF2YWl0IHBvdXNzw6kgdW4gcGV1IMOgIGxhIGRpYWJsZSBldCBzb24KaW50ZWxsaWdlbmNlIHF1aSBuJ8OpdGFpdCBwYXMgdHLDqHMgdml2ZSBuJ2F2YWl0IGphbWFpcyDDqXTDqSBjdWx0aXbDqWUuCkTDqHMgbCfDomdlIGRlIGRpeCBhbnMsIGlsIGFpZGFpdCBkw6lqw6Agc2EgbcOocmUgw6AgZmFpcmUgYm91aWxsaXIgbGEKbWFybWl0ZSBldCDDoCBhbWFzc2VyIGxhIHByb3Zpc2lvbiBkZSBib2lzIGRlIGNoYXVmZmFnZSBwb3VyCmwnaGl2ZXIuCgpDJ8OpdGFpdCBnw6luw6lyYWxlbWVudCBzdXIgbGEgZ3LDqHZlIGR1IFNhaW50LUxhdXJlbnQgcXUnaWwgcGFzc2FpdCBkZXMKaGV1cmVzIGVudGnDqHJlcyDDoCByZWN1ZWlsbGlyIGxlcyBib2lzIGZsb3R0YW50cyBxdWkgZGVzY2VuZGFpZW50IGF2ZWMKbGUgY291cmFudCBwb3VyIHMnw6ljaG91ZXIgc3VyIGxhIHJpdmUuCgpNYWNsb3VuZSBhdmFpdCBkw6l2ZWxvcHDDqSBkZSBib25uZSBoZXVyZSB1biBwZW5jaGFudCBwb3VyIGxlIGNvbW1lcmNlCmV0IGxlIGJyb2NhbnRhZ2UgZXQgY2UgZnV0IHVuIGdyYW5kIGpvdXIgcG91ciBsdWkgbG9yc3F1J2lsIHB1dCBzZQpyZW5kcmUgw6AgTW9udHLDqWFsIHBvdXIgeSBhY2hldGVyIHF1ZWxxdWVzIGFydGljbGVzIGRlIHZlbnRlIGZhY2lsZSwKY29tbWUgZHUgZmlsLCBkZXMgYWlndWlsbGVzLCBkZXMgYm91dG9ucywgcXUnaWwgY29scG9ydGFpdCBlbnN1aXRlCmRhbnMgdW4gcGFuaWVyIGF2ZWMgZGVzIGJvbmJvbnMgZXQgZGVzIGZydWl0cy4gSWwgbid5IGV1dCBwbHVzIGRlCm1pc8OocmUgZGFucyBsYSBwZXRpdGUgZmFtaWxsZSDDoCBkYXRlciBkZSBjZXR0ZSDDqXBvcXVlLCBtYWlzIGxlIHBhdXZyZQpnYXLDp29uIGF2YWl0IGNvbXB0w6kgc2FucyBsYSBtYWxhZGllLCBxdWkgY29tbWVuw6dhIMOgIHMnYXR0YXF1ZXIgw6Agc29uCnBhdXZyZSBjb3JwcywgZMOpasOgIHNpIGZhaWJsZSBldCBzaSBjcnVlbGxlbWVudCDDqXByb3V2w6kuCgpNYWlzIE1hY2xvdW5lIMOpdGFpdCBicmF2ZSwgZXQgaWwgbid5IGF2YWl0IGd1w6hyZSBkZSB0ZW1wcyBxdSdvbiBuZQpsJ2FwZXLDp3V0IHN1ciBsZSBxdWFpLCBhdSBkw6liYXJjYWTDqHJlIGRlcyBiYXRlYXV4IMOgIHZhcGV1ciwgbGVzIGpvdXJzCmRlIG1hcmNow6ksIG91IGF2YW50IGV0IGFwcsOocyBsYSBncmFuZCdtZXNzZSwgdG91cyBsZXMgZGltYW5jaGVzIGV0CmbDqnRlcyBkZSBsJ2FubsOpZS4gUGVuZGFudCBsZXMgbG9uZ3VlcyBzb2lyw6llcyBkJ8OpdMOpLCBpbCBmYWlzYWl0IGxhCnDDqmNoZSBkYW5zIGxlcyBlYXV4IGR1IGZsZXV2ZSwgZXQgaWwgw6l0YWl0IGRldmVudSBkJ3VuZSBoYWJpbGV0w6kgcGV1CmNvbW11bmUgcG91ciBjb25kdWlyZSB1biBjYW5vdCwgc29pdCDDoCBsJ2F2aXJvbiBwZW5kYW50IGxlcyBqb3VycyBkZQpjYWxtZSwgc29pdCDDoCBsYSB2b2lsZSBsb3JzcXVlIGxlcyB2ZW50cyDDqXRhaWVudCBmYXZvcmFibGVzLiBQZW5kYW50CmxlcyBncmFuZGVzIGJyaXNlcyBkdSBub3JkLWVzdCwgb24gYXBlcmNldmFpdCBwYXJmb2lzIE1hY2xvdW5lIHNldWwsCmRhbnMgc29uIGNhbm90LCBsZXMgY2hldmV1eCBhdSB2ZW50LCBsb3V2b3lhbnQgZW4gZGVzY2VuZGFudCBsZQpmbGV1dmUgb3UgZmlsYW50IHZlbnQgYXJyacOocmUgdmVycyBsZXMgw65sZXMgZGUgQ29udHJlY29ldXIuCgpQZW5kYW50IGxhIHNhaXNvbiBkZXMgZnJhaXNlcywgZGVzIGZyYW1ib2lzZXMgZXQgZGVzIF9ibHVldHNfLCBpbAphdmFpdCBvcmdhbmlzw6kgdW4gcGV0aXQgY29tbWVyY2UgZGUgZ3JvcyBxdWkgbHVpIHJhcHBvcnRhaXQgZCdhc3NlegpiZWF1eCBiw6luw6lmaWNlcy4gSWwgYWNoZXRhaXQgY2VzIGZydWl0cyBkZXMgdmlsbGFnZW9pcyBwb3VyIGFsbGVyIGxlcwpyZXZlbmRyZSBzdXIgbGVzIG1hcmNow6lzIGRlIE1vbnRyw6lhbC4gQydlc3QgYWxvcnMgcXUnaWwgZml0IGxhCmNvbm5haXNzYW5jZSBkJ3VuZSBwYXV2cmUgZmlsbGUgcXVpIGx1aSBhcHBvcnRhaXQgc2VzIF9ibHVldHNfIGRlCmxhIHJpdmUgb3Bwb3PDqWUgZHUgZmxldXZlLCBvw7kgZWxsZSBoYWJpdGFpdCwgZGFucyBsYSBjb25jZXNzaW9uIGRlIGxhClBldGl0ZS1NaXPDqHJlLgoKSUlJCgpMYSByZW5jb250cmUgZGUgY2V0dGUgZmlsbGUgZnV0IHRvdXRlIHVuZSByw6l2w6lsYXRpb24gZGFucyBsJ2V4aXN0ZW5jZQpkdSBwYXV2cmUgTWFjbG91bmUuIFBvdXIgbGEgcHJlbWnDqHJlIGZvaXMgaWwgYXZhaXQgb3PDqSBsZXZlciBsZXMgeWV1eApzdXIgdW5lIGZlbW1lIGV0IGlsIGVuIGRldmludCDDqXBlcmR1bWVudCBhbW91cmV1eC4KCkxhIGpldW5lIGZpbGxlLCBxdWkgcydhcHBlbGFpdCBNYXJpZSBKb3llbGxlLCBuJ8OpdGFpdCBuaSByaWNoZSBuaQpiZWxsZS4gQyfDqXRhaXQgdW5lIHBhdXZyZSBvcnBoZWxpbmUgbWFpZ3JlLCBjaMOpdGl2ZSwgw6lwdWlzw6llIHBhciBsZQp0cmF2YWlsLCBxdSd1biBvbmNsZSBhdmFpdCByZWN1ZWlsbGllIHBhciBjaGFyaXTDqSBldCBxdWUgbCdvbiBmYWlzYWl0CnRyYXZhaWxsZXIgY29tbWUgdW5lIGVzY2xhdmUgZW4gw6ljaGFuZ2UgZCd1bmUgbWFpZ3JlIHBpdGFuY2UgZXQgZGUKdsOqdGVtZW50cyBkZSByZWJ1dCBxdWkgc3VmZmlzYWllbnQgw6AgcGVpbmUgcG91ciBsYSBjb3V2cmlyIGTDqWNlbW1lbnQuCkxhIHBhdXZyZXR0ZSBuJ2F2YWl0IGphbWFpcyBwb3J0w6kgZGUgY2hhdXNzdXJlcyBkZSBzYSB2aWUgZXQgdW4gcGV0aXQKY2jDomxlIG5vaXIgw6AgY2FycmVhdXggcm91Z2VzIHNlcnZhaXQgw6AgbHVpIGNvdXZyaXIgbGEgdMOqdGUgZXQgbGVzCsOpcGF1bGVzLgoKTGUgcHJlbWllciB0w6ltb2lnbmFnZSBkJ2FmZmVjdGlvbiBxdWUgbHVpIGRvbm5hIE1hY2xvdW5lIGZ1dCBsJ2FjaGF0CmQndW5lIHBhaXJlIGRlIHNvdWxpZXJzIGV0IGQndW5lIHJvYmUgZCdpbmRpZW5uZSDDoCByYW1hZ2VzLCBxdSdpbAphcHBvcnRhIHVuIGpvdXIgZGUgTW9udHLDqWFsIGV0IHF1J2lsIG9mZnJpdCB0aW1pZGVtZW50IMOgIGxhIHBhdXZyZQpmaWxsZSwgZW4gbHVpIGRpc2FudCwgZGFucyBzb24gbGFuZ2FnZSBwYXJ0aWN1bGllcjoKCi0tUm9iZSwgbWFtJ3NlbGxlLCBzb3VsaWVycywgbWFtJ3NlbGxlLiBNYWNsb3VuZSBhY2jDqHRlIMOnYSBwb3VyIHZvdXMuClZvdXMgcHJlbmRyZSwgaGVpbj8KCkV0IE1hcmllIEpveWVsbGUgYXZhaXQgYWNjZXB0w6kgc2ltcGxlbWVudCBkZXZhbnQgbGUgcmVnYXJkCmQnaW5leHByaW1hYmxlIGFmZmVjdGlvbiBkb250IGwnYXZhaXQgZW52ZWxvcHDDqWUgTWFjbG91bmUgZW4gbHVpCm9mZnJhbnQgc29uIGNhZGVhdS4KCkMnw6l0YWl0IGxhIHByZW1pw6hyZSBmb2lzIHF1ZSBsYSBwYXV2cmUgTWFyaWNoZXR0ZSwgY29tbWUgb24KbCdhcHBlbGFpdCB0b3Vqb3Vycywgc2Ugdm95YWl0IGwnb2JqZXQgZCd1bmUgb2ZmcmFuZGUgcXVpIG5lCnByb3ZlbmFpdCBwYXMgZCd1biBzZW50aW1lbnQgZGUgcGl0acOpLiBFbGxlIGF2YWl0IGNvbXByaXMgTWFjbG91bmUsCmV0IHNhbnMgcydvY2N1cGVyIGRlIHNhIGxhaWRldXIgZXQgZGUgc29uIGJhcmFnb3VpbmFnZSwgc29uIGNvZXVyCmF2YWl0IMOpdMOpIHByb2ZvbmTDqW1lbnQgdG91Y2jDqS4KCkV0IMOgIGRhdGVyIGRlIGNlIGpvdXIgTWFjbG91bmUgZXQgTWFyaWNoZXR0ZSBzJ2FpbcOocmVudCwgY29tbWUgb24KcydhaW1lIGxvcnNxdSdvbiBhIGRpeC1odWl0IGFucywgb3VibGlhbnQgcXVlIGxhIG5hdHVyZSBhdmFpdCBmYWl0CmQnZXV4IGRlcyDDqnRyZXMgw6AgcGFydCBxdSdpbCBuZSBmYWxsYWl0IG3Dqm1lIHBhcyBwZW5zZXIgw6AgdW5pciBwYXIgbGUKbWFyaWFnZS4KCk1hY2xvdW5lIGRhbnMgc2EgZnJhbmNoaXNlIGV0IGRhbnMgc2Egc2ltcGxpY2l0w6kgcmFjb250YSDDoCBzYSBtw6hyZSBjZQpxdWkgcyfDqXRhaXQgcGFzc8OpLCBldCBsYSB2aWVpbGxlIE1hcmllIEdhbGxpZW4gdHJvdXZhIHRvdXQgbmF0dXJlbApxdWUgc29uIGZpbHMgZcO7dCBjaG9pc2kgdW5lIGJvbm5lIGFtaWUgZXQgcXUnaWwgcGVuc8OidCBhdSBtYXJpYWdlLgoKVG91dCBsZSB2aWxsYWdlIGZ1dCBiaWVudMO0dCBkYW5zIGxlIHNlY3JldCwgY2FyIGxlIGRpbWFuY2hlIHN1aXZhbnQKTWFjbG91bmUgw6l0YWl0IHBhcnRpIGRlIGJvbm5lIGhldXJlIGRhbnMgc29uIGNhbm90IHBvdXIgc2UgcmVuZHJlIMOgCmxhIFBldGl0ZS1NaXPDqHJlIGRhbnMgbGUgYnV0IGRlIHByaWVyIE1hcmljaGV0dGUgZGUgbCdhY2NvbXBhZ25lciDDoApsYSBncmFuZCdtZXNzZSDDoCBMYW5vcmFpZS4gRXQgY2VsbGUtY2kgYXZhaXQgYWNjZXB0w6kgc2FucyBzZSBmYWlyZQpwcmllciwgdHJvdXZhbnQgbGEgZGVtYW5kZSBhYnNvbHVtZW50IG5hdHVyZWxsZSwgcHVpc3F1J2VsbGUgYXZhaXQKYWNjZXB0w6kgTWFjbG91bmUgY29tbWUgc29uIGNhdmFsaWVyIGVuIHJlY2V2YW50IHNlcyBjYWRlYXV4LgoKTWFyaWNoZXR0ZSBzZSBmaXQgYmVsbGUgcG91ciBsJ29jY2FzaW9uLiBFbGxlIG1pdCBzYSByb2JlIMOgIHJhbWFnZXMKZXQgc2VzIHNvdWxpZXJzIGZyYW7Dp2FpczsgaWwgbmUgbHVpIG1hbnF1YWl0IHBsdXMgcXUndW4gY2hhcGVhdSDDoApwbHVtZXMgY29tbWUgZW4gcG9ydGFpZW50IGxlcyBmaWxsZXMgZGUgTGFub3JhaWUsIHBvdXIgZW4gZmFpcmUgdW5lCmRlbW9pc2VsbGUgw6AgbGEgbW9kZS4gU29uIG9uY2xlLCBxdWkgbCdhdmFpdCByZWN1ZWlsbGllLCDDqXRhaXQgdW4KcGF1dnJlIGRpYWJsZSBxdWkgc2UgdHJvdXZhaXQgw6AgbGEgdMOqdGUgZCd1bmUgbm9tYnJldXNlIGZhbWlsbGUgZXQKcXVpIG5lIGRlbWFuZGFpdCBwYXMgbWlldXggcXVlIGRlIHMnZW4gZMOpYmFycmFzc2VyIGVuIGxhIG1hcmlhbnQgYXUKcHJlbWllciB2ZW51OyBldCBhdXRhbnQsIHBvdXIgbHVpLCB2YWxhaXQgTWFjbG91bmUgcXUndW4gYXV0cmUuCgpJbCBmYXV0IGF2b3VlciBxdSdpbCBzZSBwcm9kdWlzaXQgdW5lIGNlcnRhaW5lIHNlbnNhdGlvbiwgZGFucyBsZQp2aWxsYWdlLCBsb3JzcXVlIHN1ciBsZSB0cm9pc2nDqG1lIGNvdXAgZGUgbGEgZ3JhbmQnbWVzc2UgTWFjbG91bmUKYXBwYXJ1dCBkb25uYW50IGxlIGJyYXMgw6AgTWFyaWNoZXR0ZS4gVG91dCBsZSBtb25kZSBhdmFpdCB0cm9wCmQnYWZmZWN0aW9uIHBvdXIgbGUgcGF1dnJlIGdhcsOnb24gcG91ciBzZSBtb3F1ZXIgZGUgbHVpIG91dmVydGVtZW50LAptYWlzIG9uIHNlIGTDqXRvdXJuYSBsYSB0w6p0ZSBwb3VyIGNhY2hlciBkZXMgc291cmlyZXMgcXUnb24gbmUgcG91dmFpdApzdXBwcmltZXIgZW50acOocmVtZW50LgoKTGVzIGRldXggYW1vdXJldXggZW50csOocmVudCBkYW5zIGwnw6lnbGlzZSBzYW5zIHBhcmHDrnRyZSBzJ29jY3VwZXIgZGUKY2V1eCBxdWkgcydhcnLDqnRhaWVudCBwb3VyIGxlcyByZWdhcmRlciwgZXQgYWxsw6hyZW50IHNlIHBsYWNlciDDoCBsYQp0w6p0ZSBkZSBsYSBncmFuZGUgYWxsw6llIGNlbnRyYWxlLCBzdXIgZGVzIGJhbmNzIGRlIGJvaXMgcsOpc2VydsOpcyBhdXgKcGF1dnJlcyBkZSBsYSBwYXJvaXNzZS4KCkV0IGzDoCwgc2FucyB0b3VybmVyIGxhIHTDqnRlIHVuZSBzZXVsZSBmb2lzLCBldCBzYW5zIHMnb2NjdXBlciBkZQpsJ2VmZmV0IHF1J2lscyBwcm9kdWlzYWllbnQsIGlscyBlbnRlbmRpcmVudCBsYSBtZXNzZSBhdmVjIGxhIHBsdXMKZ3JhbmRlIHBpw6l0w6kuCgpJbHMgc29ydGlyZW50IGRlIG3Dqm1lIHF1J2lscyDDqXRhaWVudCBlbnRyw6lzLCBjb21tZSBzJ2lscyBldXNzZW50IMOpdMOpCnNldWxzIGF1IG1vbmRlIGV0IGlscyBzZSByZW5kaXJlbnQgdHJhbnF1aWxsZW1lbnQgw6AgcGFzIG1lc3Vyw6lzLCBjaGV6Ck1hcmllIEdhbGxpZW4gb8O5IGxlcyBhdHRlbmRhaXQgbGUgZMOubmVyIGR1IGRpbWFuY2hlLgoKLS1NYWNsb3VuZSBhIGZhaXQgdW5lICJibG9uZGUiISBNYWNsb3VuZSB2YSBzZSBtYXJpZXIhCgotLU1hY2xvdW5lIHF1aSBmcsOpcXVlbnRlIGxhIE1hcmljaGV0dGUhCgpFdCBsZXMgY29tbWVudGFpcmVzIGQnYWxsZXIgbGV1ciB0cmFpbiBwYXJtaSBsYSBmb3VsZSBxdWkgc2UgcsOpdW5pdAp0b3Vqb3VycyDDoCBsYSBmaW4gZGUgbGEgZ3JhbmQnbWVzc2UsIGRldmFudCBsJ8OpZ2xpc2UgcGFyb2lzc2lhbGUsCnBvdXIgY2F1c2VyIGRlcyDDqXbDqW5lbWVudHMgZGUgbGEgc2VtYWluZS4KCi0tQydlc3QgdW4gYnJhdmUgZXQgaG9ubsOqdGUgZ2Fyw6dvbiwgZGlzYWl0IHVuIHBldSB0b3V0IGxlIG1vbmRlLCBtYWlzCmlsIG4neSBhdmFpdCBwYXMgZGUgYm9uIHNlbnMgcG91ciB1biBzaW5nZSBjb21tZSBsdWksIGRlIHBlbnNlciBhdQptYXJpYWdlLgoKQyfDqXRhaXQgbMOgIGxlIHZlcmRpY3QgcG9wdWxhaXJlIQoKTGUgbcOpZGVjaW4gcXVpIMOpdGFpdCBjw6lsaWJhdGFpcmUgZXQgcXVpIGTDrm5haXQgY2hleiBsZSBjdXLDqSB0b3VzIGxlcwpkaW1hbmNoZXMsIGx1aSBzb3VmZmxhIHVuIG1vdCBkZSBsYSBjaG9zZSBwZW5kYW50IGxlIHJlcGFzLCBldCBpbCBmdXQKY29udmVudSBlbnRyZSBldXggcXUnaWwgZmFsbGFpdCBlbXDDqmNoZXIgY2UgbWFyaWFnZSDDoCB0b3V0IHByaXguIElscwpwZW5zYWllbnQgcXVlIGNlIHNlcmFpdCB1biBjcmltZSBkZSBwZXJtZXR0cmUgw6AgTWFjbG91bmUgbWFsYWRlLAppbmZpcm1lLCByYWNoaXRpcXVlIGV0IGRpZmZvcm1lIGNvbW1lIGlsIGwnw6l0YWl0LCBkZSBkZXZlbmlyIGxlCnDDqHJlIGQndW5lIHByb2fDqW5pdHVyZSBxdWkgc2VyYWl0IHZvdcOpZSBkJ2F2YW5jZSDDoCB1bmUgY29uZGl0aW9uCmQnaW5mw6lyaW9yaXTDqSBpbnRlbGxlY3R1ZWxsZSBldCBkZSBkw6ljcsOpcGl0dWRlIHBoeXNpcXVlLiBSaWVuIG5lCnByZXNzYWl0IGNlcGVuZGFudCBldCBpbCBzZXJhaXQgdG91am91cnMgdGVtcHMgZCdhcnLDqnRlciBsZSBtYXJpYWdlCmxvcnNxdSdvbiB2aWVuZHJhaXQgbWV0dHJlIGxlcyBiYW5zIMOgIGwnw6lnbGlzZS4KCkV0IHB1aXMhIGNlIG1hcmlhZ2U7IMOpdGFpdC1jZSBiaWVuIHPDqXJpZXV4LCBhcHLDqHMgdG91dD8KCklWCgpNYWNsb3VuZSwgcXVpIG5lIGNhdXNhaXQgZ3XDqHJlIHF1ZSBsb3JzcXUnaWwgeSDDqXRhaXQgZm9yY8OpIHBhciBzZXMKcGV0aXRlcyBhZmZhaXJlcywgaWdub3JhaXQgdG91cyBsZXMgY29tcGxvdHMgcXVlIGwnb24gdHJhbWFpdCBjb250cmUKc29uIGJvbmhldXIuIElsIHZhcXVhaXQgw6Agc2VzIG9jY3VwYXRpb25zLCBzZWxvbiBzb24gaGFiaXR1ZGUsIG1haXMKY2hhcXVlIHNvaXIsIMOgIGxhIGZhdmV1ciBkZSBsJ29ic2N1cml0w6ksIGxvcnNxdWUgdG91dCByZXBvc2FpdCBhdQp2aWxsYWdlLCBpbCBtb250YWl0IGRhbnMgc29uIGNhbm90IGV0IHRyYXZlcnNhaXQgw6AgbGEgUGV0aXRlLU1pc8OocmUsCnBvdXIgeSByZW5jb250cmVyIE1hcmljaGV0dGUgcXVpIGwnYXR0ZW5kYWl0IHN1ciBsYSBmYWxhaXNlIGFmaW4gZGUKbCdhcGVyY2V2b2lyIGRlIHBsdXMgbG9pbi4gU2kgcGF1dnJlIHF1J2lsIGbDu3QsIGlsIHRyb3V2YWl0IHRvdWpvdXJzCm1veWVuIGQnYXBwb3J0ZXIgdW4gcGV0aXQgY2FkZWF1IMOgIHNhIGJvbm5lIGFtaWU6IHVuIGJvdXQgZGUgcnViYW4sCnVuIG1vdWNob2lyIGRlIGNvdG9uLCB1biBmcnVpdCwgdW4gYm9uYm9uIHF1J29uIGx1aSBhdmFpdCBkb25uw6kgZXQKcXUnaWwgYXZhaXQgY29uc2VydsOpLCBxdWVscXVlcyBmbGV1cnMgc2F1dmFnZXMgcXUnaWwgYXZhaXQgY3VlaWxsaWVzCmRhbnMgbGVzIGNoYW1wcyBvdSBzdXIgbGVzIGJvcmRzIGRlIGxhIGdyYW5kZSByb3V0ZS4gSWwgb2ZmcmFpdCBjZWxhCmF2ZWMgdG91am91cnMgbGUgbcOqbWU6CgotLULDtGpvdSBNYcOvY2hldHRlIQoKLS1Cb25qb3VyIE1hY2xvdW5lIQoKRXQgYyfDqXRhaXQgbMOgIHRvdXRlIGxldXIgY29udmVyc2F0aW9uLiBJbHMgcydhc3NleWFpZW50IHN1ciBsZSBib3JkCmR1IGNhbm90IHF1ZSBNYWNsb3VuZSBhdmFpdCB0aXLDqSBzdXIgbGEgZ3LDqHZlIGV0IGlscyBhdHRlbmRhaWVudCBsw6AsCnF1ZWxxdWVmb2lzIHBlbmRhbnQgdW5lIGhldXJlIGVudGnDqHJlLCBqdXNxdSdhdSBtb21lbnQgb8O5IHVuZSB2b2l4IGRlCmZlbW1lIHNlIGZhaXNhaXQgZW50ZW5kcmUgZGUgbGEgbWFpc29uLgoKLS1NYXJpY2hldHRlISBvaCEgTWFyaWNoZXR0ZSEKCkMnw6l0YWl0IGxhIHRhbnRlIHF1aSBwcm9jbGFtYWl0IGwnaGV1cmUgZGUgcmVudHJlciBwb3VyIHNlIG1ldHRyZSBhdQpsaXQuCgpMZXMgZGV1eCBhbW91cmV1eCBzZSBkb25uYWllbnQgdHJpc3RlbWVudCBsYSBtYWluIGVuIHNlIHJlZ2FyZGFudApmaXhlbWVudCwgbGVzIHlldXggZGFucyBsZXMgeWV1eCBldDoKCi0tQsO0c29pIE1hw69jaGV0dGUhCgotLUJvbnNvaXIgTWFjbG91bmUhCgpFdCBNYXJpY2hldHRlIHJlbnRyYWl0IGF1IGxvZ2lzIGV0IE1hY2xvdW5lIHJldG91cm5haXQgw6AgTGFub3JhaWUuCgpMZXMgY2hvc2VzIHNlIHBhc3NhaWVudCBhaW5zaSBkZXB1aXMgcGx1cyBkJ3VuIG1vaXMsIGxvcnNxdSd1biBzb2lyCk1hY2xvdW5lIGFycml2YSBwbHVzIGpveWV1eCBxdWUgZCdoYWJpdHVkZS4KCi0tQsO0am91IE1hw69jaGV0dGUhCgotLUJvbmpvdXIgTWFjbG91bmUhCgpFdCBsZSBwYXV2cmUgaW5maXJtZSBzb3J0aXQgZGUgc29uIGdvdXNzZXQgdW5lIHBldGl0ZSBib8OudGUgZW4gY2FydG9uCmJsYW5jIGQnb8O5IGlsIHRpcmEgdW4gam9uYyBkJ29yIGJpZW4gbW9kZXN0ZSBxdSdpbCBwYXNzYSBhdSBkb2lndCBkZQpsYSBqZXVuZSBmaWxsZS4KCi0tTm91cyBhdXRyZXMsIG1hcmnDqXMgw6AgU2FpbnQtTWljaGVsLiBIZWluISBNYcOvY2hldHRlIQoKLS1PdWksIE1hY2xvdW5lISBxdWFuZCB0dSB2b3VkcmFzLgoKRXQgbGVzIGRldXggcGF1dnJlcyBkw6lzaMOpcml0w6lzIHNlIGRvbm7DqHJlbnQgdW4gYmFpc2VyIGJpZW4gY2hhc3RlCnBvdXIgc2NlbGxlciBsZXVycyBmaWFuw6dhaWxsZXMuCgpFdCBjZSBmdXQgdG91dC4KCkxlIG1hcmlhZ2Ugw6l0YW50IGTDqWNpZMOpIHBvdXIgbGEgU2FpbnQtTWljaGVsLCBpbCBuJ3kgYXZhaXQgcGx1cyBxdSfDoAptZXR0cmUgbGVzIGJhbnMgw6AgbCfDqWdsaXNlLiBMZXMgcGFyZW50cyBjb25zZW50YWllbnQgYXUgbWFyaWFnZSBldCBpbArDqXRhaXQgYmllbiBpbnV0aWxlIGRlIHZvaXIgbGUgbm90YWlyZSBwb3VyIGxlIGNvbnRyYXQsIGNhciBsZXMgZGV1eArDqXBvdXggY29tbWVuY2VyYWllbnQgbGEgdmllIGNvbW11bmUgZGFucyBsYSBtaXPDqHJlIGV0IGRhbnMgbGEKcGF1dnJldMOpLiBJbCBuZSBwb3V2YWl0IMOqdHJlIHF1ZXN0aW9uIGQnaMOpcml0YWdlLCBkZSBkb3VhaXJlIGV0IGRlCnPDqXBhcmF0aW9uIG91IGRlIGNvbW11bmF1dMOpIGRlIGJpZW5zLgoKTGUgbGVuZGVtYWluLCBzdXIgbGVzIHF1YXRyZSBoZXVyZXMgZGUgcmVsZXbDqWUsIE1hY2xvdW5lIG1pdCBzZXMKaGFiaXRzIGRlcyBkaW1hbmNoZXMgZXQgc2UgZGlyaWdlYSB2ZXJzIGxlIHByZXNieXTDqHJlIG/DuSBpbCB0cm91dmEgbGUKY3Vyw6kgcXVpIHNlIHByb21lbmFpdCBkYW5zIGxlcyBhbGzDqWVzIGRlIHNvbiBqYXJkaW4sIGVuIHLDqWNpdGFudCBzb24KYnLDqXZpYWlyZS4KCi0tQm9uam91ciBNYXhpbWUhCgpMZSBjdXLDqSBzZXVsLCBhdSB2aWxsYWdlLCBsJ2FwcGVsYWl0IGRlIHNvbiB2w6lyaXRhYmxlIHByw6lub20uCgotLULDtGpvdSBtb3NpZXVyIGN1csOpIQoKLS1KJ2FwcHJlbmRzLCBNYXhpbWUsIHF1ZSB0dSBhcyBsJ2ludGVudGlvbiBkZSB0ZSBtYXJpZXIuCgotLU91aSEgbW9zaWV1ciBjdXLDqS4KCi0tQXZlYyBNYXJpY2hldHRlIEpveWVsbGUgZGUgQ29udHJlY29ldXIhCgotLU91aSEgbW9zaWV1ciBjdXLDqS4KCi0tSWwgbid5IGZhdXQgcGFzIHBlbnNlciwgbW9uIHBhdXZyZSBNYXhpbWUuIFR1IG4nYXMgcGFzIGxlcyBtb3llbnMKZGUgZmFpcmUgdml2cmUgdW5lIGZlbW1lLiBFdCB0YSBwYXV2cmUgbcOocmUsIHF1ZSBkZXZpZW5kcmFpdC1lbGxlCnNhbnMgdG9pIHBvdXIgbHVpIGRvbm5lciBkdSBwYWluIQoKTWFjbG91bmUsIHF1aSBuJ2F2YWl0IGphbWFpcyBzb25nw6kgcXUnaWwgcMO7dCB5IGF2b2lyIGRlcyBvYmplY3Rpb25zCsOgIHNvbiBtYXJpYWdlLCByZWdhcmRhIGxlIGN1csOpIGQndW4gYWlyIGTDqXNlc3DDqXLDqSwgZGUgY2V0IGFpciBkJ3VuCmNoaWVuIGZpZMOobGUgcXVpIHNlIHZvaXQgY3J1ZWxsZW1lbnQgZnJhcHDDqSBwYXIgc29uIG1hw650cmUsIHNhbnMKY29tcHJlbmRyZSBwb3VycXVvaSBvbiBsZSBtYWx0cmFpdGUgYWluc2kuCgotLUVoIG5vbiEgbW9uIHBhdXZyZSBNYXhpbWUsIGlsIG4neSBmYXV0IHBhcyBwZW5zZXIuIFR1IGVzIGZhaWJsZSwKbWFsYWRpZi4gSWwgZmF1dCByZW1ldHRyZSBjZWxhIMOgIHBsdXMgdGFyZCwgbG9yc3F1ZSB0dSBzZXJhcyBlbiDDomdlLgoKTWFjbG91bmUsIGF0dGVycsOpLCBuZSBwb3V2YWl0IHBhcyByw6lwb25kcmUuIExlIHJlc3BlY3QgcXUnaWwgYXZhaXQKcG91ciBsZSBjdXLDqSBsJ2VuIGF1cmFpdCBlbXDDqmNow6ksIHNpIHVuIHNhbmdsb3QgcXUnaWwgbmUgcHV0CmNvbXByaW1lciBldCBxdWkgbCfDqXRyZWlnbmFpdCDDoCBsYSBnb3JnZSwgbmUgbCdldXQgbWlzIGRhbnMKbCdpbXBvc3NpYmlsaXTDqSBkZSBwcm9ub25jZXIgdW5lIHNldWxlIHBhcm9sZS4KClRvdXQgY2UgcXUnaWwgY29tcHJlbmFpdCBjJ2VzdCBxdSdvbiBhbGxhaXQgbCdlbXDDqmNoZXIgZCfDqXBvdXNlcgpNYXJpY2hldHRlIGV0IGRhbnMgc2EgbmHDr3ZlIGNyw6lkdWxpdMOpIGlsIGNvbnNpZMOpcmFpdCBsJ2FycsOqdCBjb21tZQpmYXRhbC4gSWwgamV0YSB1biBsb25nIHJlZ2FyZCBkZSByZXByb2NoZSBzdXIgY2VsdWkgcXVpIHNhY3JpZmlhaXQKYWluc2kgc29uIGJvbmhldXIsIGV0LCBzYW5zIHNvbmdlciDDoCBkaXNjdXRlciBsZSBqdWdlbWVudCBxdWkgbGUKZnJhcHBhaXQgc2kgY3J1ZWxsZW1lbnQsIGlsIHBhcnRpdCBlbiBjb3VyYW50IHZlcnMgbGEgZ3LDqHZlIHF1J2lsCnN1aXZpdCwgcG91ciByZW50cmVyIMOgIGxhIG1haXNvbiwgYWZpbiBkJ8OpY2hhcHBlciDDoCBsYSBjdXJpb3NpdMOpIGRlcwp2aWxsYWdlb2lzIHF1aSBsJ2F1cmFpZW50IHZ1IHBsZXVyZXIuIElsIHNlIGpldGEgZGFucyBsZXMgYnJhcyBkZSBzYQptw6hyZSBxdWkgbmUgY29tcHJlbmFpdCByaWVuIMOgIHNhIHBlaW5lLiBMZSBwYXV2cmUgaW5maXJtZSBzYW5nbG90YQphaW5zaSBwZW5kYW50IHVuZSBoZXVyZSBldCBhdXggcXVlc3Rpb25zIHLDqWl0w6lyw6llcyBkZSBzYSBtw6hyZSBuZSBwdXQKcXVlIHLDqXBvbmRyZToKCi0tTW9zaWV1ciBjdXLDqSB2ZXV0IHBhcyBtb2kgbWFyaWVyIE1hw69jaGV0dGUuIE1vaSBtb3VyaXIsIG1hbWFuIQoKRXQgYydlc3QgZW4gdmFpbiBxdWUgbGEgcGF1dnJlIGZlbW1lLCBkYW5zIHNvbiBsYW5nYWdlIGJhcm9xdWUsIHRlbnRhCmRlIGxlIGNvbnNvbGVyLiBFbGxlIGlyYWl0IGVsbGUtbcOqbWUgdm9pciBsZSBjdXLDqSBldCBsdWkgZXhwbGlxdWVyYWl0CmxhIGNob3NlLiBFbGxlIG5lIHZveWFpdCBwYXMgcG91cnF1b2kgb24gdm91bGFpdCBlbXDDqmNoZXIgc29uCk1hY2xvdW5lIGQnw6lwb3VzZXIgY2VsbGUgcXUnaWwgYWltYWl0LgoKVgoKTWFpcyBNYWNsb3VuZSDDqXRhaXQgaW5jb25zb2xhYmxlLiBJbCBuZSB2b3VsdXQgcmllbiBtYW5nZXIgYXUgcmVwYXMKZHUgc29pciBldCwgYXVzc2l0w7R0IGwnb2JzY3VyaXTDqSB2ZW51ZSwgaWwgcHJpdCBzb24gYXZpcm9uIGV0IHNlCmRpcmlnZWEgdmVycyBsYSBncsOodmUsIGRhbnMgbCdpbnRlbnRpb24gZGUgdHJhdmVyc2VyIMOgIGxhClBldGl0ZS1NaXPDqHJlIHBvdXIgeSB2b2lyIE1hcmljaGV0dGUuCgpTYSBtw6hyZSB0ZW50YSBkZSBsZSBkaXNzdWFkZXIgY2FyIGxlIGNpZWwgw6l0YWl0IGxvdXJkLCBsJ2FpciDDqXRhaXQKZnJvaWQgZXQgZGUgZ3JvcyBudWFnZXMgcm91bGFpZW50IMOgIGwnaG9yaXpvbi4gT24gYWxsYWl0IGF2b2lyIGRlIGxhCnBsdWllIGV0IHBldXQtw6p0cmUgZHUgZ3JvcyB2ZW50LiBNYWlzIE1hY2xvdW5lIG4nZW50ZW5kaXQgcG9pbnQsIG91CmZpdCBzZW1ibGFudCBkZSBuZSBwYXMgY29tcHJlbmRyZSBsZXMgb2JqZWN0aW9ucyBkZSBzYSBtw6hyZS4gSWwKbCdlbWJyYXNzYSB0ZW5kcmVtZW50IGVuIGxhIHNlcnJhbnQgZGFucyBzZXMgYnJhcyBldCwgc2F1dGFudCBkYW5zCnNvbiBjYW5vdCwgaWwgZGlzcGFydXQgZGFucyBsYSBudWl0IHNvbWJyZS4KCk1hcmljaGV0dGUgbCdhdHRlbmRhaXQgc3VyIGxhIHJpdmUgw6AgbCdlbmRyb2l0IG9yZGluYWlyZS4gTCdvYnNjdXJpdMOpCmwnZW1ww6pjaGEgZGUgcmVtYXJxdWVyIGxhIGZpZ3VyZSBib3VsZXZlcnPDqWUgZGUgc29uIGFtaSBldCBlbGxlCnMnYXZhbsOnYSB2ZXJzIGx1aSBhdmVjIGxhIHNhbHV0YXRpb24gYWNjb3V0dW3DqWU6CgotLUJvbmpvdXIgTWFjbG91bmUhCgotLULDtGpvdSBNYcOvY2hldHRlIQoKRXQgbGEgcHJlbmFudCBicnVzcXVlbWVudCBkYW5zIHNlcyBicmFzLCBpbCBsYSBzZXJyYSB2aW9sZW1tZW50CmNvbnRyZSBzYSBwb2l0cmluZSwgZW4gYmFsYnV0aWFudCBkZXMgcGhyYXNlcyBpbmNvaMOpcmVudGVzLAplbnRyZWNvdXDDqWVzIGRlIHNhbmdsb3RzIGTDqWNoaXJhbnRzOgoKLS1UdSBzYWlzIE1hw69jaGV0dGUuLi4gTW9zaWV1IGN1csOpIHZldXQgcGFzIG5vdXMgYXV0cmVzIG1hcmllci4uLiB0bwpwYXV2cmUsIG5vdXMgYXV0cmVzLi4uIHRvIGxhaWQsIG1vaS4uLiB0byBsYWlkLi4uIHRvIGxhaWQsIHBvdXIKbWFyaWVyIHRvaS4uLiBtb2kgdmV1eCBwbHVzIHZpdnJlLi4uIG1vaSB2ZXV4IG1vdXJpci4KCkV0IGxhIHBhdXZyZSBNYXJpY2hldHRlLCBjb21wcmVuYW50IGxlIG1hbGhldXIgdGVycmlibGUgcXVpIGxlcwpmcmFwcGFpdCwgbcOqbGEgc2VzIHBsZXVycyBhdXggcGxhaW50ZXMgZXQgYXV4IHNhbmdsb3RzIGR1IG1hbGhldXJldXgKTWFjbG91bmUuCgpFdCBpbHMgc2UgdGVuYWllbnQgZW1icmFzc8OpcyBkYW5zIGxhIG51aXQgbm9pcmUsIHNhbnMgcydvY2N1cGVyIGRlIGxhCnBsdWllIHF1aSBjb21tZW7Dp2FpdCDDoCB0b21iZXIgw6AgdG9ycmVudHMgZXQgZHUgdmVudCBmcm9pZCBkdSBub3JkIHF1aQpnw6ltaXNzYWl0IGRhbnMgbGVzIGdyYW5kcyBwZXVwbGllcnMgcXVpIGJvcmRlbnQgbGEgY8O0dGUuCgpEZXMgaGV1cmVzIGVudGnDqHJlcyBzZSBwYXNzw6hyZW50LiBMYSBwbHVpZSB0b21iYWl0IHRvdWpvdXJzOyBsZQpmbGV1dmUgYWdpdMOpIHBhciBsYSB0ZW1ww6p0ZSDDqXRhaXQgY291dmVydCBkJ8OpY3VtZSBldCBsZXMgdmFndWVzCmTDqWZlcmxhaWVudCBzdXIgbGEgZ3LDqHZlIGVuIHZlbmFudCBjb3V2cmlyLCBwYXIgaW50ZXJ2YWxsZSwgbGVzIHBpZWRzCmRlcyBhbWFudHMgcXVpIHBsZXVyYWllbnQgZXQgcXVpIGJhbGJ1dGlhaWVudCBkZXMgbGFtZW50YXRpb25zCnBsYWludGl2ZXMgZW4gc2UgdGVuYW50IGVtYnJhc3PDqXMuCgpMZXMgcGF1dnJlcyBlbmZhbnRzIMOpdGFpZW50IHRyZW1ww6lzIHBhciBsYSBwbHVpZSBmcm9pZGUsIG1haXMgaWxzCm91YmxpYWllbnQgdG91dCBkYW5zIGxldXIgZMOpc2VzcG9pci4gSWxzIG4nYXZhaWVudCBuaSBsJ2ludGVsbGlnZW5jZQpkZSBkaXNjdXRlciBsYSBzaXR1YXRpb24sIG5pIGxlIGNvdXJhZ2UgZGUgc2Vjb3VlciBsYSB0b3JwZXVyIHF1aSBsZXMKZW52YWhpc3NhaXQuCgpJbHMgcGFzc8OocmVudCBhaW5zaSBsYSBudWl0IGV0IGNlIG4nZXN0IHF1J2F1eCBwcmVtacOocmVzIGx1ZXVycyBkdQpqb3VyIHF1J2lscyBzZSBzw6lwYXLDqHJlbnQgZGFucyB1bmUgw6l0cmVpbnRlIGNvbnZ1bHNpdmUuIElscwpncmVsb3R0YWllbnQgZW4gcydlbWJyYXNzYW50LCBjYXIgbGVzIHBhdXZyZXMgaGFpbGxvbnMgcXVpIGxlcwpjb3V2cmFpZW50IGxlcyBwcm90w6lnZWFpZW50IMOgIHBlaW5lIGNvbnRyZSBsYSBiaXNlIGR1IG5vcmQgcXVpCnNvdWZmbGFpdCB0b3Vqb3VycyBlbiB0ZW1ww6p0ZS4KCsOJdGFpdC1jZSBwYXIgcHJlc3NlbnRpbWVudCBvdSBzaW1wbGVtZW50IHBhciBkw6lzZXNwb2lyIHF1J2lscyBzZQpkaXJlbnQ6CgotLUFkaWV1LCBNYWNsb3VuZSEKCi0tQWRpZXUsIE1hw69jaGV0dGUhCgpFdCBsYSBwYXV2cmV0dGUsIHRyZW1ww6llIGV0IHRyYW5zaWUganVzcXUnw6AgbGEgbW/Dq2xsZSwgY2xhcXVhbnQgZGVzCmRlbnRzLCByZW50cmEgY2hleiBzb24gb25jbGUgb8O5IGwnb24gbmUgcyfDqXRhaXQgcGFzIGFwZXLDp3UgZGUgc29uCmFic2VuY2UsIHRhbmRpcyBxdWUgTWFjbG91bmUgbGFuw6dhaXQgc29uIGNhbm90IGRhbnMgbGVzIHJvdWxpbnMgZXQgc2UKZGlyaWdlYWl0IHZlcnMgTGFub3JhaWUuIElsIGF2YWl0IHZlbnQgY29udHJhaXJlIGV0IGlsIGZhbGxhaXQgdG91dGUKc29uIGhhYmlsZXTDqSBwb3VyIGVtcMOqY2hlciBsYSBmcsOqbGUgZW1iYXJjYXRpb24gZCfDqnRyZSBzdWJtZXJnw6llIGRhbnMKbGVzIHZhZ3Vlcy4KCklsIGVuIGV1dCBiaWVuIHBvdXIgZGV1eCBoZXVyZXMgZCd1biB0cmF2YWlsIGluY2Vzc2FudCBhdmFudApkJ2F0dGVpbmRyZSBsYSByaXZlIG9wcG9zw6llLgoKU2EgbcOocmUgYXZhaXQgcGFzc8OpIGxhIG51aXQgYmxhbmNoZSDDoCBsJ2F0dGVuZHJlLCBkYW5zIHVuZSBpbnF1acOpdHVkZQptb3J0ZWxsZS4gTWFjbG91bmUgc2UgbWl0IGF1IGxpdCB0b3V0IMOpcHVpc8OpLCBncmVsb3R0YW50LCBsYSBmaWd1cmUKZW5sdW1pbsOpZSBwYXIgbGEgZmnDqHZyZTsgZXQgdG91dCBjZSBxdWUgcHV0IGZhaXJlIGxhIHBhdXZyZSBNYXJpZQpHYWxsaWVuIHBvdXIgcsOpY2hhdWZmZXIgc29uIGVuZmFudCBmdXQgaW51dGlsZS4KCkxlIGRvY3RldXIsIGFwcGVsw6kgdmVycyBsZXMgbmV1ZiBoZXVyZXMgZHUgbWF0aW4sIGTDqWNsYXJhIHF1J2lsCnNvdWZmcmFpdCBkJ3VuZSBwbGV1csOpc2llIG1vcnRlbGxlIGV0IHF1J2lsIGwnYWxsYWl0IGFwcGVsZXIgbGUKcHLDqnRyZSBhdSBwbHVzIHTDtHQuCgpMZSBib24gY3Vyw6kgYXBwb3J0YSBsZSB2aWF0aXF1ZSBhdSBtb3JpYm9uZCBxdWkgZ8OpbWlzc2FpdCBkYW5zIGxlCmTDqWxpcmUgZXQgcXVpIGJhbGJ1dGlhaXQgZGVzIHBhcm9sZXMgaW5jb21wcsOpaGVuc2libGVzLiBNYWNsb3VuZQpyZWNvbm51dCBjZXBlbmRhbnQgbGUgcHLDqnRyZSBxdWkgcHJpYWl0IMOgIHNlcyBjw7R0w6lzIGV0IGlsIGV4cGlyYQplbiBqZXRhbnQgc3VyIGx1aSB1biByZWdhcmQgZGUgZG91eCByZXByb2NoZSBldCBkJ2luZXhwcmltYWJsZQpkw6lzZXNww6lyYW5jZSBldCBlbiBtdXJtdXJhbnQgbGUgbm9tIGRlIE1hcmljaGV0dGUuCgpWSQoKVW4gbW9pcyBwbHVzIHRhcmQsIMOgIGxhIFNhaW50LU1pY2hlbCwgbGUgY29yYmlsbGFyZCBkZXMgcGF1dnJlcwpjb25kdWlzYWl0IGF1IGNpbWV0acOocmUgZGUgQ29udHJlY29ldXIgTWFyaWNoZXR0ZSBKb3llbGxlLCBtb3J0ZSBkZQpwaHRpc2llIGdhbG9wYW50ZSBjaGV6IHNvbiBvbmNsZSBkZSBsYSBQZXRpdGUtTWlzw6hyZS4KCkNlcyBkZXV4IHBhdXZyZXMgZMOpc2jDqXJpdMOpcyBkZSBsYSB2aWUsIGR1IGJvbmhldXIgZXQgZGUgbCdhbW91cgpuJ2F2YWllbnQgbcOqbWUgcGFzIGV1IGxlIHRyaXN0ZSBwcml2aWzDqGdlIGRlIHNlIHRyb3V2ZXIgcsOpdW5pcyBkYW5zCmxhIG1vcnQsIHNvdXMgbGUgbcOqbWUgdGVydHJlLCBkYW5zIHVuIGNvaW4gb2JzY3VyIGR1IG3Dqm1lIGNpbWV0acOocmUuCgoKCkxFIFDDiFJFIExPVUlTT04KCkkKCkMnw6l0YWl0IHVuIGdyYW5kIHZpZXV4IHNlYywgZHJvaXQgY29tbWUgdW5lIGZsw6hjaGUsIGNvbW1lIG9uIGRpdCBhdQpwYXlzLCBhdSB0ZWludCBiYXNhbsOpLCBldCBsYSB0w6p0ZSBldCBsYSBmaWd1cmUgY291dmVydGVzIGQndW5lCsOpcGFpc3NlIGNoZXZlbHVyZSBldCBkJ3VuZSBsb25ndWUgYmFyYmUgcG9pdnJlIGV0IHNlbC4KClRvdXMgbGVzIHZpbGxhZ2VvaXMgY29ubmFpc3NhaWVudCBsZSBww6hyZSBMb3Vpc29uLCBldCBzYSByw6lwdXRhdGlvbgpzJ8OpdGVuZGFpdCBtw6ptZSBhdXggcGFyb2lzc2VzIHZvaXNpbmVzOyBzb24gbcOpdGllciBkZSBjYW5vdGllciBldCBkZQpwYXNzZXVyIGxlIG1ldHRhaXQgZW4gcmVsYXRpb25zIGF2ZWMgdG91cyBsZXMgw6l0cmFuZ2VycyBxdWkgdm91bGFpZW50CnRyYXZlcnNlciBsZSBTYWludC1MYXVyZW50LCBsYXJnZSBlbiBjZXQgZW5kcm9pdCBkJ3VuZSBib25uZSBwZXRpdGUKbGlldWUuCgpPbiBsJ2F2YWl0IHN1cm5vbW3DqSBsZSBfR3JhbmQgVHJvbmNfLCBldCBjJ8OpdGFpdCBnw6luw6lyYWxlbWVudCBwYXIKY2Ugc29icmlxdWV0IGNvY2Fzc2UgcXUnb24gbGUgZMOpc2lnbmFpdCBsb3JzcXUnb24gZ2xvc2FpdCBzdXIgc29uCmNvbXB0ZS4gUG91cnF1b2kgbGUgX0dyYW5kIFRyb25jP18gTXlzdMOocmUhIGNhciBsZSBww6hyZSBMb3Vpc29uCm4nYXZhaXQgcmllbiBwb3VyIHJhcHBlbGVyIGNldHRlIHZvaWUgZmVycsOpZSBxdWkgcHJvdm9xdWFpdCBkZSBzaQphY3JpbW9uaWV1c2VzIGRpc2N1c3Npb25zIGRhbnMgbGVzIHLDqXVuaW9ucyBwb2xpdGlxdWVzIGRlIGwnw6lwb3F1ZS4KUXVlbHF1ZXMtdW5zIGRpc2FpZW50IHF1ZSBsZSBub20gcHJvdmVuYWl0IGRlIGxhIGxvbmd1ZXVyIGRlIHNvbgpjYW5vdCBjcmV1c8OpIHRvdXQgZCd1bmUgcGnDqGNlIGRhbnMgdW4gdHJvbmMgZCdhcmJyZSBnaWdhbnRlc3F1ZS4KClNpIHRvdXQgbGUgbW9uZGUgYXUgdmlsbGFnZSBjb25uYWlzc2FpdCBsZSBfR3JhbmQgVHJvbmNfLCBwZXJzb25uZQpuZSBwb3V2YWl0IGVuIGRpcmUgYXV0YW50IGRlIHNvbiBoaXN0b2lyZS4KCklsIMOpdGFpdCBhcnJpdsOpIMOgIEwuLi4uLCBpbCB5IGF2YWl0IGJpZW4gbG9uZ3RlbXBzLS1sZXMgYW5jaWVucwpkaXNhaWVudCBxdSdpbCB5IGF2YWl0IGF1IG1vaW5zIHZpbmd0LWNpbnEgYW5zLS1zYW5zIHRhbWJvdXIgbmkKdHJvbXBldHRlLiBJbCBhdmFpdCBhY2hldMOpIHN1ciBsZXMgYm9yZHMgZHUgU2FpbnQtTGF1cmVudCwgdG91dCBwcsOocwpkZSBsYSBncsOodmUgZXQgw6AgcXVlbHF1ZXMgYXJwZW50cyBkZSBsJ8OpZ2xpc2UsIHVuIHBldGl0IGNvaW4gZGUgdGVycmUKZ3JhbmQgY29tbWUgbGEgbWFpbiwgb8O5IGlsIGF2YWl0IGNvbnN0cnVpdCB1bmUgbWlzw6lyYWJsZSBjYWh1dGUgc3VyCmxlcyBydWluZXMgZCd1bmUgY2FiaW5lIGRlIGJhdGVhdSBxdSdpbCBhdmFpdCB0cm91dsOpZSwgdW4gYmVhdSBtYXRpbiwKw6ljaG91w6llIHN1ciB1bmUgYmF0dHVyZSB2b2lzaW5lLgoKSWwgZ2FnbmFpdCBww6luaWJsZW1lbnQgc2EgdmllIMOgIHRyYXZlcnNlciBsZXMgdm95YWdldXJzIGQndW5lIHJpdmUgw6AKbCdhdXRyZSBkdSBTYWludC1MYXVyZW50IGV0IMOgIGZhaXJlIGxhIHDDqmNoZSBkZXB1aXMgbGEgZMOpYsOiY2xlIGRlcwpnbGFjZXMganVzcXUnYXV4IGRlcm5pZXJzIGpvdXJzIGQnYXV0b21uZS4gSWwgw6l0YWl0IGNlcnRhaW4gZGUKcHJlbmRyZSBsYSBwcmVtacOocmUgYW5ndWlsbGUsIGxlIHByZW1pZXIgZG9yw6ksIGxlIHByZW1pZXIgYWNoaWdhbgpldCBsYSBwcmVtacOocmUgYWxvc2UgZGUgbGEgc2Fpc29uLiBJbCBmYWlzYWl0IGF1c3NpIGxhIGNoYXNzZSDDoApsJ291dGFyZGUsIGF1IGNhbmFyZCwgYXUgcGx1dmllciwgw6AgbCdhbG91ZXR0ZSBldCDDoCBsYSBiw6ljYXNzZSBhdmVjCnVuIGxvbmcgZnVzaWwgw6AgcGllcnJlIHF1aSBwYXJhaXNzYWl0IGRhdGVyIGR1IHLDqWdpbWUgZnJhbsOnYWlzLgoKT24gbmUgbGUgcmVuY29udHJhaXQgamFtYWlzIHNhbnMgcXUnaWwgZcO7dCwgc29pdCBzb24gYXZpcm9uLCBzb2l0IHNvbgpmdXNpbCwgc29pdCBzYSBjYW5uZSDDoCBww6pjaGUgc3VyIGwnw6lwYXVsZSBldCBpbCBhbGxhaXQgdHJhbnF1aWxsZW1lbnQKc29uIGNoZW1pbiwgcsOpcG9uZGFudCBhbWljYWxlbWVudCBkJ3VuIHNpZ25lIGRlIHTDqnRlIGF1eCBzYWx1dGF0aW9ucwphbWljYWxlcyBkZSBsYSBwbHVwYXJ0IGV0IGF1eCB0aW1pZGVzIGNvdXBzIGRlIGNoYXBlYXV4IGRlcyBlbmZhbnRzCnF1aSBsZSBjb25zaWTDqXJhaWVudCBiaWVuIHRvdXMgY29tbWUgdW4gY3JvcXVlbWl0YWluZSBxdSdpbCBmYWxsYWl0CmNyYWluZHJlIGV0IMOpdml0ZXIuCgpTaSBsJ29uIGlnbm9yYWl0IHNhIHbDqXJpdGFibGUgaGlzdG9pcmUsIG9uIG5lIHMnZW4gw6l0YWl0IHBhcyBtb2lucwpmYWl0IHVuIGRldm9pciByZWxpZ2lldXggZGUgbHVpIGVuIGJyb2RlciB1bmUsIHBsdXTDtHQgbWF1dmFpc2UgcXVlCmJvbm5lLCBjYXIgbGUgcMOocmUgTG91aXNvbiBhaW1haXQgZXQgcHJhdGlxdWFpdCB0cm9wIGxhIHNvbGl0dWRlCnBvdXIgw6p0cmUgZGV2ZW51IHBvcHVsYWlyZSBwYXJtaSBsZXMgdmlsbGFnZW9pcy4gSWwgc2UgY29udGVudGFpdApnw6luw6lyYWxlbWVudCBkJ2FsbGVyIG9mZnJpciBzYSBww6pjaGUgb3Ugc2EgY2hhc3NlIMOgIHNlcyBjbGllbnRzCm9yZGluYWlyZXM6IGxlIGN1csOpLCBsZSBkb2N0ZXVyLCBsZSBub3RhaXJlIGV0IGxlIG1hcmNoYW5kIGR1CnZpbGxhZ2UsIGV0IHNpIGxlIHBvaXNzb24gb3UgbGUgZ2liaWVyIMOpdGFpdCBleGNlcHRpb25uZWxsZW1lbnQKYWJvbmRhbnQsIGlsIGFsbGFpdCDDqWNvdWxlciBsZSBzdXJwbHVzIHN1ciBsZXMgbWFyY2jDqXMgZGUgSm9saWV0dGUsCmRlIFNvcmVsIGV0IGRlIEJlcnRoaWVyLgoKU2kgb24gc2UgcGVybWV0dGFpdCBwYXJmb2lzIGRlIGdsb3NlciBzdXIgc29uIGNvbXB0ZSwgb24gbmUgcG91dmFpdApjZXBlbmRhbnQgcGFzIGwnYWNjdXNlciBkJ2F1Y3VuIG3DqWZhaXQsIGNhciBzYSByw6lwdXRhdGlvbiBkJ2ludMOpZ3JpdMOpCsOpdGFpdCBjb25udWUgw6AgZGl4IGxpZXVlcyDDoCBsYSByb25kZS4gSWwgYXZhaXQgbcOqbWUgcmlzcXXDqSBzYSB2aWUgw6AKcGx1c2lldXJzIHJlcHJpc2VzIHBvdXIgc2F1dmVyIGRlcyBpbXBydWRlbnRzIG91IGRlcyBtYWxoZXVyZXV4IHF1aQphdmFpZW50IGZhaWxsaSBww6lyaXIgc3VyIGxlcyBlYXV4IGR1IFNhaW50LUxhdXJlbnQgZXQgaWwgcyfDqXRhaXQKbm90YW1tZW50IGNvbmR1aXQgYXZlYyBsYSBwbHVzIGdyYW5kZSBicmF2b3VyZSBwZW5kYW50IHVuZSB0ZW1ww6p0ZQpkZSBzZXJvdWV0IHF1aSBhdmFpdCBqZXTDqSB1biBncmFuZCBub21icmUgZGUgYmF0ZWF1eCDDoCBsYSBjw7R0ZSwgZW4Kdm9sYW50IMOgIGxhIHJlc2NvdXNzZSBkZXMgbmF1ZnJhZ8OpcyBhdmVjIHNvbiBncmFuZCBjYW5vdC4KCk0uIGxlIGN1csOpIGFmZmlybWFpdCBxdWUgbGUgcMOocmUgTG91aXNvbiDDqXRhaXQgdW4gYnJhdmUgaG9tbWUsIHF1aQpzJ2FjcXVpdHRhaXQgYXZlYyBsYSBwbHVzIGdyYW5kZSBwb25jdHVhbGl0w6kgZGUgc2VzIGRldm9pcnMKcmVsaWdpZXV4LiBUb3Vqb3VycyBwcsOqdCDDoCByZW5kcmUgdW4gc2VydmljZSBxdSdvbiBsdWkgZGVtYW5kYWl0LCBpbApzZSBmYWlzYWl0IHRvdXRlZm9pcyB1biBkZXZvaXIgZGUgbmUgamFtYWlzIHJpZW4gZGVtYW5kZXIgbHVpLW3Dqm1lIGV0CmMnw6l0YWl0IGzDoCBwcm9iYWJsZW1lbnQgY2UgcXUnb24gbmUgbHVpIHBhcmRvbm5haXQgcGFzLiBMZSBtb25kZSBlc3QKc2kgZHLDtGxlbWVudCBldCBzaSBjYXByaWNpZXVzZW1lbnQgw6lnb8Ovc3RlLgoKQ2hhcXVlIHNvaXIsIMOgIGxhIGJydW5hbnRlIGRlcyBsb25ncyBqb3VycyBkJ8OpdMOpLCBsZSB2aWVpbGxhcmQgYWxsYWl0Cm1vdWlsbGVyIHNvbiBjYW5vdCDDoCBkZXV4IG91IHRyb2lzIGVuY8OiYmx1cmVzIGRlIGxhIHJpdmUsIGRhbnMgdW4KZW5kcm9pdCBvw7kgaWwgdGVuZGFpdCBzb24gX3ZhcnZlYXVfIG91IHNlcyBsaWduZXMgZG9ybWFudGVzLiBBc3NpcwphdSBtaWxpZXUgZGUgc29uIGVtYmFyY2F0aW9uLCBpbCByZXN0YWl0IGzDoCBkYW5zIGxhIHBsdXMgcGFyZmFpdGUKaW1tb2JpbGl0w6kganVzcXUnw6AgdW5lIGhldXJlIGF2YW5jw6llIGRlIGxhIG51aXQuIFNhIHNpbGhvdWV0dGUgc2UKZMOpY291cGFpdCBkJ2Fib3JkLCBuZXR0ZSBldCBwcsOpY2lzZSBzdXIgbGUgbWlyb2lyIGR1IGZsZXV2ZSBlbmRvcm1pLAptYWlzIHByZW5haXQgYmllbnTDtHQgZGVzIGxpZ25lcyBpbmTDqWNpc2VzIGQndW4gdGFibGVhdSBkZSBNaWxsZXQsCmRhbnMgbCdvYnNjdXJpdMOpLCBhbG9ycyBxdWUgbCdvbiBuJ2VudGVuZGFpdCBwbHVzIHF1ZSBsZSBtdXJtdXJlIGRlcwpwZXRpdGVzIHZhZ3VlcyBwYXJlc3NldXNlcyBxdWkgdmVuYWllbnQgY2FyZXNzZXIgbGUgc2FibGUgYXJnZW50w6kgZGUKbGEgZ3LDqHZlLgoKTGEgZnJheWV1ciBpbnZvbG9udGFpcmUgcXUnaW5zcGlyYWl0IGxlIHDDqHJlIExvdWlzb24gbidleGlzdGFpdCBwYXMKc2V1bGVtZW50IGNoZXogbGVzIGVuZmFudHMsIG1haXMgcGx1cyBkJ3VuZSBmaWxsZXR0ZSBzdXBlcnN0aXRpZXVzZSwKZW4gY2F1c2FudCBhdmVjIHNvbiBhbW91cmV1eCwgc291cyBsZXMgZ3JhbmRzIHBldXBsaWVycyBxdWkgYm9yZGVudApsYSBjw7R0ZSwgYXZhaXQgc2VycsOpIGNvbnZ1bHNpdmVtZW50IGxlIGJyYXMgZGUgc29uIGNhdmFsaWVyIGVuIHZveWFudAphdSBsYXJnZSBzJ2VzdG9tcGVyIGxlIGNhbm90IGR1IHZpZXV4IHDDqmNoZXVyIGRhbnMgbGVzIGRlcm5pw6hyZXMKbHVldXJzIGNyw6lwdXNjdWxhaXJlcy4KCkJyZWYsIGxlIHBhdXZyZSB2aWV1eCDDqXRhaXQgcGx1dMO0dCBjcmFpbnQgcXUnYWltw6kgYXUgdmlsbGFnZSwgZXQgbGVzCmdhbWlucyB0cm90dGluYWllbnQgaW52b2xvbnRhaXJlbWVudCBsb3JzcXUnaWxzIGFwZXJjZXZhaWVudCBhdSBsb2luCnNhIGZpZ3VyZSB0YWNpdHVybmUuCgpJSQoKSWwgeSBhdmFpdCDDoCBMLi4uIHVuIG1hdXZhaXMgZ2FybmVtZW50LCBjb21tZSBpbCBzJ2VuIHRyb3V2ZQpkYW5zIHRvdXMgbGVzIHZpbGxhZ2VzIGR1IG1vbmRlLCBldCBjZSBnYW1pbiBkw6l0ZXN0YWl0IHRvdXQKcGFydGljdWxpw6hyZW1lbnQgbGUgcMOocmUgTG91aXNvbiBkb250IGlsIGF2YWl0IGNlcGVuZGFudCB1bmUgcGV1cgp0ZXJyaWJsZS4gTGUgdmlldXggcMOqY2hldXIgYXZhaXQgYXR0cmFww6kgbm90cmUgcG9saXNzb24gdW4gam91ciBxdWUKY2VsdWktY2kgw6l0YWl0IGUgdHJhaW4gZGUgYmF0dHJlIGNydWVsbGVtZW50IHVuIHZpZXV4IGNoaWVuIGJhcmJldApxdSdpbCBhdmFpdCBpbnV0aWxlbWVudCB0ZW50w6kgZGUgbm95ZXIuIExlIHZpZWlsbGFyZCBhdmFpdCB0b3V0CnNpbXBsZW1lbnQgdGlyw6kgbGVzIG9yZWlsbGVzIGR1IGdhbWluIGVuIGxlIG1lbmHDp2FudCBkIGZhaXJlCmNvbm5hw650cmUgc2EgY29uZHVpdGUgw6Agc2VzIHBhcmVudHMuCgpPciwgbGUgcMOocmUgZHUgZ2FtaW4gZW4gcXVlc3Rpb24gw6l0YWl0IHVuIG1hdXZhaXMgY291Y2hldXIgbm9tbcOpClJpdmV0LCBxdWkgY2hlcmNoYWl0IHBsdXTDtHQgcXUnaWwgbifDqXZpdGFpdCB1bmUgcXVlcmVsbGUsIGV0LCB1bgptYXRpbiBxdWUgbGUgcMOocmUgTG91aXNvbiByw6lwYXJhaXQgdHJhbnF1aWxsZW1lbnQgc2VzIGZpbGV0cyBkZXZhbnQKc2EgY2FiYW5lLCBpbCBzJ2VudGVuZGl0IGFwb3N0cm9waGVyOgoKLS1FaCEgZGl0ZXMgZG9uYywgdm91cyBsw6AsIGxlIF9HcmFuZCBUcm9uY18hIHF1aSBlc3QtY2UgcXVpIHZvdXMgYQpwZXJtaXMgZGUgbWV0dHJlIGxhIG1haW4gc3VyIG1vbiBnYXLDp29uPwoKVm90cmUgZ2Fyw6dvbiBiYXR0YWl0IGNydWVsbGVtZW50IHVuIGNoaWVuIHF1J2lsIG4nYXZhaXQgcHUgbm95ZXIsIGV0CmonYWkgY3J1IHZvdXMgcmVuZHJlIHNlcnZpY2UgZW4gbCdlbXDDqmNoYW50IGRlIG1hcnR5cmlzZXIgdW4gcGF1dnJlCmFuaW1hbCBxdWkgbmUgc2UgZMOpZmVuZGFpdCBtw6ptZSBwYXMuCgotLcOHYSBuJ8OpdGFpdCBwYXMgZGUgdm9zIGFmZmFpcmVzLCByw6lwb25kaXQgUml2ZXQsIGV0IGplIG5lIHNhaXMgcGFzCmNlIHF1aSBtZSByZXRpZW50IGRlIHZvdXMgZmFpcmUgcGF5ZXIgdG91dCBkZSBzdWl0ZSBsZXMgdGFwZXMgcXVlCnZvdXMgYXZleiBkb25uw6llcyDDoCBtb24gZmlscy4KCkV0IGwnaG9tbWUgw6lsZXZhaXQgbGEgdm9peCBkJ3VuIHRvbiBtZW5hw6dhbnQsIGV0IHF1ZWxxdWVzIGN1cmlldXgKcyfDqXRhaWVudCBkw6lqw6AgcsOpdW5pcyBwb3VyIHNhdm9pciBjZSBkb250IGlsIHMnYWdpc3NhaXQuCgotLVBhcmRvbiwgbW9uIGFtaSwgcsOpcG9uZGl0IGxlIHZpZWlsbGFyZCB0cmFucXVpbGxlbWVudC4gQ2UgcXVlIGonYWkKZmFpdCwgamUgbCdhaSBmYWl0IHBvdXIgYmllbiBmYWlyZSwgZXQgdm91cyBzYXZleiBkZSBwbHVzIHF1ZSBqZSBuJ2FpCmZhaXQgYXVjdW4gbWFsIMOgIHZvdHJlIGVuZmFudC4KCi0tw4dhIG5lIGZhaXQgcmllbi4gVm91cyBuJ2F2aWV6IHBhcyBsZSBkcm9pdCBkZSBsZSB0b3VjaGVyLCBldCBpbApzJ2F2YW7Dp2EgbGEgbWFpbiBoYXV0ZSBzdXIgbGUgdmlldXggcMOqY2hldXIgcXVpIGNvbnRpbnVhaXQKdHJhbnF1aWxsZW1lbnQgw6AgcmVmYWlyZSBsZXMgbWFpbGxlcyBkZSBzb24gZmlsZXQuIExlIHZpZWlsbGFyZCBsZXZhCmxlcyB5ZXV4LCBhbG9ycyBxdSdpbCDDqXRhaXQgdHJvcCB0YXJkIHBvdXIgcGFyZXIgdW4gY291cCBkZSBwb2luZyBxdWkKbCdhdHRlaWduaXQgZW4gcGxlaW5lIGZpZ3VyZSwgc2FucyBsdWkgZmFpcmUgY2VwZW5kYW50IGdyYW5kIG1hbC4KCklsIGZhbGx1dCB2b2lyIGxhIHRyYW5zZm9ybWF0aW9uIHF1aSBzJ29ww6lyYSBkYW5zIHRvdXRlIGxhCnBoeXNpb25vbWllIGR1IHDDqHJlIExvdWlzb24gw6AgY2V0IGFmZnJvbnQgYnJ1dGFsLiBJbCBzZSByZWRyZXNzYSBkZQp0b3V0ZSBzYSBoYXV0ZXVyLCByZWpldGEgdmlvbGVtbWVudCBsZSBmaWxldCBxdSdpbCB0ZW5haXQgZGVzIGRldXgKbWFpbnMsIGV0IGJvbmRpdCBjb21tZSB1bmUgcGFudGjDqHJlIHN1ciBsJ2F1ZGFjaWV1eCBxdWkgdmVuYWl0IGRlIGxlCmZyYXBwZXIgc2FucyBwcm92b2NhdGlvbi4KClNlcyB5ZXV4IGxhbsOnYWllbnQgZGVzIMOpY2xhaXJzIGRlIGNvbMOocmUsIGV0IGF2YW50IHF1J29uIGXDu3QgcHUgbCdlbgplbXDDqmNoZXIsIGlsIGF2YWl0IHNhaXNpIHNvbiBhZHZlcnNhaXJlIHBhciBsZXMgZmxhbmNzIGV0LCBsZQpzb3VsZXZhbnQgY29tbWUgaWwgYXVyYWl0IGZhaXQgZCd1biBlbmZhbnQgYXUtZGVzc3VzIGRlIHNhIHTDqnRlLCBldCDDoApsYSBsb25ndWV1ciBkZSBzZXMgbG9uZ3MgYnJhcywgaWwgbGUgbGFuw6dhIGF2ZWMgdW5lIHZpb2xlbmNlIGlub3XDr2UKc3VyIGxlIHNhYmxlIGRlIGxhIGdyw6h2ZSwgZW4gcG91c3NhbnQgdW4gbXVnaXNzZW1lbnQgZGUgYsOqdGUgZmF1dmUuCgpMZSBwYXV2cmUgZGlhYmxlLCBxdWkgYXZhaXQgcGVuc8OpIHMnYXR0YXF1ZXIgw6AgdW4gdmllaWxsYXJkIGltcG90ZW50LAp2ZW5haXQgZGUgcsOpdmVpbGxlciBsYSBjb2zDqHJlIGV0IGxhIHB1aXNzYW5jZSBkJ3VuIGhlcmN1bGUuIElsIHRvbWJhCnNhbnMgY29ubmFpc3NhbmNlLCBpbmNhcGFibGUgZGUgc2UgcmVsZXZlciBvdSBkZSBmYWlyZSBsZSBtb2luZHJlCm1vdXZlbWVudC4KCkxlIHDDqHJlIExvdWlzb24gbGUgY29uc2lkw6lyYSBwZW5kYW50IHVuIGluc3RhbnQsIHVuIHNldWwsIGV0LCBzZQpwcsOpY2lwaXRhbnQgc3VyIGx1aSwgbGUgcmFtYXNzYSBkZSBub3V2ZWF1LCBlbiBzJ2F2YW7Dp2FudCB2ZXJzIGxlcwplYXV4IGR1IGZsZXV2ZSwgbGUgdGludCB1biBpbnN0YW50IHN1c3BlbmR1IGVuIGwnYWlyIGV0IGxlIHJlamV0YQphdmVjIGZvcmNlIHN1ciBsZSBzYWJsZSBtb3VpbGzDqSBldCBkdXJjaSBwYXIgbGVzIHZhZ3Vlcy4gTGEgdmljdGltZQrDqXRhaXQgZMOpasOgIMOgIGRlbWkgbW9ydGUgZXQgcyfDqWNyYXNhIGF2ZWMgdW4gYnJ1aXQgbWF0LCBjb21tZSBjZWx1aQpkJ3VuIHNhYyBkZSBncmFpbiBxdSdvbiBsYWlzc2UgdG9tYmVyIHBhciB0ZXJyZS4KCkxlcyBzcGVjdGF0ZXVycywgcXVpIGRldmVuYWllbnQgbm9tYnJldXgsIG4nb3NhaWVudCBwYXMgaW50ZXJ2ZW5pciBldApyZWdhcmRhaWVudCB0aW1pZGVtZW50IGNldHRlIHNjw6huZSB0cmFnaXF1ZS4KCkF2YW50IG3Dqm1lIHF1J29uIGXDu3QgcHUgZmFpcmUgdW4gcGFzIHBvdXIgbCdhcnLDqnRlciwgbGUgdmlldXggcMOqY2hldXIKcyfDqXRhaXQgZW5jb3JlIHByw6ljaXBpdMOpIHN1ciBSaXZldCBldCwgY2V0dGUgZm9pcywgbGUgdGVuYW50IGF1IGJvdXQKZGUgc2VzIGJyYXMsIGlsIMOpdGFpdCBlbnRyw6kgZGFucyBsJ2VhdSwgZW4gY291cmFudCwgZGFucyBsJ2ludGVudGlvbgrDqXZpZGVudGUgZGUgbGUgbm95ZXIuCgpVbmUgY2xhbWV1ciBzJ8OpbGV2YSBwYXJtaSBsYSBmb3VsZToKCi0tSWwgdmEgbGUgbm95ZXIhIGlsIHZhIGxlIG5veWVyIQoKRXQsIGVuIGVmZmV0LCBsZSBww6hyZSBMb3Vpc29uIGF2YW7Dp2FpdCB0b3Vqb3VycyBkYW5zIGxlcyBlYXV4IHF1aSBsdWkKbW9udGFpZW50IGTDqWrDoCBqdXNxdSfDoCBsYSB0YWlsbGUuIElsIG4nYWxsYWl0IHBsdXMgc2kgdml0ZSwgbWFpcyBpbApjb250aW51YSB0b3Vqb3VycyBqdXNxdSfDoCBjZSBxdSdpbCBlbiBlw7t0IGp1c3F1J2F1eCBhaXNzZWxsZXM7CmFsb3JzLCBiYWxhbsOnYW50IGxlIHBhdXZyZSBSaXZldCBkZXV4IG91IHRyb2lzIGZvaXMgYXUtZGVzc3VzIGRlIHNhCnTDqnRlLCBpbCBsZSBwbG9uZ2VhIGRhbnMgbGUgZmxldXZlLCDDoCB1bmUgcHJvZm9uZGV1ciBvw7kgaWwgYXVyYWl0CmZhbGx1IMOqdHJlIGJvbiBuYWdldXIgcG91ciBwb3V2b2lyIHJlZ2FnbmVyIGxhIHJpdmUuCgpMZSB2aWVpbGxhcmQgcGFydXQgZW5zdWl0ZSBow6lzaXRlciB1biBpbnN0YW50LCBjb21tZSBwb3VyIGJpZW4Kcydhc3N1cmVyIHF1ZSBzYSB2aWN0aW1lIMOpdGFpdCBkaXNwYXJ1ZSBzb3VzIGxlcyBlYXV4LCBwdWlzIGlsCnJlZ2FnbmEgbGUgcml2YWdlIMOgIHBhcyBtZXN1csOpcyBldCBhbGxhIHMnZW5mZXJtZXIgZGFucyBzYSBtaXPDqXJhYmxlCmNhYmFuZSwgc2FucyBxdSdhdWN1biBkZXMgY3VyaWV1eCBxdWkgc2UgdHJvdXZhaWVudCBzdXIgc29uIHBhc3NhZ2UKZcO7dCBvc8OpIGxldmVyIGxhIG1haW4gb3UgbcOqbWUgb3V2cmlyIGxhIGJvdWNoZSBwb3VyIGRlbWFuZGVyIGdyw6JjZQpwb3VyIGxhIHZpZSBkdSBtYWxoZXVyZXV4IFJpdmV0LgoKRMOocyBxdWUgbGUgcMOocmUgTG91aXNvbiBldXQgZGlzcGFydSwgdG91cyBzZSBwcsOpY2lwaXTDqHJlbnQgY2VwZW5kYW50CnZlcnMgbGVzIGNhbm90cyBxdWkgc2UgdHJvdXZhaWVudCBsw6AsIHBvdXIgdm9sZXIgYXUgc2Vjb3VycyBkdSBub3nDqQpxdWkgbidhdmFpdCBwYXMgZW5jb3JlIHJlcGFydSDDoCBsYSBzdXJmYWNlLiBNYWlzIGwnw6ltb3Rpb24gZHUgbW9tZW50CmVtcMOqY2hhaXQgcGx1dMO0dCBxdSdlbGxlIG4nYWNjw6lsw6lyYWl0IGxlcyBtb3V2ZW1lbnRzIGRlIGNlcyBob21tZXMgZGUKYm9ubmUgdm9sb250w6ksIGV0IGxlIHBhdXZyZSBSaXZldCBhdXJhaXQgY2VydGFpbmVtZW50IHBlcmR1IGxhIHZpZSBzaQpkZXMgc2F1dmV0ZXVycyBpbmF0dGVuZHVzIG4nw6l0YWllbnQgdmVudXMgw6AgbGEgcmVzY291c3NlLgoKVW5lIF9jYWdlXyBkZXNjZW5kYWl0IGF1IGxhcmdlIGF2ZWMgbGUgY291cmFudCBldCB1biBjYW5vdCBkJ8OpY29yY2UKY29udGVuYW50IGRldXggaG9tbWVzIHMnZW4gw6l0YWl0IGTDqXRhY2jDqS4gSWwgbifDqXRhaXQgcGx1cyBxdSfDoCBkZXV4Cm91IHRyb2lzIGFycGVudHMgZHUgcml2YWdlIGxvcnNxdWUgbGUgcMOocmUgTG91aXNvbiBzJ8OpdGFpdCBhdmFuY8OpCmRhbnMgbGUgZmxldXZlIHBvdXIgeSBwcsOpY2lwaXRlciBzb24gYWdyZXNzZXVyLiBMZXMgZGV1eCBob21tZXMgZHUKY2Fub3QgYXZhaWVudCBzdWl2aSB0b3V0ZXMgbGVzIHDDqXJpcMOpdGllcyBkdSBkcmFtZSwgZXQsIGF1IG1vbWVudCBvw7kKbGUgY29ycHMgZHUgcGF1dnJlIFJpdmV0IHJlcGFyYWlzc2FpdCBzdXIgbCdlYXUgYXByw6hzIHF1ZWxxdWVzCm1pbnV0ZXMgZCdpbW1lcnNpb24sIGlscyBwdXJlbnQgbGUgc2Fpc2lyIHBhciBzZXMgaGFiaXRzIGV0IGxlCmTDqXBvc2VyIGRhbnMgbGV1ciBlbWJhcmNhdGlvbiwgYXV4IGFwcGxhdWRpc3NlbWVudHMgZGUgbGEgZm91bGUgcXVpCmdyb3NzaXNzYWl0IHRvdWpvdXJzIHN1ciBsYSByaXZlLgoKRGV1eCBjb3VwcyBkJ2F2aXJvbiB2aWdvdXJldXNlbWVudCBkb25uw6lzIHBhciBsZXMgZGV1eCB2b3lhZ2V1cnMKZmlyZW50IGF0dGVycmlyIGxlIGNhbm90IGV0IGwnb24gZMOpYmFycXVhIGxlIGNvcnBzIGluYW5pbcOpIGR1IHBhdXZyZQpSaXZldCBwb3VyIGxlIGTDqXBvc2VyIHN1ciBsYSBncsOodmUgZW4gYXR0ZW5kYW50IGwnYXJyaXbDqWUgZHUgY3Vyw6kgZXQKZHUgbcOpZGVjaW4gcXUnb24gYXZhaXQgZW52b3nDqSBjaGVyY2hlci4KCkNlIG4nw6l0YWl0IHBhcyB0cm9wIHTDtHQsIGNhciBsJ2FzcGh5eGllIMOpdGFpdCBwcmVzcXVlIGNvbXBsw6h0ZSwgZXQgaWwKZmFsbHV0IHJlY291cmlyIMOgIHRvdXMgbGVzIG1veWVucyBxdWUgcHJlc2NyaXQgbGEgc2NpZW5jZSBwb3VyIGxlcwpzZWNvdXJzIGF1eCBub3nDqXMgYWZpbiBkZSByYW1lbmVyIHVuIHNpZ25lIGRlIHZpZSBjaGV6IGxlIG1hbGhldXJldXgKUml2ZXQgZG9udCBsYSBmZW1tZSBldCBsZXMgZW5mYW50cyDDqXRhaWVudCBhY2NvdXJ1cyBzdXIgbGVzIGxpZXV4IGV0CnJlbXBsaXNzYWllbnQgbCdhaXIgZGUgbGV1cnMgbGFtZW50YXRpb25zIGV0IGRlIGxldXJzIGNyaXMgZGUKZMOpc2VzcG9pci4KCkxlIGN1csOpIGF2YWl0IHByaXMgbGEgcHLDqWNhdXRpb24gZGUgZG9ubmVyIGwnYWJzb2x1dGlvbiBfaW4KYXJ0aWN1bG8gbW9ydGlzXywgbWFpcyBsJ2hvbW1lIGRlIHNjaWVuY2UgZMOpY2xhcmEgYXZhbnQgbG9uZ3RlbXBzCnF1J2lsIHkgYXZhaXQgbGlldSBkJ2VzcMOpcmVyIGV0IGwnb24gdHJhbnNwb3J0YSBsZSBtb3JpYm9uZCBjaGV6IGx1aSwKb8O5IGlsIHJlw6d1dCBsYSB2aXNpdGUgZXQgbGVzIHNvaW5zIGVtcHJlc3PDqXMgZGUgdG91dGVzIGxlcyBjb21tw6hyZXMKZHUgdmlsbGFnZS4KCklJSQoKUydpbCDDqXRhaXQgdnJhaSBxdWUgbGUgcMOocmUgTG91aXNvbiBqb3Vpc3NhaXQgZGUgbGEgcsOpcHV0YXRpb24gZCd1bgpob21tZSBwYWlzaWJsZSBldCBpbm9mZmVuc2lmIGV0IHF1ZSBSaXZldCwgYXUgY29udHJhaXJlLCBwYXNzYWl0IHBvdXIKdW4gaG9tbWUgZ3JpbmNoZXV4IGV0IHF1ZXJlbGxldXIsIHVuZSB2ZW5nZWFuY2UgYXVzc2kgdGVycmlibGUgcG91cgp1biBzaW1wbGUgY291cCBkZSBwb2luZyBuZSBwb3V2YWl0IG1hbnF1ZXIsIG7DqWFubW9pbnMsIGRlIHByb2R1aXJlCnVuZSDDqW1vdGlvbiBnw6luw6lyYWxlIGNoZXogdG91cyBsZXMgaGFiaXRhbnRzIGRlIEwuLi4KCkxlIGN1csOpLCBsZSBub3RhaXJlLCBsZSBtw6lkZWNpbiBldCBsZXMgYXV0cmVzIG5vdGFibGVzIGRlIGwnZW5kcm9pdApzZSByw6l1bmlyZW50IGxlIG3Dqm1lIHNvaXIgY2hleiBsZSBjYXBpdGFpbmUgZGUgbWlsaWNlLCBxdWkgw6l0YWl0IGVuCm3Dqm1lIHRlbXBzIGxlIG1hZ2lzdHJhdCBkZSBsYSBwYXJvaXNzZSwgcG91ciBkw6lsaWLDqXJlciBzdXIgY2UgcXUnaWwKY29udmVuYWl0IGRlIGZhaXJlIGRhbnMgZGVzIGNpcmNvbnN0YW5jZXMgYXVzc2kgZ3JhdmVzLgoKSWwgZnV0IGTDqWNpZMOpIGRlIHRlbmlyIHVuZSBlbnF1w6p0ZSBkw6hzIGxlIGxlbmRlbWFpbiBtYXRpbiBldApkJ2FwcGVsZXIgbGUgcMOocmUgTG91aXNvbiDDoCBjb21wYXJhw650cmUgZGV2YW50IGxlIG1hZ2lzdHJhdCwgZW4KYXR0ZW5kYW50IHF1ZSBsZSBtw6lkZWNpbiBww7t0IHNlIHByb25vbmNlciBkJ3VuZSBtYW5pw6hyZSBkw6lmaW5pdGl2ZQpzdXIgbCfDqXRhdCBkdSBtYWxhZGUgcXVpIHBhcmFpc3NhaXQgcydhbcOpbGlvcmVyIGFzc2V6IHNlbnNpYmxlbWVudCwKY2VwZW5kYW50LCBwb3VyIMOpY2FydGVyIHRvdXRlIGlkw6llIGRlIG1vcnQgcHJvY2hhaW5lIG91IG3Dqm1lCnByb2JhYmxlLgoKTGUgYmFpbGxpIGR1IHZpbGxhZ2UgZnV0IGNoYXJnw6kgZCdhbGxlciBwcsOpdmVuaXIgbGUgdmlldXggcMOqY2hldXIKZCdhdm9pciDDoCBzZSBwcsOpc2VudGVyIGxlIGxlbmRlbWFpbiBtYXRpbiDDoCBuZXVmIGhldXJlcywgw6AgbGEgc2FsbGUKcHVibGlxdWUgZHUgdmlsbGFnZSwgb8O5IHNlIHRpZW5kcmFpdCBsJ2VucXXDqnRlIHByw6lsaW1pbmFpcmUgZXQgY2V0dGUKbm91dmVsbGUsIGpldMOpZSBlbiBww6J0dXJlIGF1eCBib25uZXMgZmVtbWVzLCBldXQgYmllbnTDtHQgZmFpdCBsZSB0b3VyCmR1IGZvcnQsIGNvbW1lIG9uIGRpdCBlbmNvcmUgZGFucyBub3MgY2FtcGFnbmVzLgoKTGUgcMOocmUgTG91aXNvbiBuJ2F2YWl0IHBhcyByZXBhcnUgZGVwdWlzIHF1J2lsIHMnw6l0YWl0IHJlbmZlcm3DqSBkYW5zCnNhIGNhYmFuZS4gQXVzc2kgbifDqXRhaXQtY2UgcGFzIHNhbnMgdW4gc2VudGltZW50IGRlIHRlcnJldXIgcXVlIGxlCmJhaWxsaSBzJ8OpdGFpdCBhcHByb2Now6kgcG91ciBmcmFwcGVyIMOgIHNhIHBvcnRlLCBhZmluIGRlIGx1aQpjb21tdW5pcXVlciBsZXMgb3JkcmVzIGR1IG1hZ2lzdHJhdC4KCi0tTW9uc2lldXIgTG91aXNvbiEgbW9uc2lldXIgTG91aXNvbiEgZml0LWlsLCBkJ3VuZSB2b2l4IGJhc3NlIGV0CnRyZW1ibGFudGUuCgpNYWlzIMOgIHNhIGdyYW5kZSBzdXJwcmlzZSBsYSBwb3J0ZSBzJ291dnJpdCBpbW3DqWRpYXRlbWVudCBldCBsZQp2aWVpbGxhcmQgcydhdmFuw6dhIHRyYW5xdWlsbGVtZW50OgoKLS1RdSd5IGEtdC1pbCDDoCB2b3RyZSBzZXJ2aWNlLCBKZWFuLVRob21hcz8KCi0tTW9uc2lldXIgbGUgbWFnaXN0cmF0IG0nYSBkaXQgZGUgdm91cyBpbmZvcm1lciBxdSdpbCBkw6lzaXJhaXQgdm91cwp2b2lyLCBkZW1haW4gbWF0aW4sIMOgIGxhIHNhbGxlIHB1YmxpcXVlIHBvdXIuLi4gcG91ci4uLgoKLS1UcsOocyBiaWVuLCBKZWFuLVRob21hcywgZGl0ZXMgw6AgTS4gbGUgbWFnaXN0cmF0IHF1ZSBqZSBzZXJhaSBsw6Agw6AKbCdoZXVyZSB2b3VsdWUuCgpFdCBpbCByZWZlcm1hIHRyYW5xdWlsbGVtZW50IGxhIHBvcnRlLCBjb21tZSBzaSByaWVuIGQnZXh0cmFvcmRpbmFpcmUKbifDqXRhaXQgYXJyaXbDqSBldCBjb21tZSBzJ2lsIGF2YWl0IHLDqXBvbmR1IMOgIHVuIGNsaWVudCBxdWkgbHVpIGF1cmFpdApkZW1hbmTDqSB1bmUgYnJvY2jDqWUgZCdhbmd1aWxsZXMgb3UgZGUgX2NyYXBldHNfLgoKSVYKCkxlIGxlbmRlbWFpbiwgw6AgbCdoZXVyZSBkaXRlLCBsYSBzYWxsZSBwdWJsaXF1ZSDDqXRhaXQgY29tYmxlIGV0IGxlCm3DqWRlY2luIGFubm9uw6dhIHRvdXQgZCdhYm9yZCBxdWUgUml2ZXQgY29udGludWFpdCDDoCBwcmVuZHJlIGR1IG1pZXV4LgpVbiBzb3VwaXIgZGUgc291bGFnZW1lbnQgcyfDqWNoYXBwYSBkZSB0b3V0ZXMgbGVzIHBvaXRyaW5lcyBldApsJ2VucXXDqnRlIGNvbW1lbsOnYS4KCkxlIHDDqHJlIExvdWlzb24gYXZhaXQgw6l0w6kgcG9uY3R1ZWwgw6AgbCdvcmRyZSBkdSBtYWdpc3RyYXQsIG1haXMgaWwgc2UKdGVuYWl0IGFzc2lzLCBzZXVsLCBkYW5zIHVuIGNvaW4sIHBsacOpIGVuIGRldXgsIGxlcyBjb3VkZXMgc3VyIGxlcwpnZW5vdXgsIGV0IGxhIHTDqnRlIGRhbnMgbGVzIGRldXggbWFpbnMuCgrDgCBsJ2FwcGVsIGR1IG1hZ2lzdHJhdCBxdWkgbHVpIGRlbWFuZGEgZGUgcmFjb250ZXIgbGVzIMOpdsOpbmVtZW50cyBkZQpsYSB2ZWlsbGUsIHRvdXQgZW4gbHVpIGRpc2FudCBxdSdpbCBuJ8OpdGFpdCBwYXMgZm9yY8OpIGRlCnMnaW5jcmltaW5lciwgaWwgc2UgbGV2YSB0cmFucXVpbGxlbWVudCBldCByw6ljaXRhLCBsZXMgeWV1eCBiYWlzc8OpcywKZXQgZCd1bmUgdm9peCBuYXZyYW50ZSBkZSByZWdyZXQgZXQgZGUgaG9udGUsIHRvdXQgY2UgcXVpIHMnw6l0YWl0CnBhc3PDqSwgc2FucyBlbiBvdWJsaWVyIGxlIG1vaW5kcmUgaW5jaWRlbnQuIElsIHRlcm1pbmEgcGFyIGNlcyBtb3RzOgoKLS1KZSBtZSBzdWlzIGxhaXNzw6kgZW1wb3J0ZXIgcGFyIHVuIGFjY8OocyBkZSBjb2zDqHJlIGluc3VybW9udGFibGUgZXQKamUgbWUgc3VpcyBjb21wb3J0w6kgY29tbWUgdW5lIGJydXRlIGV0IG5vbiBjb21tZSB1biBjaHLDqXRpZW4uIEplIHZvdXMKZW4gZGVtYW5kZSBwYXJkb24sIE0uIGxlIG1hZ2lzdHJhdCwgaidlbiBkZW1hbmRlIHBhcmRvbiDDoCBSaXZldCBldCDDoApzYSBmYW1pbGxlIGV0IGonZW4gZGVtYW5kZSBwYXJkb24gw6AgTU0uIGxlcyBoYWJpdGFudHMgZHUgdmlsbGFnZSBxdWkKb250IMOpdMOpIHTDqW1vaW5zIGR1IGdyYW5kIHNjYW5kYWxlIHF1ZSBqJ2FpIGNhdXPDqSBwYXIgbWEgY29sw6hyZSBldCBwYXIKbWEgYnJ1dGFsaXTDqS4gSmUgcmVtZXJjaWUgRGlldSBkJ2F2b2lyIMOpcGFyZ27DqSBsYSB2aWUgZGUgUml2ZXQsIGV0IGplCnN1aXMgcHLDqnQgw6Agc3ViaXIgbGUgY2jDonRpbWVudCBxdWUgaidhaSBtw6lyaXTDqSwKCi0tSGV1cmV1c2VtZW50IHBvdXIgdm91cywgcMOocmUgTG91aXNvbiwgcsOpcG9uZGl0IGxlIG1hZ2lzdHJhdCwgcXVlIGxhCnZpZSBkZSBSaXZldCBuJ2VzdCBwYXMgZW4gZGFuZ2VyLCBjYXIgaWwgbSdhdXJhaXQgZmFsbHUgdm91cyBlbnZveWVyCmVuIHByaXNvbi4gSWwgZmF1dCBjZXBlbmRhbnQgcXVlIHZvdHJlIGTDqXBvc2l0aW9uIHNvaXQgY29ycm9ib3LDqWUgZXQKamUgZGVtYW5kZSBhdXggdm95YWdldXJzIHF1aSBvbnQgc2F1dsOpIFJpdmV0IGRlIHJhY29udGVyIGNlIHF1J2lscwpvbnQgdnUsIGNlIHF1J2lscyBvbnQgZmFpdCBldCBjZSBxdWkgcydlc3QgcGFzc8OpIMOgIGxldXIgY29ubmFpc3NhbmNlLApwZW5kYW50IGwnYWZmYWlyZSBkJ2hpZXIuCgpMZSBwbHVzIMOiZ8OpIGRlcyB2b3lhZ2V1cnMsIHF1aSDDqXRhaXQgdW4gZW5mYW50IGRlIGxhIHBhcm9pc3NlCnJldmVuYW50IGRlIHBhc3NlciBsJ2hpdmVyIGRhbnMgbGVzIGNoYW50aWVycyBkZSBsYSBHYXRpbmVhdSwgcmFjb250YQpzaW1wbGVtZW50IGxlcyBmYWl0cyBkdSBzYXV2ZXRhZ2UgZXQgY29ycm9ib3JhIGxhIGTDqXBvc2l0aW9uIGR1IHDDqHJlCkxvdWlzb24uIFNvbiBjb21wYWdub24sIHF1aSDDqXRhaXQgYXVzc2kgdW4gaG9tbWUgZGUgbGEgc29peGFudGFpbmUsCnMnYXZhbsOnYWl0IHBvdXIgcmFjb250ZXIgc29uIGhpc3RvaXJlLCBsb3JzcXUnaWwgc2UgdHJvdXZhIGZhY2Ugw6AKZmFjZSBhdmVjIGwnYWNjdXPDqSBxdSdpbCBuJ2F2YWl0IHBhcyBlbmNvcmUgdnUuIElsIGxlIHJlZ2FyZGEgYmllbiBlbgpmYWNlLCBow6lzaXRhIHVuIGluc3RhbnQsIHB1aXMgZCd1bmUgdm9peCBvw7kgc2UgbcOqbGFpZW50IGxhIGNyYWludGUgZXQKbCfDqXRvbm5lbWVudDoKCi0tTG91aXMgVmFuZWxldCEKCkxlIHDDqHJlIExvdWlzb24gbGV2YSBsYSB0w6p0ZSBkYW5zIHVuIG1vdXZlbWVudCBpbnZvbG9udGFpcmUgZGUKdGVycmV1ciBldCByZWdhcmRhIGwnaG9tbWUgcXVpIHZlbmFpdCBkZSBwcm9ub25jZXIgY2Ugbm9tLCBpbmNvbm51CmRhbnMgbGEgcGFyb2lzc2UgZGUgTC4uLgoKTGVzIHJlZ2FyZHMgZGVzIGRldXggaG9tbWVzIHMnZW50cmVjcm9pc8OocmVudCBjb21tZSBkZXV4IGxhbWVzCmQnYWNpZXIgcXVpIHNlIGNob3F1ZW50IGRhbnMgdW4gYmF0dGVtZW50IGQnw6lww6llIHByw6lsaW1pbmFpcmUsIHB1aXMKcydhYmFpc3PDqHJlbnQgYXVzc2l0w7R0OyBldCBsZSB2aWVpbCBfaG9tbWUgZGUgY2FnZXNfIHJhY29udGEgbGUKc2F1dmV0YWdlIGF1cXVlbCBpbCBhdmFpdCBwcmlzIHBhcnQgZXQgbGUgZHJhbWUgZG9udCBpbCBhdmFpdCDDqXTDqQp0w6ltb2luLCBzYW5zIGZhaXJlIGF1Y3VuZSBhbGx1c2lvbiDDoCBjZSBub20gcXUnaWwgdmVuYWl0IGRlIGpldGVyIGVuCnDDonR1cmUgw6AgbGEgY3VyaW9zaXTDqSBwdWJsaXF1ZS4KCklsIMOpdGFpdCDDqXZpZGVudCBxdSdlbiBkw6lwaXQgZGVzIHDDqW5pYmxlcyDDqXbDqW5lbWVudHMgZGUgbGEgdmVpbGxlLApsZXMgc3ltcGF0aGllcyBkZSBsJ2F1ZGl0b2lyZSBzZSBwb3J0YWllbnQgdmVycyBsZSBww6hyZSBMb3Vpc29uLCBldApwZXJzb25uZSBuZSBmaXQgdHJvcCBhdHRlbnRpb24sIHNpIGNlIG4nZXN0IGxlIG1hZ2lzdHJhdCwgw6AgbCdfYQpwYXJ0ZV8gcXVpIHZlbmFpdCBkZSBzZSBwcm9kdWlyZSBlbnRyZSBsZSB0w6ltb2luIGV0IGwnYWNjdXPDqS4KRCdhaWxsZXVycywgb24gZXN0IG5hdHVyZWxsZW1lbnQgcG9ydMOpIMOgIGwnaW5kdWxnZW5jZSBjaGV6IG5vcwpoYWJpdGFudHMgZGUgbGEgY2FtcGFnbmUsIGV0IGwnZW5xdcOqdGUgZnV0IHByb21wdGVtZW50IHRlcm1pbsOpZSBwYXIKbGUgbWFnaXN0cmF0LCBxdWkgZW5qb2lnbml0IHNpbXBsZW1lbnQgYXUgdmlldXggcMOqY2hldXIgZGUgcmV0b3VybmVyCmNoZXogbHVpLCBkZSB2YXF1ZXIgw6Agc2VzIG9jY3VwYXRpb25zIGV0IGRlIHNlIHRlbmlyIMOgIGxhIGRpc3Bvc2l0aW9uCmRlIGxhIGp1c3RpY2UuCgpMYSBmb3VsZSBzZSBkaXNwZXJzYSBsZW50ZW1lbnQgZXQgbGUgcMOocmUgTG91aXNvbiByZXRvdXJuYSBzJ2VuZmVybWVyCmRhbnMgc2EgY2FodXRlIHBvdXIgw6ljaGFwcGVyIGF1eCByZXRhcmRzIGN1cmlldXggcXVpIGwnb2Jzw6lkYWllbnQuCgpMZSBtYWdpc3RyYXQsIGF2YW50IGRlIHMnw6lsb2lnbmVyLCBzJ2FwcHJvY2hhIGR1IGRlcm5pZXIgdMOpbW9pbiBldApsdWkgaW50aW1hIGwnb3JkcmUgZGUgdmVuaXIgbGUgdm9pciBjaGV6IGx1aSwgbGUgc29pciBtw6ptZSwgw6AgaHVpdApoZXVyZXMuIElsIHZvdWxhaXQgbHVpIGNhdXNlci4KClYKCkZpZMOobGUgYXUgcmVuZGV6LXZvdXMgcXVpIGx1aSBhdmFpdCDDqXTDqSBpbXBvc8OpLCBsZSB2aWV1eCB2b3lhZ2V1ciBzZQp0cm91dmEsIMOgIGwnaGV1cmUgZGl0ZSwgZW4gcHLDqXNlbmNlIGR1IGp1Z2UsIGR1IGN1csOpIGV0IGR1IG5vdGFpcmUKcXVpIHMnw6l0YWllbnQgcsOpdW5pcyBwb3VyIGxhIGNpcmNvbnN0YW5jZS4KCklsIHNlIGRvdXRhaXQgYmllbiB1biBwZXUgZGUgbGEgcmFpc29uIHF1aSBhdmFpdCBwcm92b3F1w6kgc2EKY29udm9jYXRpb24gZGV2YW50IGNlIHRyaWJ1bmFsIGQndW4gbm91dmVhdSBnZW5yZS4gQXVzc2kgbmUgZnV0LWlsCnBhcyBwcmlzIHBhciBzdXJwcmlzZSBsb3JzcXUnb24gbHVpIGRlbWFuZGEgw6AgYnLDu2xlLXBvdXJwb2ludDoKCi0tVm91cyBjb25uYWlzc2V6IGxlIHDDqHJlIExvdWlzb24gZGVwdWlzIGxvbmd0ZW1wcyBldCB2b3VzIGx1aSBhdmV6CmRvbm7DqSBsZSBub20gZGUgTG91aXMgVmFuZWxldCwgY2UgbWF0aW4sIMOgIGwnYXVkaWVuY2UuCgotLUMnZXN0IHZyYWksIG1vbnNpZXVyIGxlIGp1Z2UsIHLDqXBvbmRpdCBsZSB2b3lhZ2V1ciBzYW5zIGjDqXNpdGVyLgoKRGl0ZXMtbm91cyBhbG9ycywgb8O5LCBxdWFuZCBldCBjb21tZW50IHZvdXMgYXZleiBmYWl0IHNhCmNvbm5haXNzYW5jZT8KCi0tT2ghIGlsIHkgYSBsb25ndGVtcHMsIGJpZW4gbG9uZ3RlbXBzLiBDJ8OpdGFpdCBhdSB0ZW1wcyBkZSBtb24KcHJlbWllciB2b3lhZ2Ugw6AgbGEgR2F0aW5lYXUuIE5vdXMgZmFpc2lvbnMgY2hhbnRpZXIgcG91ciBsZXMgR2lsbW91cgpldCBMb3VpcyBWYW5lbGV0IGV0IG1vaSBub3VzIGLDu2NoaW9ucyBkYW5zIGxlIG3Dqm1lIGNhbXAuIEMnw6l0YWl0IHVuCmJvbiB0cmF2YWlsbGFudCwgdW4gYm9uIMOpcXVhcmlzc2V1ciBldCB1biBib24gZ2Fyw6dvbi4gVG91dCBsZSBtb25kZQphaW1haXQgc3VydG91dCDDoCBsdWkgZW50ZW5kcmUgcmFjb250ZXIgZGVzIGhpc3RvaXJlcywgbGUgc29pciwgYXV0b3VyCmRlIGxhIGNhbWJ1c2UuIFVuIGpvdXIsIHVuZSBlc2NvdWFkZSBkZSB0cmF2YWlsbGV1cnMgbm91cyBhcnJpdmEKcG91ciBwYXJ0YWdlciBub3RyZSBjaGFudGllciBldCBpbCB5IGVuIGF2YWl0IHVuIHBhcm1pIGxlcyBub3V2ZWF1eAphcnJpdmFudHMgcXVpIGNvbm5haXNzYWl0IFZhbmVsZXQgZXQgcXVpIHZlbmFpdCBkZSBsYSBtw6ptZSBwYXJvaXNzZQpxdWUgbHVpLCBhdXggZW52aXJvbnMgZGUgTW9udHLDqWFsLiBJbHMgc2Ugc2FsdcOocmVudCDDoCBwZWluZSBldAppbCDDqXRhaXQgw6l2aWRlbnQgcXUnaWwgeSBhdmFpdCBldSBncmlib3VpbGxlIGVudHJlIGV1eC4gUmllbgpkJ2V4dHJhb3JkaW5haXJlIG5lIHZpbnQgZCdhYm9yZCB0cm91YmxlciBsYSBib25uZSBlbnRlbnRlLCBqdXNxdSfDoApjZSBxdSd1biBqb3VyLCBWYW5lbGV0IHbDrm50IG1lIHRyb3V2ZXIgZXQgbWUgZGVtYW5kw6J0IGRlIGx1aSBzZXJ2aXIKZGUgdMOpbW9pbiBkYW5zIHVuZSBsdXR0ZSDDoCBjb3VwcyBkZSBwb2luZ3MgcXUnaWwgZGV2YWl0IGF2b2lyIGxlCmxlbmRlbWFpbiBhdmVjIHNvbiBjb3Bhcm9pc3NpZW4uICJOb3VzIGFpbW9ucywgbWUgZGl0LWlsLCBsYSBtw6ptZQpmaWxsZSwgYXUgcGF5cywgZXQgY29tbWUgbm91cyBuZSBwb3V2b25zIGwnw6lwb3VzZXIgdG91cyBsZXMgZGV1eCwKbm91cyB2b3Vsb25zIHLDqWdsZXIgbCdhZmZhaXJlIHBhciB1bmUgcGFydGllIGRlIGJveGUuIiBMYSBwcm9wb3NpdGlvbgptZSBwYXJ1dCBhc3NleiByYWlzb25uYWJsZSwgY2FyIG9uIHNlIGJhdCB2b2xvbnRpZXJzIGV0IHBvdXIgZGUgYmllbgpwZXRpdGVzIHJhaXNvbnMgZGFucyBsZXMgY2hhbnRpZXJzLiBKJ2FjY2VwdGFpIGRvbmMgZXQgbGUgbGVuZGVtYWluCm1hdGluLCBkZSBib25uZSBoZXVyZSwgYXZhbnQgbCdoZXVyZSBkZXMgdHJhdmF1eCwgbGVzIGFkdmVyc2FpcmVzCsOpdGFpZW50IGZhY2Ugw6AgZmFjZSBkYW5zIHVuZSBjbGFpcmnDqHJlIHZvaXNpbmUuIExhIGJhdGFpbGxlIGNvbW1lbsOnYQphc3NleiByb25kZW1lbnQsIG1haXMgw6AgcGVpbmUgbGVzIHByZW1pZXJzIGNvdXBzIGF2YWllbnQtaWxzIMOpdMOpCnBvcnTDqXMgcXVlIFZhbmVsZXQgw6l0YWl0IGFic29sdW1lbnQgaG9ycyBkZSBsdWktbcOqbWUsIGRhbnMgdW4gYWNjw6hzCmRlIGZ1cmV1ciBub2lyZS4gUGx1cyBmb3J0IGV0IHBsdXMgYWRyb2l0IHF1ZSBzb24gYWR2ZXJzYWlyZSwgaWwgbHVpCnBvcnRhaXQgZGVzIGNvdXBzIHRlcnJpYmxlcyBzb3VzIGxlc3F1ZWxzIGwnYXV0cmUgcyfDqWNyYXNhaXQgY29tbWUKc291cyBkZXMgY291cHMgZGUgbWFzc3VlLiBKJ2Vzc2F5YWkgdmFpbmVtZW50LCBhdmVjIGwnYXV0cmUgdMOpbW9pbiwKZCdpbnRlcnZlbmlyIHBvdXIgZmFpcmUgY2Vzc2VyIGxhIGx1dHRlLCBtYWlzIFZhbmVsZXQsIGZvdSBkZSByYWdlCmV0IGZvcnQgY29tbWUgdW4gdGF1cmVhdSwgZnJhcHBhaXQgdG91am91cnMganVzcXUnw6AgY2UgcXVlIHNvbgphZHZlcnNhaXJlLCBsZXMgeWV1eCBwb2Now6lzIGV0IGxhIGZpZ3VyZSBlbnNhbmdsYW50w6llLCBwZXJkw650CmNvbm5haXNzYW5jZSBldCBuZSBww7t0IHNlIHJlbGV2ZXIuIEFsb3JzIFZhbmVsZXQgbGUgc2Fpc2l0IGV0LCBsZQpiYWxhbsOnYW50IGF1IGJvdXQgZGUgc2VzIGJyYXMsIGxlIGxhbsOnYSBzdXIgbGEgbmVpZ2UgZHVyY2llIGV0IGdsYWPDqWUKcXVpIHJlY291dnJhaXQgbGUgc29sLiBMZSBwYXV2cmUgZGlhYmxlIMOpdGFpdCBzYW5zIGNvbm5haXNzYW5jZSBldCBsZQpzYW5nIGx1aSBzb3J0YWl0IHBhciBsZSBuZXogZXQgcGFyIGxlcyBvcmVpbGxlcy4gVmFuZWxldCBhbGxhaXQgZGUKbm91dmVhdSBzZSBwcsOpY2lwaXRlciBzdXIgc2EgdmljdGltZSBsb3JzcXVlIG5vdXMgbm91cyBqZXTDom1lcyBzdXIKbHVpIGV0IGMnZXN0IGF2ZWMgbGEgcGx1cyBncmFuZGUgcGVpbmUgcXVlIG5vdXMgcsOpdXNzw65tZXMgw6AgZW1ww6pjaGVyCnVuIG1ldXJ0cmUuIEphbWFpcyBqZSBuJ2F2YWlzIHZ1IHVuIGhvbW1lIGF1c3NpIGZvcnQsIGRhbnMgdW5lIGZ1cmV1cgphdXNzaSB0ZXJyaWJsZS4gSWwgc2UgY2FsbWEgY2VwZW5kYW50IGFwcsOocyBxdWVscXVlcyBpbnN0YW50cyBldApzJ2VuZnVpdCBjb21tZSB1biBmb3Ugw6AgdHJhdmVycyBsYSBmb3LDqnQuIE1vbiBjb21wYWdub24gc2UgcmVuZGl0IGF1CmNoYW50aWVyIHBvdXIgb2J0ZW5pciB1biB0cmHDrm5lYXUgYWZpbiBkZSB0cmFuc3BvcnRlciBsZSBjb3JwcwppbmFuaW3DqSBkZSBub3RyZSBjYW1hcmFkZS4gQmllbiBxdWUgbm91cyBmdXNzaW9ucyBhdSBtb2lzIGRlIGbDqXZyaWVyCmV0IGVuIHBsZWluZSBmb3LDqnQsIHRyw6hzIMOpbG9pZ27DqXMgZGUgdG91dGUgaGFiaXRhdGlvbiwgTG91aXMgVmFuZWxldApkaXNwYXJ1dCBkdSBjaGFudGllci4gSmUgbCdhaSByZXZ1IGhpZXIgcG91ciBsYSBwcmVtacOocmUgZm9pcyBkZXB1aXMKY2V0dGUgw6lwb3F1ZSBtw6ltb3JhYmxlLCBjYXIgYXVjdW4gZGUgbm91cyBuZSBzYXZhaXQgY2UgcXUnaWwgw6l0YWl0CmRldmVudS4gTGUgcGF1dnJlIGhvbW1lIHF1J2lsIGF2YWl0IHByZXNxdWUgYXNzb21tw6kgcmVzdGEgcGVuZGFudApsb25ndGVtcHMgZW50cmUgbGEgdmllIGV0IGxhIG1vcnQgZXQgbm91cyBsZSByYW1lbsOibWVzLCBhdSBwcmludGVtcHMsCmRhbnMgdW4gcGl0b3lhYmxlIMOpdGF0LCBwb3VyIGxlIHJlbnZveWVyIGRhbnMgc2EgZmFtaWxsZS4gSidhaSBhcHByaXMKZGVwdWlzIHF1J2lsIHMnw6l0YWl0IHLDqXRhYmxpIGV0IHF1J2lsIGF2YWl0IGZpbmkgcGFyIMOpcG91c2VyIGNlbGxlCnBvdXIgcXVpIGlsIGF2YWl0IGZhaWxsaSBzYWNyaWZpZXIgc2EgdmllLgoKTGUgbWFnaXN0cmF0LCBsZSBjdXLDqSBldCBsZSBub3RhaXJlLCBhcHLDqHMgYXZvaXIgw6ljb3V0w6kgYXR0ZW50aXZlbWVudApjZXR0ZSBoaXN0b2lyZSwgc2UgY29uc3VsdMOocmVudCBsb25ndWVtZW50IGV0IGZpbmlyZW50IHBhciBkw6ljaWRlcgpxdSdlbiB2dWUgZHUgY2FyYWN0w6hyZSBpcmFzY2libGUgZHUgcMOocmUgTG91aXNvbiwgZGUgc2VzIGNvbMOocmVzCnRlcnJpYmxlcyBldCBkZSBzYSBmb3JjZSBoZXJjdWzDqWVubmUsIGlsIGZhbGxhaXQgZW4gZmFpcmUgdW4gZXhlbXBsZQpldCBsZSB0cmFkdWlyZSBkZXZhbnQgbGEgQ291ciBDcmltaW5lbGxlIHF1aSBzacOpZ2VhaXQgw6AgU29yZWwuCgpMZSBiYWlsbGkgcmVjZXZyYWl0IGRlcyBpbnN0cnVjdGlvbnMgw6AgY2V0IGVmZmV0LgoKVkkKCkxvcnNxdWUgbGUgcmVwcsOpc2VudGFudCBkZSBsYSBsb2kgc2UgcmVuZGl0LCBsZSBsZW5kZW1haW4gbWF0aW4sIHBvdXIKb3DDqXJlciBsJ2FycmVzdGF0aW9uIGRlIExvdWlzIFZhbmVsZXQsIGlsIHRyb3V2YSBsYSBjYWJhbmUgdmlkZS4gTGUKdmllaWxsYXJkLCBwZW5kYW50IGxhIG51aXQsIGF2YWl0IGRpc3BhcnUgZW4gZW1wb3J0YW50IGRhbnMgc29uIGNhbm90CnNlcyBlbmdpbnMgZGUgY2hhc3NlIGV0IGRlIHDDqmNoZS4gUGVyc29ubmUgbmUgbCdhdmFpdCB2dSBwYXJ0aXIgZXQKbCdvbiBpZ25vcmFpdCBsYSBkaXJlY3Rpb24gcXUnaWwgYXZhaXQgcHJpc2UuCgpRdWVscXVlcyBqb3VycyBwbHVzIHRhcmQsIGxlIGNhcGl0YWluZSBkJ3VuIGJhdGVhdSBkZSBMLi4uIHJhY29udGFpdApxdWUsIHBlbmRhbnQgdW5lIGZvcnRlIGJvdXJyYXNxdWUgZGUgbm9yZC1lc3QsIGlsIGF2YWl0IHJlbmNvbnRyw6kgc3VyCmxlIGxhYyBTYWludC1QaWVycmUgdW4gbG9uZyBjYW5vdCBmbG90dGFudCBhdSBncsOpIGRlcyB2YWd1ZXMgZXQgZGVzCnZlbnRzLgoKSWwgYXZhaXQgY3J1IHJlY29ubmHDrnRyZSBsJ2VtYmFyY2F0aW9uIGR1IHDDqHJlIExvdWlzb24gbWFpcyBsZSBjYW5vdArDqXRhaXQgdmlkZSBldCDDoCBtb2l0acOpIHJlbXBsaSBkJ2VhdS4KRU9UOwoKICAgIC8qCiAgICBFbmQgb2YgdGhlIFByb2plY3QgR3V0ZW5iZXJnIEVCb29rIG9mIExhIGNoYXNzZSBnYWxlcmllLCBieSBIb25vcsOpIEJlYXVncmFuZAoKICAgICoqKiBFTkQgT0YgVEhJUyBQUk9KRUNUIEdVVEVOQkVSRyBFQk9PSyBMQSBDSEFTU0UgR0FMRVJJRSAqKioKCiAgICAqKioqKiBUaGlzIGZpbGUgc2hvdWxkIGJlIG5hbWVkIDE2MjEwLTgudHh0IG9yIDE2MjEwLTguemlwICoqKioqCiAgICBUaGlzIGFuZCBhbGwgYXNzb2NpYXRlZCBmaWxlcyBvZiB2YXJpb3VzIGZvcm1hdHMgd2lsbCBiZSBmb3VuZCBpbjoKICAgICAgICAgICAgaHR0cDovL3d3dy5ndXRlbmJlcmcub3JnLzEvNi8yLzEvMTYyMTAvCgogICAgVGhpcyB0ZXh0IHdhcyBhZGFwdGVkIGZyb20gdGhhdCBmb3VuZCBhdCB0aGUgQmlibGlvdGjDqHF1ZSB2aXJ0dWVsbGUuCiAgICBodHRwOi8vd3d3LmZzai51YWxiZXJ0YS5jYS9iaWJsaW8vZGVmYXVsdC5odG0KCiAgICBUaGFuayB5b3UgdG8gRG9uYWxkIElwcGVyY2llbCBhbmQgdGhlIEZhY3VsdMOpIFNhaW50LUplYW4KICAgIChVbml2ZXJzaXR5IG9mIEFsYmVydGEpIGZvciBtYWtpbmcgaXQgYXZhaWxhYmxlLgoKICAgIFVwZGF0ZWQgZWRpdGlvbnMgd2lsbCByZXBsYWNlIHRoZSBwcmV2aW91cyBvbmUtLXRoZSBvbGQgZWRpdGlvbnMKICAgIHdpbGwgYmUgcmVuYW1lZC4KCiAgICBDcmVhdGluZyB0aGUgd29ya3MgZnJvbSBwdWJsaWMgZG9tYWluIHByaW50IGVkaXRpb25zIG1lYW5zIHRoYXQgbm8KICAgIG9uZSBvd25zIGEgVW5pdGVkIFN0YXRlcyBjb3B5cmlnaHQgaW4gdGhlc2Ugd29ya3MsIHNvIHRoZSBGb3VuZGF0aW9uCiAgICAoYW5kIHlvdSEpIGNhbiBjb3B5IGFuZCBkaXN0cmlidXRlIGl0IGluIHRoZSBVbml0ZWQgU3RhdGVzIHdpdGhvdXQKICAgIHBlcm1pc3Npb24gYW5kIHdpdGhvdXQgcGF5aW5nIGNvcHlyaWdodCByb3lhbHRpZXMuICBTcGVjaWFsIHJ1bGVzLAogICAgc2V0IGZvcnRoIGluIHRoZSBHZW5lcmFsIFRlcm1zIG9mIFVzZSBwYXJ0IG9mIHRoaXMgbGljZW5zZSwgYXBwbHkgdG8KICAgIGNvcHlpbmcgYW5kIGRpc3RyaWJ1dGluZyBQcm9qZWN0IEd1dGVuYmVyZy10bSBlbGVjdHJvbmljIHdvcmtzIHRvCiAgICBwcm90ZWN0IHRoZSBQUk9KRUNUIEdVVEVOQkVSRy10bSBjb25jZXB0IGFuZCB0cmFkZW1hcmsuICBQcm9qZWN0CiAgICBHdXRlbmJlcmcgaXMgYSByZWdpc3RlcmVkIHRyYWRlbWFyaywgYW5kIG1heSBub3QgYmUgdXNlZCBpZiB5b3UKICAgIGNoYXJnZSBmb3IgdGhlIGVCb29rcywgdW5sZXNzIHlvdSByZWNlaXZlIHNwZWNpZmljIHBlcm1pc3Npb24uICBJZiB5b3UKICAgIGRvIG5vdCBjaGFyZ2UgYW55dGhpbmcgZm9yIGNvcGllcyBvZiB0aGlzIGVCb29rLCBjb21wbHlpbmcgd2l0aCB0aGUKICAgIHJ1bGVzIGlzIHZlcnkgZWFzeS4gIFlvdSBtYXkgdXNlIHRoaXMgZUJvb2sgZm9yIG5lYXJseSBhbnkgcHVycG9zZQogICAgc3VjaCBhcyBjcmVhdGlvbiBvZiBkZXJpdmF0aXZlIHdvcmtzLCByZXBvcnRzLCBwZXJmb3JtYW5jZXMgYW5kCiAgICByZXNlYXJjaC4gIFRoZXkgbWF5IGJlIG1vZGlmaWVkIGFuZCBwcmludGVkIGFuZCBnaXZlbiBhd2F5LS15b3UgbWF5IGRvCiAgICBwcmFjdGljYWxseSBBTllUSElORyB3aXRoIHB1YmxpYyBkb21haW4gZUJvb2tzLiAgUmVkaXN0cmlidXRpb24gaXMKICAgIHN1YmplY3QgdG8gdGhlIHRyYWRlbWFyayBsaWNlbnNlLCBlc3BlY2lhbGx5IGNvbW1lcmNpYWwKICAgIHJlZGlzdHJpYnV0aW9uLgoKCgogICAgKioqIFNUQVJUOiBGVUxMIExJQ0VOU0UgKioqCgogICAgVEhFIEZVTEwgUFJPSkVDVCBHVVRFTkJFUkcgTElDRU5TRQogICAgUExFQVNFIFJFQUQgVEhJUyBCRUZPUkUgWU9VIERJU1RSSUJVVEUgT1IgVVNFIFRISVMgV09SSwoKICAgIFRvIHByb3RlY3QgdGhlIFByb2plY3QgR3V0ZW5iZXJnLXRtIG1pc3Npb24gb2YgcHJvbW90aW5nIHRoZSBmcmVlCiAgICBkaXN0cmlidXRpb24gb2YgZWxlY3Ryb25pYyB3b3JrcywgYnkgdXNpbmcgb3IgZGlzdHJpYnV0aW5nIHRoaXMgd29yawogICAgKG9yIGFueSBvdGhlciB3b3JrIGFzc29jaWF0ZWQgaW4gYW55IHdheSB3aXRoIHRoZSBwaHJhc2UgIlByb2plY3QKICAgIEd1dGVuYmVyZyIpLCB5b3UgYWdyZWUgdG8gY29tcGx5IHdpdGggYWxsIHRoZSB0ZXJtcyBvZiB0aGUgRnVsbCBQcm9qZWN0CiAgICBHdXRlbmJlcmctdG0gTGljZW5zZSAoYXZhaWxhYmxlIHdpdGggdGhpcyBmaWxlIG9yIG9ubGluZSBhdAogICAgaHR0cDovL2d1dGVuYmVyZy5uZXQvbGljZW5zZSkuCgoKICAgIFNlY3Rpb24gMS4gIEdlbmVyYWwgVGVybXMgb2YgVXNlIGFuZCBSZWRpc3RyaWJ1dGluZyBQcm9qZWN0IEd1dGVuYmVyZy10bQogICAgZWxlY3Ryb25pYyB3b3JrcwoKICAgIDEuQS4gIEJ5IHJlYWRpbmcgb3IgdXNpbmcgYW55IHBhcnQgb2YgdGhpcyBQcm9qZWN0IEd1dGVuYmVyZy10bQogICAgZWxlY3Ryb25pYyB3b3JrLCB5b3UgaW5kaWNhdGUgdGhhdCB5b3UgaGF2ZSByZWFkLCB1bmRlcnN0YW5kLCBhZ3JlZSB0bwogICAgYW5kIGFjY2VwdCBhbGwgdGhlIHRlcm1zIG9mIHRoaXMgbGljZW5zZSBhbmQgaW50ZWxsZWN0dWFsIHByb3BlcnR5CiAgICAodHJhZGVtYXJrL2NvcHlyaWdodCkgYWdyZWVtZW50LiAgSWYgeW91IGRvIG5vdCBhZ3JlZSB0byBhYmlkZSBieSBhbGwKICAgIHRoZSB0ZXJtcyBvZiB0aGlzIGFncmVlbWVudCwgeW91IG11c3QgY2Vhc2UgdXNpbmcgYW5kIHJldHVybiBvciBkZXN0cm95CiAgICBhbGwgY29waWVzIG9mIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMgd29ya3MgaW4geW91ciBwb3NzZXNzaW9uLgogICAgSWYgeW91IHBhaWQgYSBmZWUgZm9yIG9idGFpbmluZyBhIGNvcHkgb2Ygb3IgYWNjZXNzIHRvIGEgUHJvamVjdAogICAgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMgd29yayBhbmQgeW91IGRvIG5vdCBhZ3JlZSB0byBiZSBib3VuZCBieSB0aGUKICAgIHRlcm1zIG9mIHRoaXMgYWdyZWVtZW50LCB5b3UgbWF5IG9idGFpbiBhIHJlZnVuZCBmcm9tIHRoZSBwZXJzb24gb3IKICAgIGVudGl0eSB0byB3aG9tIHlvdSBwYWlkIHRoZSBmZWUgYXMgc2V0IGZvcnRoIGluIHBhcmFncmFwaCAxLkUuOC4KCiAgICAxLkIuICAiUHJvamVjdCBHdXRlbmJlcmciIGlzIGEgcmVnaXN0ZXJlZCB0cmFkZW1hcmsuICBJdCBtYXkgb25seSBiZQogICAgdXNlZCBvbiBvciBhc3NvY2lhdGVkIGluIGFueSB3YXkgd2l0aCBhbiBlbGVjdHJvbmljIHdvcmsgYnkgcGVvcGxlIHdobwogICAgYWdyZWUgdG8gYmUgYm91bmQgYnkgdGhlIHRlcm1zIG9mIHRoaXMgYWdyZWVtZW50LiAgVGhlcmUgYXJlIGEgZmV3CiAgICB0aGluZ3MgdGhhdCB5b3UgY2FuIGRvIHdpdGggbW9zdCBQcm9qZWN0IEd1dGVuYmVyZy10bSBlbGVjdHJvbmljIHdvcmtzCiAgICBldmVuIHdpdGhvdXQgY29tcGx5aW5nIHdpdGggdGhlIGZ1bGwgdGVybXMgb2YgdGhpcyBhZ3JlZW1lbnQuICBTZWUKICAgIHBhcmFncmFwaCAxLkMgYmVsb3cuICBUaGVyZSBhcmUgYSBsb3Qgb2YgdGhpbmdzIHlvdSBjYW4gZG8gd2l0aCBQcm9qZWN0CiAgICBHdXRlbmJlcmctdG0gZWxlY3Ryb25pYyB3b3JrcyBpZiB5b3UgZm9sbG93IHRoZSB0ZXJtcyBvZiB0aGlzIGFncmVlbWVudAogICAgYW5kIGhlbHAgcHJlc2VydmUgZnJlZSBmdXR1cmUgYWNjZXNzIHRvIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMKICAgIHdvcmtzLiAgU2VlIHBhcmFncmFwaCAxLkUgYmVsb3cuCgogICAgMS5DLiAgVGhlIFByb2plY3QgR3V0ZW5iZXJnIExpdGVyYXJ5IEFyY2hpdmUgRm91bmRhdGlvbiAoInRoZSBGb3VuZGF0aW9uIgogICAgb3IgUEdMQUYpLCBvd25zIGEgY29tcGlsYXRpb24gY29weXJpZ2h0IGluIHRoZSBjb2xsZWN0aW9uIG9mIFByb2plY3QKICAgIEd1dGVuYmVyZy10bSBlbGVjdHJvbmljIHdvcmtzLiAgTmVhcmx5IGFsbCB0aGUgaW5kaXZpZHVhbCB3b3JrcyBpbiB0aGUKICAgIGNvbGxlY3Rpb24gYXJlIGluIHRoZSBwdWJsaWMgZG9tYWluIGluIHRoZSBVbml0ZWQgU3RhdGVzLiAgSWYgYW4KICAgIGluZGl2aWR1YWwgd29yayBpcyBpbiB0aGUgcHVibGljIGRvbWFpbiBpbiB0aGUgVW5pdGVkIFN0YXRlcyBhbmQgeW91IGFyZQogICAgbG9jYXRlZCBpbiB0aGUgVW5pdGVkIFN0YXRlcywgd2UgZG8gbm90IGNsYWltIGEgcmlnaHQgdG8gcHJldmVudCB5b3UgZnJvbQogICAgY29weWluZywgZGlzdHJpYnV0aW5nLCBwZXJmb3JtaW5nLCBkaXNwbGF5aW5nIG9yIGNyZWF0aW5nIGRlcml2YXRpdmUKICAgIHdvcmtzIGJhc2VkIG9uIHRoZSB3b3JrIGFzIGxvbmcgYXMgYWxsIHJlZmVyZW5jZXMgdG8gUHJvamVjdCBHdXRlbmJlcmcKICAgIGFyZSByZW1vdmVkLiAgT2YgY291cnNlLCB3ZSBob3BlIHRoYXQgeW91IHdpbGwgc3VwcG9ydCB0aGUgUHJvamVjdAogICAgR3V0ZW5iZXJnLXRtIG1pc3Npb24gb2YgcHJvbW90aW5nIGZyZWUgYWNjZXNzIHRvIGVsZWN0cm9uaWMgd29ya3MgYnkKICAgIGZyZWVseSBzaGFyaW5nIFByb2plY3QgR3V0ZW5iZXJnLXRtIHdvcmtzIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgdGVybXMgb2YKICAgIHRoaXMgYWdyZWVtZW50IGZvciBrZWVwaW5nIHRoZSBQcm9qZWN0IEd1dGVuYmVyZy10bSBuYW1lIGFzc29jaWF0ZWQgd2l0aAogICAgdGhlIHdvcmsuICBZb3UgY2FuIGVhc2lseSBjb21wbHkgd2l0aCB0aGUgdGVybXMgb2YgdGhpcyBhZ3JlZW1lbnQgYnkKICAgIGtlZXBpbmcgdGhpcyB3b3JrIGluIHRoZSBzYW1lIGZvcm1hdCB3aXRoIGl0cyBhdHRhY2hlZCBmdWxsIFByb2plY3QKICAgIEd1dGVuYmVyZy10bSBMaWNlbnNlIHdoZW4geW91IHNoYXJlIGl0IHdpdGhvdXQgY2hhcmdlIHdpdGggb3RoZXJzLgoKICAgIDEuRC4gIFRoZSBjb3B5cmlnaHQgbGF3cyBvZiB0aGUgcGxhY2Ugd2hlcmUgeW91IGFyZSBsb2NhdGVkIGFsc28gZ292ZXJuCiAgICB3aGF0IHlvdSBjYW4gZG8gd2l0aCB0aGlzIHdvcmsuICBDb3B5cmlnaHQgbGF3cyBpbiBtb3N0IGNvdW50cmllcyBhcmUgaW4KICAgIGEgY29uc3RhbnQgc3RhdGUgb2YgY2hhbmdlLiAgSWYgeW91IGFyZSBvdXRzaWRlIHRoZSBVbml0ZWQgU3RhdGVzLCBjaGVjawogICAgdGhlIGxhd3Mgb2YgeW91ciBjb3VudHJ5IGluIGFkZGl0aW9uIHRvIHRoZSB0ZXJtcyBvZiB0aGlzIGFncmVlbWVudAogICAgYmVmb3JlIGRvd25sb2FkaW5nLCBjb3B5aW5nLCBkaXNwbGF5aW5nLCBwZXJmb3JtaW5nLCBkaXN0cmlidXRpbmcgb3IKICAgIGNyZWF0aW5nIGRlcml2YXRpdmUgd29ya3MgYmFzZWQgb24gdGhpcyB3b3JrIG9yIGFueSBvdGhlciBQcm9qZWN0CiAgICBHdXRlbmJlcmctdG0gd29yay4gIFRoZSBGb3VuZGF0aW9uIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9ucyBjb25jZXJuaW5nCiAgICB0aGUgY29weXJpZ2h0IHN0YXR1cyBvZiBhbnkgd29yayBpbiBhbnkgY291bnRyeSBvdXRzaWRlIHRoZSBVbml0ZWQKICAgIFN0YXRlcy4KCiAgICAxLkUuICBVbmxlc3MgeW91IGhhdmUgcmVtb3ZlZCBhbGwgcmVmZXJlbmNlcyB0byBQcm9qZWN0IEd1dGVuYmVyZzoKCiAgICAxLkUuMS4gIFRoZSBmb2xsb3dpbmcgc2VudGVuY2UsIHdpdGggYWN0aXZlIGxpbmtzIHRvLCBvciBvdGhlciBpbW1lZGlhdGUKICAgIGFjY2VzcyB0bywgdGhlIGZ1bGwgUHJvamVjdCBHdXRlbmJlcmctdG0gTGljZW5zZSBtdXN0IGFwcGVhciBwcm9taW5lbnRseQogICAgd2hlbmV2ZXIgYW55IGNvcHkgb2YgYSBQcm9qZWN0IEd1dGVuYmVyZy10bSB3b3JrIChhbnkgd29yayBvbiB3aGljaCB0aGUKICAgIHBocmFzZSAiUHJvamVjdCBHdXRlbmJlcmciIGFwcGVhcnMsIG9yIHdpdGggd2hpY2ggdGhlIHBocmFzZSAiUHJvamVjdAogICAgR3V0ZW5iZXJnIiBpcyBhc3NvY2lhdGVkKSBpcyBhY2Nlc3NlZCwgZGlzcGxheWVkLCBwZXJmb3JtZWQsIHZpZXdlZCwKICAgIGNvcGllZCBvciBkaXN0cmlidXRlZDoKCiAgICBUaGlzIGVCb29rIGlzIGZvciB0aGUgdXNlIG9mIGFueW9uZSBhbnl3aGVyZSBhdCBubyBjb3N0IGFuZCB3aXRoCiAgICBhbG1vc3Qgbm8gcmVzdHJpY3Rpb25zIHdoYXRzb2V2ZXIuICBZb3UgbWF5IGNvcHkgaXQsIGdpdmUgaXQgYXdheSBvcgogICAgcmUtdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgUHJvamVjdCBHdXRlbmJlcmcgTGljZW5zZSBpbmNsdWRlZAogICAgd2l0aCB0aGlzIGVCb29rIG9yIG9ubGluZSBhdCB3d3cuZ3V0ZW5iZXJnLm5ldAoKICAgIDEuRS4yLiAgSWYgYW4gaW5kaXZpZHVhbCBQcm9qZWN0IEd1dGVuYmVyZy10bSBlbGVjdHJvbmljIHdvcmsgaXMgZGVyaXZlZAogICAgZnJvbSB0aGUgcHVibGljIGRvbWFpbiAoZG9lcyBub3QgY29udGFpbiBhIG5vdGljZSBpbmRpY2F0aW5nIHRoYXQgaXQgaXMKICAgIHBvc3RlZCB3aXRoIHBlcm1pc3Npb24gb2YgdGhlIGNvcHlyaWdodCBob2xkZXIpLCB0aGUgd29yayBjYW4gYmUgY29waWVkCiAgICBhbmQgZGlzdHJpYnV0ZWQgdG8gYW55b25lIGluIHRoZSBVbml0ZWQgU3RhdGVzIHdpdGhvdXQgcGF5aW5nIGFueSBmZWVzCiAgICBvciBjaGFyZ2VzLiAgSWYgeW91IGFyZSByZWRpc3RyaWJ1dGluZyBvciBwcm92aWRpbmcgYWNjZXNzIHRvIGEgd29yawogICAgd2l0aCB0aGUgcGhyYXNlICJQcm9qZWN0IEd1dGVuYmVyZyIgYXNzb2NpYXRlZCB3aXRoIG9yIGFwcGVhcmluZyBvbiB0aGUKICAgIHdvcmssIHlvdSBtdXN0IGNvbXBseSBlaXRoZXIgd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIHBhcmFncmFwaHMgMS5FLjEKICAgIHRocm91Z2ggMS5FLjcgb3Igb2J0YWluIHBlcm1pc3Npb24gZm9yIHRoZSB1c2Ugb2YgdGhlIHdvcmsgYW5kIHRoZQogICAgUHJvamVjdCBHdXRlbmJlcmctdG0gdHJhZGVtYXJrIGFzIHNldCBmb3J0aCBpbiBwYXJhZ3JhcGhzIDEuRS44IG9yCiAgICAxLkUuOS4KCiAgICAxLkUuMy4gIElmIGFuIGluZGl2aWR1YWwgUHJvamVjdCBHdXRlbmJlcmctdG0gZWxlY3Ryb25pYyB3b3JrIGlzIHBvc3RlZAogICAgd2l0aCB0aGUgcGVybWlzc2lvbiBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciwgeW91ciB1c2UgYW5kIGRpc3RyaWJ1dGlvbgogICAgbXVzdCBjb21wbHkgd2l0aCBib3RoIHBhcmFncmFwaHMgMS5FLjEgdGhyb3VnaCAxLkUuNyBhbmQgYW55IGFkZGl0aW9uYWwKICAgIHRlcm1zIGltcG9zZWQgYnkgdGhlIGNvcHlyaWdodCBob2xkZXIuICBBZGRpdGlvbmFsIHRlcm1zIHdpbGwgYmUgbGlua2VkCiAgICB0byB0aGUgUHJvamVjdCBHdXRlbmJlcmctdG0gTGljZW5zZSBmb3IgYWxsIHdvcmtzIHBvc3RlZCB3aXRoIHRoZQogICAgcGVybWlzc2lvbiBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBmb3VuZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgd29yay4KCiAgICAxLkUuNC4gIERvIG5vdCB1bmxpbmsgb3IgZGV0YWNoIG9yIHJlbW92ZSB0aGUgZnVsbCBQcm9qZWN0IEd1dGVuYmVyZy10bQogICAgTGljZW5zZSB0ZXJtcyBmcm9tIHRoaXMgd29yaywgb3IgYW55IGZpbGVzIGNvbnRhaW5pbmcgYSBwYXJ0IG9mIHRoaXMKICAgIHdvcmsgb3IgYW55IG90aGVyIHdvcmsgYXNzb2NpYXRlZCB3aXRoIFByb2plY3QgR3V0ZW5iZXJnLXRtLgoKICAgIDEuRS41LiAgRG8gbm90IGNvcHksIGRpc3BsYXksIHBlcmZvcm0sIGRpc3RyaWJ1dGUgb3IgcmVkaXN0cmlidXRlIHRoaXMKICAgIGVsZWN0cm9uaWMgd29yaywgb3IgYW55IHBhcnQgb2YgdGhpcyBlbGVjdHJvbmljIHdvcmssIHdpdGhvdXQKICAgIHByb21pbmVudGx5IGRpc3BsYXlpbmcgdGhlIHNlbnRlbmNlIHNldCBmb3J0aCBpbiBwYXJhZ3JhcGggMS5FLjEgd2l0aAogICAgYWN0aXZlIGxpbmtzIG9yIGltbWVkaWF0ZSBhY2Nlc3MgdG8gdGhlIGZ1bGwgdGVybXMgb2YgdGhlIFByb2plY3QKICAgIEd1dGVuYmVyZy10bSBMaWNlbnNlLgoKICAgIDEuRS42LiAgWW91IG1heSBjb252ZXJ0IHRvIGFuZCBkaXN0cmlidXRlIHRoaXMgd29yayBpbiBhbnkgYmluYXJ5LAogICAgY29tcHJlc3NlZCwgbWFya2VkIHVwLCBub25wcm9wcmlldGFyeSBvciBwcm9wcmlldGFyeSBmb3JtLCBpbmNsdWRpbmcgYW55CiAgICB3b3JkIHByb2Nlc3Npbmcgb3IgaHlwZXJ0ZXh0IGZvcm0uICBIb3dldmVyLCBpZiB5b3UgcHJvdmlkZSBhY2Nlc3MgdG8gb3IKICAgIGRpc3RyaWJ1dGUgY29waWVzIG9mIGEgUHJvamVjdCBHdXRlbmJlcmctdG0gd29yayBpbiBhIGZvcm1hdCBvdGhlciB0aGFuCiAgICAiUGxhaW4gVmFuaWxsYSBBU0NJSSIgb3Igb3RoZXIgZm9ybWF0IHVzZWQgaW4gdGhlIG9mZmljaWFsIHZlcnNpb24KICAgIHBvc3RlZCBvbiB0aGUgb2ZmaWNpYWwgUHJvamVjdCBHdXRlbmJlcmctdG0gd2ViIHNpdGUgKHd3dy5ndXRlbmJlcmcubmV0KSwKICAgIHlvdSBtdXN0LCBhdCBubyBhZGRpdGlvbmFsIGNvc3QsIGZlZSBvciBleHBlbnNlIHRvIHRoZSB1c2VyLCBwcm92aWRlIGEKICAgIGNvcHksIGEgbWVhbnMgb2YgZXhwb3J0aW5nIGEgY29weSwgb3IgYSBtZWFucyBvZiBvYnRhaW5pbmcgYSBjb3B5IHVwb24KICAgIHJlcXVlc3QsIG9mIHRoZSB3b3JrIGluIGl0cyBvcmlnaW5hbCAiUGxhaW4gVmFuaWxsYSBBU0NJSSIgb3Igb3RoZXIKICAgIGZvcm0uICBBbnkgYWx0ZXJuYXRlIGZvcm1hdCBtdXN0IGluY2x1ZGUgdGhlIGZ1bGwgUHJvamVjdCBHdXRlbmJlcmctdG0KICAgIExpY2Vuc2UgYXMgc3BlY2lmaWVkIGluIHBhcmFncmFwaCAxLkUuMS4KCiAgICAxLkUuNy4gIERvIG5vdCBjaGFyZ2UgYSBmZWUgZm9yIGFjY2VzcyB0bywgdmlld2luZywgZGlzcGxheWluZywKICAgIHBlcmZvcm1pbmcsIGNvcHlpbmcgb3IgZGlzdHJpYnV0aW5nIGFueSBQcm9qZWN0IEd1dGVuYmVyZy10bSB3b3JrcwogICAgdW5sZXNzIHlvdSBjb21wbHkgd2l0aCBwYXJhZ3JhcGggMS5FLjggb3IgMS5FLjkuCgogICAgMS5FLjguICBZb3UgbWF5IGNoYXJnZSBhIHJlYXNvbmFibGUgZmVlIGZvciBjb3BpZXMgb2Ygb3IgcHJvdmlkaW5nCiAgICBhY2Nlc3MgdG8gb3IgZGlzdHJpYnV0aW5nIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMgd29ya3MgcHJvdmlkZWQKICAgIHRoYXQKCiAgICAtIFlvdSBwYXkgYSByb3lhbHR5IGZlZSBvZiAyMCUgb2YgdGhlIGdyb3NzIHByb2ZpdHMgeW91IGRlcml2ZSBmcm9tCiAgICAgICAgIHRoZSB1c2Ugb2YgUHJvamVjdCBHdXRlbmJlcmctdG0gd29ya3MgY2FsY3VsYXRlZCB1c2luZyB0aGUgbWV0aG9kCiAgICAgICAgIHlvdSBhbHJlYWR5IHVzZSB0byBjYWxjdWxhdGUgeW91ciBhcHBsaWNhYmxlIHRheGVzLiAgVGhlIGZlZSBpcwogICAgICAgICBvd2VkIHRvIHRoZSBvd25lciBvZiB0aGUgUHJvamVjdCBHdXRlbmJlcmctdG0gdHJhZGVtYXJrLCBidXQgaGUKICAgICAgICAgaGFzIGFncmVlZCB0byBkb25hdGUgcm95YWx0aWVzIHVuZGVyIHRoaXMgcGFyYWdyYXBoIHRvIHRoZQogICAgICAgICBQcm9qZWN0IEd1dGVuYmVyZyBMaXRlcmFyeSBBcmNoaXZlIEZvdW5kYXRpb24uICBSb3lhbHR5IHBheW1lbnRzCiAgICAgICAgIG11c3QgYmUgcGFpZCB3aXRoaW4gNjAgZGF5cyBmb2xsb3dpbmcgZWFjaCBkYXRlIG9uIHdoaWNoIHlvdQogICAgICAgICBwcmVwYXJlIChvciBhcmUgbGVnYWxseSByZXF1aXJlZCB0byBwcmVwYXJlKSB5b3VyIHBlcmlvZGljIHRheAogICAgICAgICByZXR1cm5zLiAgUm95YWx0eSBwYXltZW50cyBzaG91bGQgYmUgY2xlYXJseSBtYXJrZWQgYXMgc3VjaCBhbmQKICAgICAgICAgc2VudCB0byB0aGUgUHJvamVjdCBHdXRlbmJlcmcgTGl0ZXJhcnkgQXJjaGl2ZSBGb3VuZGF0aW9uIGF0IHRoZQogICAgICAgICBhZGRyZXNzIHNwZWNpZmllZCBpbiBTZWN0aW9uIDQsICJJbmZvcm1hdGlvbiBhYm91dCBkb25hdGlvbnMgdG8KICAgICAgICAgdGhlIFByb2plY3QgR3V0ZW5iZXJnIExpdGVyYXJ5IEFyY2hpdmUgRm91bmRhdGlvbi4iCgogICAgLSBZb3UgcHJvdmlkZSBhIGZ1bGwgcmVmdW5kIG9mIGFueSBtb25leSBwYWlkIGJ5IGEgdXNlciB3aG8gbm90aWZpZXMKICAgICAgICAgeW91IGluIHdyaXRpbmcgKG9yIGJ5IGUtbWFpbCkgd2l0aGluIDMwIGRheXMgb2YgcmVjZWlwdCB0aGF0IHMvaGUKICAgICAgICAgZG9lcyBub3QgYWdyZWUgdG8gdGhlIHRlcm1zIG9mIHRoZSBmdWxsIFByb2plY3QgR3V0ZW5iZXJnLXRtCiAgICAgICAgIExpY2Vuc2UuICBZb3UgbXVzdCByZXF1aXJlIHN1Y2ggYSB1c2VyIHRvIHJldHVybiBvcgogICAgICAgICBkZXN0cm95IGFsbCBjb3BpZXMgb2YgdGhlIHdvcmtzIHBvc3Nlc3NlZCBpbiBhIHBoeXNpY2FsIG1lZGl1bQogICAgICAgICBhbmQgZGlzY29udGludWUgYWxsIHVzZSBvZiBhbmQgYWxsIGFjY2VzcyB0byBvdGhlciBjb3BpZXMgb2YKICAgICAgICAgUHJvamVjdCBHdXRlbmJlcmctdG0gd29ya3MuCgogICAgLSBZb3UgcHJvdmlkZSwgaW4gYWNjb3JkYW5jZSB3aXRoIHBhcmFncmFwaCAxLkYuMywgYSBmdWxsIHJlZnVuZCBvZiBhbnkKICAgICAgICAgbW9uZXkgcGFpZCBmb3IgYSB3b3JrIG9yIGEgcmVwbGFjZW1lbnQgY29weSwgaWYgYSBkZWZlY3QgaW4gdGhlCiAgICAgICAgIGVsZWN0cm9uaWMgd29yayBpcyBkaXNjb3ZlcmVkIGFuZCByZXBvcnRlZCB0byB5b3Ugd2l0aGluIDkwIGRheXMKICAgICAgICAgb2YgcmVjZWlwdCBvZiB0aGUgd29yay4KCiAgICAtIFlvdSBjb21wbHkgd2l0aCBhbGwgb3RoZXIgdGVybXMgb2YgdGhpcyBhZ3JlZW1lbnQgZm9yIGZyZWUKICAgICAgICAgZGlzdHJpYnV0aW9uIG9mIFByb2plY3QgR3V0ZW5iZXJnLXRtIHdvcmtzLgoKICAgIDEuRS45LiAgSWYgeW91IHdpc2ggdG8gY2hhcmdlIGEgZmVlIG9yIGRpc3RyaWJ1dGUgYSBQcm9qZWN0IEd1dGVuYmVyZy10bQogICAgZWxlY3Ryb25pYyB3b3JrIG9yIGdyb3VwIG9mIHdvcmtzIG9uIGRpZmZlcmVudCB0ZXJtcyB0aGFuIGFyZSBzZXQKICAgIGZvcnRoIGluIHRoaXMgYWdyZWVtZW50LCB5b3UgbXVzdCBvYnRhaW4gcGVybWlzc2lvbiBpbiB3cml0aW5nIGZyb20KICAgIGJvdGggdGhlIFByb2plY3QgR3V0ZW5iZXJnIExpdGVyYXJ5IEFyY2hpdmUgRm91bmRhdGlvbiBhbmQgTWljaGFlbAogICAgSGFydCwgdGhlIG93bmVyIG9mIHRoZSBQcm9qZWN0IEd1dGVuYmVyZy10bSB0cmFkZW1hcmsuICBDb250YWN0IHRoZQogICAgRm91bmRhdGlvbiBhcyBzZXQgZm9ydGggaW4gU2VjdGlvbiAzIGJlbG93LgoKICAgIDEuRi4KCiAgICAxLkYuMS4gIFByb2plY3QgR3V0ZW5iZXJnIHZvbHVudGVlcnMgYW5kIGVtcGxveWVlcyBleHBlbmQgY29uc2lkZXJhYmxlCiAgICBlZmZvcnQgdG8gaWRlbnRpZnksIGRvIGNvcHlyaWdodCByZXNlYXJjaCBvbiwgdHJhbnNjcmliZSBhbmQgcHJvb2ZyZWFkCiAgICBwdWJsaWMgZG9tYWluIHdvcmtzIGluIGNyZWF0aW5nIHRoZSBQcm9qZWN0IEd1dGVuYmVyZy10bQogICAgY29sbGVjdGlvbi4gIERlc3BpdGUgdGhlc2UgZWZmb3J0cywgUHJvamVjdCBHdXRlbmJlcmctdG0gZWxlY3Ryb25pYwogICAgd29ya3MsIGFuZCB0aGUgbWVkaXVtIG9uIHdoaWNoIHRoZXkgbWF5IGJlIHN0b3JlZCwgbWF5IGNvbnRhaW4KICAgICJEZWZlY3RzLCIgc3VjaCBhcywgYnV0IG5vdCBsaW1pdGVkIHRvLCBpbmNvbXBsZXRlLCBpbmFjY3VyYXRlIG9yCiAgICBjb3JydXB0IGRhdGEsIHRyYW5zY3JpcHRpb24gZXJyb3JzLCBhIGNvcHlyaWdodCBvciBvdGhlciBpbnRlbGxlY3R1YWwKICAgIHByb3BlcnR5IGluZnJpbmdlbWVudCwgYSBkZWZlY3RpdmUgb3IgZGFtYWdlZCBkaXNrIG9yIG90aGVyIG1lZGl1bSwgYQogICAgY29tcHV0ZXIgdmlydXMsIG9yIGNvbXB1dGVyIGNvZGVzIHRoYXQgZGFtYWdlIG9yIGNhbm5vdCBiZSByZWFkIGJ5CiAgICB5b3VyIGVxdWlwbWVudC4KCiAgICAxLkYuMi4gIExJTUlURUQgV0FSUkFOVFksIERJU0NMQUlNRVIgT0YgREFNQUdFUyAtIEV4Y2VwdCBmb3IgdGhlICJSaWdodAogICAgb2YgUmVwbGFjZW1lbnQgb3IgUmVmdW5kIiBkZXNjcmliZWQgaW4gcGFyYWdyYXBoIDEuRi4zLCB0aGUgUHJvamVjdAogICAgR3V0ZW5iZXJnIExpdGVyYXJ5IEFyY2hpdmUgRm91bmRhdGlvbiwgdGhlIG93bmVyIG9mIHRoZSBQcm9qZWN0CiAgICBHdXRlbmJlcmctdG0gdHJhZGVtYXJrLCBhbmQgYW55IG90aGVyIHBhcnR5IGRpc3RyaWJ1dGluZyBhIFByb2plY3QKICAgIEd1dGVuYmVyZy10bSBlbGVjdHJvbmljIHdvcmsgdW5kZXIgdGhpcyBhZ3JlZW1lbnQsIGRpc2NsYWltIGFsbAogICAgbGlhYmlsaXR5IHRvIHlvdSBmb3IgZGFtYWdlcywgY29zdHMgYW5kIGV4cGVuc2VzLCBpbmNsdWRpbmcgbGVnYWwKICAgIGZlZXMuICBZT1UgQUdSRUUgVEhBVCBZT1UgSEFWRSBOTyBSRU1FRElFUyBGT1IgTkVHTElHRU5DRSwgU1RSSUNUCiAgICBMSUFCSUxJVFksIEJSRUFDSCBPRiBXQVJSQU5UWSBPUiBCUkVBQ0ggT0YgQ09OVFJBQ1QgRVhDRVBUIFRIT1NFCiAgICBQUk9WSURFRCBJTiBQQVJBR1JBUEggRjMuICBZT1UgQUdSRUUgVEhBVCBUSEUgRk9VTkRBVElPTiwgVEhFCiAgICBUUkFERU1BUksgT1dORVIsIEFORCBBTlkgRElTVFJJQlVUT1IgVU5ERVIgVEhJUyBBR1JFRU1FTlQgV0lMTCBOT1QgQkUKICAgIExJQUJMRSBUTyBZT1UgRk9SIEFDVFVBTCwgRElSRUNULCBJTkRJUkVDVCwgQ09OU0VRVUVOVElBTCwgUFVOSVRJVkUgT1IKICAgIElOQ0lERU5UQUwgREFNQUdFUyBFVkVOIElGIFlPVSBHSVZFIE5PVElDRSBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSAogICAgREFNQUdFLgoKICAgIDEuRi4zLiAgTElNSVRFRCBSSUdIVCBPRiBSRVBMQUNFTUVOVCBPUiBSRUZVTkQgLSBJZiB5b3UgZGlzY292ZXIgYQogICAgZGVmZWN0IGluIHRoaXMgZWxlY3Ryb25pYyB3b3JrIHdpdGhpbiA5MCBkYXlzIG9mIHJlY2VpdmluZyBpdCwgeW91IGNhbgogICAgcmVjZWl2ZSBhIHJlZnVuZCBvZiB0aGUgbW9uZXkgKGlmIGFueSkgeW91IHBhaWQgZm9yIGl0IGJ5IHNlbmRpbmcgYQogICAgd3JpdHRlbiBleHBsYW5hdGlvbiB0byB0aGUgcGVyc29uIHlvdSByZWNlaXZlZCB0aGUgd29yayBmcm9tLiAgSWYgeW91CiAgICByZWNlaXZlZCB0aGUgd29yayBvbiBhIHBoeXNpY2FsIG1lZGl1bSwgeW91IG11c3QgcmV0dXJuIHRoZSBtZWRpdW0gd2l0aAogICAgeW91ciB3cml0dGVuIGV4cGxhbmF0aW9uLiAgVGhlIHBlcnNvbiBvciBlbnRpdHkgdGhhdCBwcm92aWRlZCB5b3Ugd2l0aAogICAgdGhlIGRlZmVjdGl2ZSB3b3JrIG1heSBlbGVjdCB0byBwcm92aWRlIGEgcmVwbGFjZW1lbnQgY29weSBpbiBsaWV1IG9mIGEKICAgIHJlZnVuZC4gIElmIHlvdSByZWNlaXZlZCB0aGUgd29yayBlbGVjdHJvbmljYWxseSwgdGhlIHBlcnNvbiBvciBlbnRpdHkKICAgIHByb3ZpZGluZyBpdCB0byB5b3UgbWF5IGNob29zZSB0byBnaXZlIHlvdSBhIHNlY29uZCBvcHBvcnR1bml0eSB0bwogICAgcmVjZWl2ZSB0aGUgd29yayBlbGVjdHJvbmljYWxseSBpbiBsaWV1IG9mIGEgcmVmdW5kLiAgSWYgdGhlIHNlY29uZCBjb3B5CiAgICBpcyBhbHNvIGRlZmVjdGl2ZSwgeW91IG1heSBkZW1hbmQgYSByZWZ1bmQgaW4gd3JpdGluZyB3aXRob3V0IGZ1cnRoZXIKICAgIG9wcG9ydHVuaXRpZXMgdG8gZml4IHRoZSBwcm9ibGVtLgoKICAgIDEuRi40LiAgRXhjZXB0IGZvciB0aGUgbGltaXRlZCByaWdodCBvZiByZXBsYWNlbWVudCBvciByZWZ1bmQgc2V0IGZvcnRoCiAgICBpbiBwYXJhZ3JhcGggMS5GLjMsIHRoaXMgd29yayBpcyBwcm92aWRlZCB0byB5b3UgJ0FTLUlTJywgV0lUSCBOTyBPVEhFUgogICAgV0FSUkFOVElFUyBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPCiAgICBXQVJSQU5USUVTIE9GIE1FUkNIQU5USUJJTElUWSBPUiBGSVRORVNTIEZPUiBBTlkgUFVSUE9TRS4KCiAgICAxLkYuNS4gIFNvbWUgc3RhdGVzIGRvIG5vdCBhbGxvdyBkaXNjbGFpbWVycyBvZiBjZXJ0YWluIGltcGxpZWQKICAgIHdhcnJhbnRpZXMgb3IgdGhlIGV4Y2x1c2lvbiBvciBsaW1pdGF0aW9uIG9mIGNlcnRhaW4gdHlwZXMgb2YgZGFtYWdlcy4KICAgIElmIGFueSBkaXNjbGFpbWVyIG9yIGxpbWl0YXRpb24gc2V0IGZvcnRoIGluIHRoaXMgYWdyZWVtZW50IHZpb2xhdGVzIHRoZQogICAgbGF3IG9mIHRoZSBzdGF0ZSBhcHBsaWNhYmxlIHRvIHRoaXMgYWdyZWVtZW50LCB0aGUgYWdyZWVtZW50IHNoYWxsIGJlCiAgICBpbnRlcnByZXRlZCB0byBtYWtlIHRoZSBtYXhpbXVtIGRpc2NsYWltZXIgb3IgbGltaXRhdGlvbiBwZXJtaXR0ZWQgYnkKICAgIHRoZSBhcHBsaWNhYmxlIHN0YXRlIGxhdy4gIFRoZSBpbnZhbGlkaXR5IG9yIHVuZW5mb3JjZWFiaWxpdHkgb2YgYW55CiAgICBwcm92aXNpb24gb2YgdGhpcyBhZ3JlZW1lbnQgc2hhbGwgbm90IHZvaWQgdGhlIHJlbWFpbmluZyBwcm92aXNpb25zLgoKICAgIDEuRi42LiAgSU5ERU1OSVRZIC0gWW91IGFncmVlIHRvIGluZGVtbmlmeSBhbmQgaG9sZCB0aGUgRm91bmRhdGlvbiwgdGhlCiAgICB0cmFkZW1hcmsgb3duZXIsIGFueSBhZ2VudCBvciBlbXBsb3llZSBvZiB0aGUgRm91bmRhdGlvbiwgYW55b25lCiAgICBwcm92aWRpbmcgY29waWVzIG9mIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMgd29ya3MgaW4gYWNjb3JkYW5jZQogICAgd2l0aCB0aGlzIGFncmVlbWVudCwgYW5kIGFueSB2b2x1bnRlZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvZHVjdGlvbiwKICAgIHByb21vdGlvbiBhbmQgZGlzdHJpYnV0aW9uIG9mIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMgd29ya3MsCiAgICBoYXJtbGVzcyBmcm9tIGFsbCBsaWFiaWxpdHksIGNvc3RzIGFuZCBleHBlbnNlcywgaW5jbHVkaW5nIGxlZ2FsIGZlZXMsCiAgICB0aGF0IGFyaXNlIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgZnJvbSBhbnkgb2YgdGhlIGZvbGxvd2luZyB3aGljaCB5b3UgZG8KICAgIG9yIGNhdXNlIHRvIG9jY3VyOiAoYSkgZGlzdHJpYnV0aW9uIG9mIHRoaXMgb3IgYW55IFByb2plY3QgR3V0ZW5iZXJnLXRtCiAgICB3b3JrLCAoYikgYWx0ZXJhdGlvbiwgbW9kaWZpY2F0aW9uLCBvciBhZGRpdGlvbnMgb3IgZGVsZXRpb25zIHRvIGFueQogICAgUHJvamVjdCBHdXRlbmJlcmctdG0gd29yaywgYW5kIChjKSBhbnkgRGVmZWN0IHlvdSBjYXVzZS4KCgogICAgU2VjdGlvbiAgMi4gIEluZm9ybWF0aW9uIGFib3V0IHRoZSBNaXNzaW9uIG9mIFByb2plY3QgR3V0ZW5iZXJnLXRtCgogICAgUHJvamVjdCBHdXRlbmJlcmctdG0gaXMgc3lub255bW91cyB3aXRoIHRoZSBmcmVlIGRpc3RyaWJ1dGlvbiBvZgogICAgZWxlY3Ryb25pYyB3b3JrcyBpbiBmb3JtYXRzIHJlYWRhYmxlIGJ5IHRoZSB3aWRlc3QgdmFyaWV0eSBvZiBjb21wdXRlcnMKICAgIGluY2x1ZGluZyBvYnNvbGV0ZSwgb2xkLCBtaWRkbGUtYWdlZCBhbmQgbmV3IGNvbXB1dGVycy4gIEl0IGV4aXN0cwogICAgYmVjYXVzZSBvZiB0aGUgZWZmb3J0cyBvZiBodW5kcmVkcyBvZiB2b2x1bnRlZXJzIGFuZCBkb25hdGlvbnMgZnJvbQogICAgcGVvcGxlIGluIGFsbCB3YWxrcyBvZiBsaWZlLgoKICAgIFZvbHVudGVlcnMgYW5kIGZpbmFuY2lhbCBzdXBwb3J0IHRvIHByb3ZpZGUgdm9sdW50ZWVycyB3aXRoIHRoZQogICAgYXNzaXN0YW5jZSB0aGV5IG5lZWQsIGlzIGNyaXRpY2FsIHRvIHJlYWNoaW5nIFByb2plY3QgR3V0ZW5iZXJnLXRtJ3MKICAgIGdvYWxzIGFuZCBlbnN1cmluZyB0aGF0IHRoZSBQcm9qZWN0IEd1dGVuYmVyZy10bSBjb2xsZWN0aW9uIHdpbGwKICAgIHJlbWFpbiBmcmVlbHkgYXZhaWxhYmxlIGZvciBnZW5lcmF0aW9ucyB0byBjb21lLiAgSW4gMjAwMSwgdGhlIFByb2plY3QKICAgIEd1dGVuYmVyZyBMaXRlcmFyeSBBcmNoaXZlIEZvdW5kYXRpb24gd2FzIGNyZWF0ZWQgdG8gcHJvdmlkZSBhIHNlY3VyZQogICAgYW5kIHBlcm1hbmVudCBmdXR1cmUgZm9yIFByb2plY3QgR3V0ZW5iZXJnLXRtIGFuZCBmdXR1cmUgZ2VuZXJhdGlvbnMuCiAgICBUbyBsZWFybiBtb3JlIGFib3V0IHRoZSBQcm9qZWN0IEd1dGVuYmVyZyBMaXRlcmFyeSBBcmNoaXZlIEZvdW5kYXRpb24KICAgIGFuZCBob3cgeW91ciBlZmZvcnRzIGFuZCBkb25hdGlvbnMgY2FuIGhlbHAsIHNlZSBTZWN0aW9ucyAzIGFuZCA0CiAgICBhbmQgdGhlIEZvdW5kYXRpb24gd2ViIHBhZ2UgYXQgaHR0cDovL3d3dy5wZ2xhZi5vcmcuCgoKICAgIFNlY3Rpb24gMy4gIEluZm9ybWF0aW9uIGFib3V0IHRoZSBQcm9qZWN0IEd1dGVuYmVyZyBMaXRlcmFyeSBBcmNoaXZlCiAgICBGb3VuZGF0aW9uCgogICAgVGhlIFByb2plY3QgR3V0ZW5iZXJnIExpdGVyYXJ5IEFyY2hpdmUgRm91bmRhdGlvbiBpcyBhIG5vbiBwcm9maXQKICAgIDUwMShjKSgzKSBlZHVjYXRpb25hbCBjb3Jwb3JhdGlvbiBvcmdhbml6ZWQgdW5kZXIgdGhlIGxhd3Mgb2YgdGhlCiAgICBzdGF0ZSBvZiBNaXNzaXNzaXBwaSBhbmQgZ3JhbnRlZCB0YXggZXhlbXB0IHN0YXR1cyBieSB0aGUgSW50ZXJuYWwKICAgIFJldmVudWUgU2VydmljZS4gIFRoZSBGb3VuZGF0aW9uJ3MgRUlOIG9yIGZlZGVyYWwgdGF4IGlkZW50aWZpY2F0aW9uCiAgICBudW1iZXIgaXMgNjQtNjIyMTU0MS4gIEl0cyA1MDEoYykoMykgbGV0dGVyIGlzIHBvc3RlZCBhdAogICAgaHR0cDovL3BnbGFmLm9yZy9mdW5kcmFpc2luZy4gIENvbnRyaWJ1dGlvbnMgdG8gdGhlIFByb2plY3QgR3V0ZW5iZXJnCiAgICBMaXRlcmFyeSBBcmNoaXZlIEZvdW5kYXRpb24gYXJlIHRheCBkZWR1Y3RpYmxlIHRvIHRoZSBmdWxsIGV4dGVudAogICAgcGVybWl0dGVkIGJ5IFUuUy4gZmVkZXJhbCBsYXdzIGFuZCB5b3VyIHN0YXRlJ3MgbGF3cy4KCiAgICBUaGUgRm91bmRhdGlvbidzIHByaW5jaXBhbCBvZmZpY2UgaXMgbG9jYXRlZCBhdCA0NTU3IE1lbGFuIERyLiBTLgogICAgRmFpcmJhbmtzLCBBSywgOTk3MTIuLCBidXQgaXRzIHZvbHVudGVlcnMgYW5kIGVtcGxveWVlcyBhcmUgc2NhdHRlcmVkCiAgICB0aHJvdWdob3V0IG51bWVyb3VzIGxvY2F0aW9ucy4gIEl0cyBidXNpbmVzcyBvZmZpY2UgaXMgbG9jYXRlZCBhdAogICAgODA5IE5vcnRoIDE1MDAgV2VzdCwgU2FsdCBMYWtlIENpdHksIFVUIDg0MTE2LCAoODAxKSA1OTYtMTg4NywgZW1haWwKICAgIGJ1c2luZXNzQHBnbGFmLm9yZy4gIEVtYWlsIGNvbnRhY3QgbGlua3MgYW5kIHVwIHRvIGRhdGUgY29udGFjdAogICAgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGF0IHRoZSBGb3VuZGF0aW9uJ3Mgd2ViIHNpdGUgYW5kIG9mZmljaWFsCiAgICBwYWdlIGF0IGh0dHA6Ly9wZ2xhZi5vcmcKCiAgICBGb3IgYWRkaXRpb25hbCBjb250YWN0IGluZm9ybWF0aW9uOgogICAgICAgICBEci4gR3JlZ29yeSBCLiBOZXdieQogICAgICAgICBDaGllZiBFeGVjdXRpdmUgYW5kIERpcmVjdG9yCiAgICAgICAgIGdibmV3YnlAcGdsYWYub3JnCgogICAgU2VjdGlvbiA0LiAgSW5mb3JtYXRpb24gYWJvdXQgRG9uYXRpb25zIHRvIHRoZSBQcm9qZWN0IEd1dGVuYmVyZwogICAgTGl0ZXJhcnkgQXJjaGl2ZSBGb3VuZGF0aW9uCgogICAgUHJvamVjdCBHdXRlbmJlcmctdG0gZGVwZW5kcyB1cG9uIGFuZCBjYW5ub3Qgc3Vydml2ZSB3aXRob3V0IHdpZGUKICAgIHNwcmVhZCBwdWJsaWMgc3VwcG9ydCBhbmQgZG9uYXRpb25zIHRvIGNhcnJ5IG91dCBpdHMgbWlzc2lvbiBvZgogICAgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIHB1YmxpYyBkb21haW4gYW5kIGxpY2Vuc2VkIHdvcmtzIHRoYXQgY2FuIGJlCiAgICBmcmVlbHkgZGlzdHJpYnV0ZWQgaW4gbWFjaGluZSByZWFkYWJsZSBmb3JtIGFjY2Vzc2libGUgYnkgdGhlIHdpZGVzdAogICAgYXJyYXkgb2YgZXF1aXBtZW50IGluY2x1ZGluZyBvdXRkYXRlZCBlcXVpcG1lbnQuICBNYW55IHNtYWxsIGRvbmF0aW9ucwogICAgKCQxIHRvICQ1LDAwMCkgYXJlIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgdG8gbWFpbnRhaW5pbmcgdGF4IGV4ZW1wdAogICAgc3RhdHVzIHdpdGggdGhlIElSUy4KCiAgICBUaGUgRm91bmRhdGlvbiBpcyBjb21taXR0ZWQgdG8gY29tcGx5aW5nIHdpdGggdGhlIGxhd3MgcmVndWxhdGluZwogICAgY2hhcml0aWVzIGFuZCBjaGFyaXRhYmxlIGRvbmF0aW9ucyBpbiBhbGwgNTAgc3RhdGVzIG9mIHRoZSBVbml0ZWQKICAgIFN0YXRlcy4gIENvbXBsaWFuY2UgcmVxdWlyZW1lbnRzIGFyZSBub3QgdW5pZm9ybSBhbmQgaXQgdGFrZXMgYQogICAgY29uc2lkZXJhYmxlIGVmZm9ydCwgbXVjaCBwYXBlcndvcmsgYW5kIG1hbnkgZmVlcyB0byBtZWV0IGFuZCBrZWVwIHVwCiAgICB3aXRoIHRoZXNlIHJlcXVpcmVtZW50cy4gIFdlIGRvIG5vdCBzb2xpY2l0IGRvbmF0aW9ucyBpbiBsb2NhdGlvbnMKICAgIHdoZXJlIHdlIGhhdmUgbm90IHJlY2VpdmVkIHdyaXR0ZW4gY29uZmlybWF0aW9uIG9mIGNvbXBsaWFuY2UuICBUbwogICAgU0VORCBET05BVElPTlMgb3IgZGV0ZXJtaW5lIHRoZSBzdGF0dXMgb2YgY29tcGxpYW5jZSBmb3IgYW55CiAgICBwYXJ0aWN1bGFyIHN0YXRlIHZpc2l0IGh0dHA6Ly9wZ2xhZi5vcmcKCiAgICBXaGlsZSB3ZSBjYW5ub3QgYW5kIGRvIG5vdCBzb2xpY2l0IGNvbnRyaWJ1dGlvbnMgZnJvbSBzdGF0ZXMgd2hlcmUgd2UKICAgIGhhdmUgbm90IG1ldCB0aGUgc29saWNpdGF0aW9uIHJlcXVpcmVtZW50cywgd2Uga25vdyBvZiBubyBwcm9oaWJpdGlvbgogICAgYWdhaW5zdCBhY2NlcHRpbmcgdW5zb2xpY2l0ZWQgZG9uYXRpb25zIGZyb20gZG9ub3JzIGluIHN1Y2ggc3RhdGVzIHdobwogICAgYXBwcm9hY2ggdXMgd2l0aCBvZmZlcnMgdG8gZG9uYXRlLgoKICAgIEludGVybmF0aW9uYWwgZG9uYXRpb25zIGFyZSBncmF0ZWZ1bGx5IGFjY2VwdGVkLCBidXQgd2UgY2Fubm90IG1ha2UKICAgIGFueSBzdGF0ZW1lbnRzIGNvbmNlcm5pbmcgdGF4IHRyZWF0bWVudCBvZiBkb25hdGlvbnMgcmVjZWl2ZWQgZnJvbQogICAgb3V0c2lkZSB0aGUgVW5pdGVkIFN0YXRlcy4gIFUuUy4gbGF3cyBhbG9uZSBzd2FtcCBvdXIgc21hbGwgc3RhZmYuCgogICAgUGxlYXNlIGNoZWNrIHRoZSBQcm9qZWN0IEd1dGVuYmVyZyBXZWIgcGFnZXMgZm9yIGN1cnJlbnQgZG9uYXRpb24KICAgIG1ldGhvZHMgYW5kIGFkZHJlc3Nlcy4gIERvbmF0aW9ucyBhcmUgYWNjZXB0ZWQgaW4gYSBudW1iZXIgb2Ygb3RoZXIKICAgIHdheXMgaW5jbHVkaW5nIGluY2x1ZGluZyBjaGVja3MsIG9ubGluZSBwYXltZW50cyBhbmQgY3JlZGl0IGNhcmQKICAgIGRvbmF0aW9ucy4gIFRvIGRvbmF0ZSwgcGxlYXNlIHZpc2l0OiBodHRwOi8vcGdsYWYub3JnL2RvbmF0ZQoKCiAgICBTZWN0aW9uIDUuICBHZW5lcmFsIEluZm9ybWF0aW9uIEFib3V0IFByb2plY3QgR3V0ZW5iZXJnLXRtIGVsZWN0cm9uaWMKICAgIHdvcmtzLgoKICAgIFByb2Zlc3NvciBNaWNoYWVsIFMuIEhhcnQgaXMgdGhlIG9yaWdpbmF0b3Igb2YgdGhlIFByb2plY3QgR3V0ZW5iZXJnLXRtCiAgICBjb25jZXB0IG9mIGEgbGlicmFyeSBvZiBlbGVjdHJvbmljIHdvcmtzIHRoYXQgY291bGQgYmUgZnJlZWx5IHNoYXJlZAogICAgd2l0aCBhbnlvbmUuICBGb3IgdGhpcnR5IHllYXJzLCBoZSBwcm9kdWNlZCBhbmQgZGlzdHJpYnV0ZWQgUHJvamVjdAogICAgR3V0ZW5iZXJnLXRtIGVCb29rcyB3aXRoIG9ubHkgYSBsb29zZSBuZXR3b3JrIG9mIHZvbHVudGVlciBzdXBwb3J0LgoKICAgIFByb2plY3QgR3V0ZW5iZXJnLXRtIGVCb29rcyBhcmUgb2Z0ZW4gY3JlYXRlZCBmcm9tIHNldmVyYWwgcHJpbnRlZAogICAgZWRpdGlvbnMsIGFsbCBvZiB3aGljaCBhcmUgY29uZmlybWVkIGFzIFB1YmxpYyBEb21haW4gaW4gdGhlIFUuUy4KICAgIHVubGVzcyBhIGNvcHlyaWdodCBub3RpY2UgaXMgaW5jbHVkZWQuICBUaHVzLCB3ZSBkbyBub3QgbmVjZXNzYXJpbHkKICAgIGtlZXAgZUJvb2tzIGluIGNvbXBsaWFuY2Ugd2l0aCBhbnkgcGFydGljdWxhciBwYXBlciBlZGl0aW9uLgoKICAgIE1vc3QgcGVvcGxlIHN0YXJ0IGF0IG91ciBXZWIgc2l0ZSB3aGljaCBoYXMgdGhlIG1haW4gUEcgc2VhcmNoIGZhY2lsaXR5OgoKICAgICAgICAgaHR0cDovL3d3dy5ndXRlbmJlcmcubmV0CgogICAgVGhpcyBXZWIgc2l0ZSBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCBQcm9qZWN0IEd1dGVuYmVyZy10bSwKICAgIGluY2x1ZGluZyBob3cgdG8gbWFrZSBkb25hdGlvbnMgdG8gdGhlIFByb2plY3QgR3V0ZW5iZXJnIExpdGVyYXJ5CiAgICBBcmNoaXZlIEZvdW5kYXRpb24sIGhvdyB0byBoZWxwIHByb2R1Y2Ugb3VyIG5ldyBlQm9va3MsIGFuZCBob3cgdG8KICAgIHN1YnNjcmliZSB0byBvdXIgZW1haWwgbmV3c2xldHRlciB0byBoZWFyIGFib3V0IG5ldyBlQm9va3MuCgogICAgKioqIEVORDogRlVMTCBMSUNFTlNFICoqKgogICAgKi8KfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YToxOntzOjIxOiJcRmFrZXJcUHJvdmlkZXJcZnJfQ0EiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoyMToiXEZha2VyXFByb3ZpZGVyXGZyX0NBIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NToiZnJfQ0EiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czoyNjoiXEZha2VyXFByb3ZpZGVyXGZyX0NBXFRleHQiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMTp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MjY6IlxGYWtlclxQcm92aWRlclxmcl9DQVxUZXh0IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NDoiVGV4dCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcGFyZW50IjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MjA6IlxGYWtlclxQcm92aWRlclxUZXh0IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NDoiVGV4dCI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBpbXBsZW1lbnRzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YToxOntzOjM3OiJcRmFrZXJcUHJvdmlkZXJcZnJfQ0FcVGV4dDo6JGJhc2VUZXh0IjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5Ijo4OntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM3OiJcRmFrZXJcUHJvdmlkZXJcZnJfQ0FcVGV4dDo6JGJhc2VUZXh0IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6ODoiYmFzZVRleHQiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NzA6IlRoZSBQcm9qZWN0IEd1dGVuYmVyZyBFQm9vayBvZiBMYSBjaGFzc2UgZ2FsZXJpZSwgYnkgSG9ub3LDqSBCZWF1Z3JhbmQiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MjQwNToiVGhpcyBlQm9vayBpcyBmb3IgdGhlIHVzZSBvZiBhbnlvbmUgYW55d2hlcmUgYXQgbm8gY29zdCBhbmQgd2l0aAphbG1vc3Qgbm8gcmVzdHJpY3Rpb25zIHdoYXRzb2V2ZXIuICBZb3UgbWF5IGNvcHkgaXQsIGdpdmUgaXQgYXdheSBvcgpyZS11c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBQcm9qZWN0IEd1dGVuYmVyZyBMaWNlbnNlIGluY2x1ZGVkCndpdGggdGhpcyBlQm9vayBvciBvbmxpbmUgYXQgd3d3Lmd1dGVuYmVyZy5uZXQKCgpUaXRsZTogTGEgY2hhc3NlIGdhbGVyaWUKICAgICAgIEzDqWdlbmRlcyBDYW5hZGllbm5lcwoKQXV0aG9yOiBIb25vcsOpIEJlYXVncmFuZAoKUmVsZWFzZSBEYXRlOiBKdWx5IDUsIDIwMDUgW0VCb29rICMxNjIxMF0KCkxhbmd1YWdlOiBGcmVuY2gKCgoqKiogU1RBUlQgT0YgVEhJUyBQUk9KRUNUIEdVVEVOQkVSRyBFQk9PSyBMQSBDSEFTU0UgR0FMRVJJRSAqKioKCgoKClRoaXMgdGV4dCB3YXMgYWRhcHRlZCBmcm9tIHRoYXQgZm91bmQgYXQgdGhlIEJpYmxpb3Row6hxdWUgdmlydHVlbGxlLgpodHRwOi8vd3d3LmZzai51YWxiZXJ0YS5jYS9iaWJsaW8vZGVmYXVsdC5odG0KClRoYW5rIHlvdSB0byBEb25hbGQgSXBwZXJjaWVsIGFuZCB0aGUgRmFjdWx0w6kgU2FpbnQtSmVhbgooVW5pdmVyc2l0eSBvZiBBbGJlcnRhKSBmb3IgbWFraW5nIGl0IGF2YWlsYWJsZS4KCgoKCgpEVSBNw4pNRSBBVVRFVVIKCkpFQU5ORSBMQSBGSUxFVVNFLS3DiXBpc29kZSBkZSBsJ8OJbWlncmF0aW9uIEZyYW5jby1DYW5hZGllbm5lIGF1eArDiXRhdHMtVW5pcy0tUHJlbWnDqHJlIMOpZGl0aW9uIDE4NzgtLUR1ZXhpw6htZSDDqWRpdGlvbi0tTW9udHLDqWFsLCAxODg4LgoKTEUgVklFVVggTU9OVFLDiUFMLCAxNjExLTE4MDMtLUFsYnVtIGhpc3RvcmlxdWUsIGNocm9ub2xvZ2lxdWUgZXQKdG9wb2dyYXBoaXF1ZSBkZSBsYSB2aWxsZSBkZSBNb250csOpYWwgZGVwdWlzIHNlIGZvbmRhdGlvbi0tMTMgcGxhbmNoZXMKZW4gY291bGV1cnMtLURlc3NpbnMgZGUgUC4gTC4gTW9yaW4tLU1vbnRyw6lhbCwgMTg4NC4KCk1FTEFOR0VTLS1Ucm9pcyBDb25mw6lyZW5jZXMtLU1vbnRyw6lhbCwgMTg4OC4KCkxFVFRSRVMgREUgVk9ZQUdFLS1GcmFuY2UtLUl0YWxpZS0tU2ljaWxlLS1NYWx0ZS0tVHVuaXNpZS0tQWxnw6lyaWUtLQpFc3BhZ25lLS1Nb250csOpYWwsIDE4ODkuCgpTSVggTU9JUyBEQU5TIExFUyBNT05UQUdORVMgUk9DSEVVU0VTLS1Db2xvcmFkby0tVXRhaC0tTm91dmVhdQpNZXhpcXVlLS3DiWRpdGlvbiBpbGx1c3Ryw6llLS1Nb250csOpYWwsIDE4OTAuCgoKTEEKQ0hBU1NFCkdBTEVSSUUKTMOpZ2VuZGVzCkNhbmFkaWVubmVzCgpwYXIKSC4gQmVhdWdyYW5kCgpNT05UUkVBTAoxOTAwCgoKCgpUQUJMRSBERVMgTUFUScOIUkVTCgpMYSBDaGFzc2UtR2FsZXJpZQpMZSBMb3VwLUdhcm91CkxhIELDqnRlIMOgIEdyYW5kJ3F1ZXVlCk1hY2xvdW5lCkxlIFDDqHJlIExvdWlzb24KCgoKTGEgbMOpZ2VuZGUgcXVpIHN1aXQgYSBkw6lqw6Agw6l0w6kgcHVibGnDqWUgZGFucyBsYSBfUGF0cmllXywgaWwgeSBhCnF1ZWxxdWUgZGl4IGFucywgZXQgZW4gYW5nbGFpcyBkYW5zIGxlIF9DZW50dXJ5IE1hZ2F6aW5lXyBkZSBOZXcKWW9yaywgZHUgbW9pcyBkJ2Fvw7t0IDE4OTIsIGF2ZWMgaWxsdXN0cmF0aW9ucyBwYXIgSGVucmkgSnVsaWVuLgpPbiB2b2l0IHF1ZSBjZWxhIG5lIGRhdGUgcGFzIGQnaGllci4gTGUgcsOpY2l0IGx1aS1tw6ptZSBlc3QgYmFzw6kKc3VyIHVuZSBjcm95YW5jZSBwb3B1bGFpcmUgcXVpIHJlbW9udGUgw6AgbMOpcG9xdWUgZGVzIGNvdXJldXJzCmRlcyBib2lzIGV0IGRlcyB2b3lhZ2V1cnMgZHUgTm9yZC1PdWVzdC4gTGVzICJnZW5zIGRlIGNoYW50aWVyIgpvbnQgY29udGludcOpIGxhIHRyYWRpdGlvbiwgZXQgYydlc3Qgc3VydG91dCBkYW5zIGxlcyBwYXJvaXNzZXMKcml2ZXJhaW5lcyBkdSBTYWludC1MYXVyZW50IHF1ZSBsJ29uIGNvbm5hw650IGxlcyBsw6lnZW5kZXMgZGUKbGEgY2hhc3NlLWdhbGVyaWUuIEonYWkgcmVuY29udHLDqSBwbHVzIGQndW4gdmlldXggdm95YWdldXIgcXVpCmFmZmlybWFpdCBhdm9pciB2dSB2b2d1ZXIgZGFucyBsJ2FpciBkZXMgY2Fub3RzIGQnw6ljb3JjZSByZW1wbGlzCmRlICJwb3Nzw6lkw6lzIiBzJ2VuIGFsbGFudCB2b2lyIGxldXJzIGJsb25kZXMsIHNvdXMgbCfDqWdpZGUgZGUKQmVsesOpYnV0aC4gU2kgaidhaSDDqXTDqSBmb3Jjw6kgZGUgbWUgc2VydmlyIGQnZXhwcmVzc2lvbnMgcGx1cyBvdQptb2lucyBhY2Fkw6ltaXF1ZXMsIG9uIHZvdWRyYSBiaWVuIHNlIHJhcHBlbGVyIHF1ZSBqZSBtZXRzIGVuIHNjw6huZQpkZXMgaG9tbWVzIGF1IGxhbmdhZ2UgYXVzc2kgcnVkZSBxdWUgbGV1ciBkaWZmaWNpbGUgbcOpdGllci4KCkguQi4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YToyOntpOjA7Tzo0MjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2VlIjozOntzOjc6IgAqAG5hbWUiO3M6Mzoic2VlIjtzOjk6IgAqAHJlZmVycyI7Tzo1MjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmVmZXJlbmNlXFVybCI6MTp7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJlZmVyZW5jZVxVcmwAdXJpIjtzOjUzOiJodHRwOi8vd3d3Lmd1dGVuYmVyZy5vcmcvY2FjaGUvZXB1Yi8xNjIxMC9wZzE2MjEwLnR4dCI7fXM6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO31pOjE7Tzo0MzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcVmFyXyI6NDp7czoxNToiACoAdmFyaWFibGVOYW1lIjtzOjA6IiI7czo3OiIAKgB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fXM6NzoiACoAbmFtZSI7czozOiJ2YXIiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjIwOiJGYWtlclxQcm92aWRlclxmcl9DQSI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo3O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHR5cGVzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkZWZhdWx0IjtzOjk5Mjc0OiI8PDwnRU9UJwpMQSBDSEFTU0UtR0FMRVJJRQoKSQoKUG91ciBsb3JzIHF1ZSBqZSB2YWlzIHZvdXMgcmFjb250ZXIgdW5lIHLDtGRldXNlIGQnaGlzdG9pcmUsIGRhbnMgbGUKZmluIGZpbDsgbWFpcyBzJ2lsIHkgYSBwYXJtaSB2b3VzIGF1dHJlcyBkZXMgbHVyb25zIHF1aSBhdXJhaWVudAplbnZpZSBkZSBjb3VyaXIgbGEgY2hhc3NlLWdhbGVyaWUgb3UgbGUgbG91cC1nYXJvdSwgamUgdm91cyBhdmVydGlzCnF1J2lscyBmb250IG1pZXV4IGQnYWxsZXIgdm9pciBkZWhvcnMgc2kgbGVzIGNoYXRzLWh1YW50cyBmb250IGxlCnNhYmJhdCwgY2FyIGplIHZhaXMgY29tbWVuY2VyIG1vbiBoaXN0b2lyZSBlbiBmYWlzYW50IHVuIGdyYW5kIHNpZ25lCmRlIGNyb2l4IHBvdXIgY2hhc3NlciBsZSBkaWFibGUgZXQgc2VzIGRpYWJsb3RpbnMuIEonZW4gYWkgZXUgYXNzZXoKZGUgY2VzIG1hdWRpdHMtbMOgIGRhbnMgbW9uIGpldW5lIHRlbXBzLgoKUGFzIHVuIGhvbW1lIG5lIGZpdCBtaW5lIGRlIHNvcnRpcjsgYXUgY29udHJhaXJlIHRvdXMgc2UKcmFwcHJvY2jDqHJlbnQgZGUgbGEgY2FtYnVzZSBvw7kgbGUgX2Nvb2tfIGZpbmlzc2FpdCBzb24gcHLDqWFtYnVsZSBldApzZSBwcsOpcGFyYWl0IMOgIHJhY29udGVyIHVuZSBoaXN0b2lyZSBkZSBjaXJjb25zdGFuY2UuCgpPbiDDqXRhaXQgw6AgbGEgdmVpbGxlIGR1IGpvdXIgZGUgbCdhbiAxODU4LCBlbiBwbGVpbmUgZm9yw6p0IHZpZXJnZSwKZGFucyBsZXMgY2hhbnRpZXJzIGRlcyBSb3NzLCBlbiBoYXV0IGRlIGxhIEdhdGluZWF1LiBMYSBzYWlzb24gYXZhaXQKw6l0w6kgZHVyZSBldCBsYSBuZWlnZSBhdHRlaWduYWl0IGTDqWrDoCBsYSBoYXV0ZXVyIGR1IHRvaXQgZGUgbGEgY2FiYW5lLgoKTGUgYm91cmdlb2lzIGF2YWl0LCBzZWxvbiBsYSBjb3V0dW1lLCBvcmRvbm7DqSBsYSBkaXN0cmlidXRpb24gZHUKY29udGVudSBkJ3VuIHBldGl0IGJhcmlsIGRlIHJodW0gcGFybWkgbGVzIGhvbW1lcyBkdSBjaGFudGllciwgZXQgbGUKY3Vpc2luaWVyIGF2YWl0IHRlcm1pbsOpIGRlIGJvbm5lIGhldXJlIGxlcyBwcsOpcGFyYXRpZnMgZHUgZnJpY290IGRlCnBhdHRlcyBldCBkZXMgZ2xpc3NhbnRlcyBwb3VyIGxlIHJlcGFzIGR1IGxlbmRlbWFpbi4gTGEgbcOpbGFzc2UKbWlqb3RhaXQgZGFucyBsZSBncmFuZCBjaGF1ZHJvbiBwb3VyIGxhIHBhcnRpZSBkZSB0aXJlIHF1aSBkZXZhaXQKdGVybWluZXIgbGEgc29pcsOpZS4KCkNoYWN1biBhdmFpdCBib3VycsOpIHNhIHBpcGUgZGUgYm9uIHRhYmFjIGNhbmFkaWVuLCBldCB1biBudWFnZSDDqXBhaXMKb2JzY3VyY2lzc2FpdCBsJ2ludMOpcmlldXIgZGUgbGEgY2FiYW5lLCBvw7kgdW4gZmV1IHDDqXRpbGxhbnQgZGUgcGluCnLDqXNpbmV1eCBqZXRhaXQsIGNlcGVuZGFudCwgcGFyIGludGVydmFsbGVzLCBkZXMgbHVldXJzIHJvdWdlw6J0cmVzCnF1aSB0cmVtYmxvdGFpZW50IGVuIMOpY2xhaXJhbnQgcGFyIGRlcyBlZmZldHMgbWVydmVpbGxldXggZGUKY2xhaXItb2JzY3VyLCBsZXMgbcOibGVzIGZpZ3VyZXMgZGUgY2VzIHJ1ZGVzIHRyYXZhaWxsZXVycyBkZXMgZ3JhbmRzCmJvaXMuCgpKb2UgbGUgX2Nvb2tfIMOpdGFpdCB1biBwZXRpdCBob21tZSBhc3NleiBtYWwgZmFpdCwgcXVlIGwnb24KYXBwZWxhaXQgYXNzZXogZ8OpbsOpcmFsZW1lbnQgbGUgYm9zc3UsIHNhbnMgcXUnaWwgcydlbiBmb3JtYWxpc8OidCwgZXQKcXVpIGZhaXNhaXQgY2hhbnRpZXIgZGVwdWlzIGF1IG1vaW5zIDQwIGFucy4gSWwgZW4gYXZhaXQgdnUgZGUgdG91dGVzCmxlcyBjb3VsZXVycyBkYW5zIHNvbiBleGlzdGVuY2UgYmlnYXJyw6llIGV0IGlsIHN1ZmZpc2FpdCBkZSBsdWkgZmFpcmUKcHJlbmRyZSB1biBwZXRpdCBjb3VwIGRlIGphbWHDr3F1ZSBwb3VyIGx1aSBkw6lsaWVyIGxhIGxhbmd1ZSBldCBsdWkKZmFpcmUgcmFjb250ZXIgc2VzIGV4cGxvaXRzLgoKSUkKCi0tSmUgdm91cyBkaXNhaXMgZG9uYywgY29udGludWEtdC1pbCwgcXVlIHNpIGonYWkgw6l0w6kgdW4gcGV1IF90b3VnaF8KZGFucyBtYSBqZXVuZXNzZSwgamUgbidlbnRlbmRzIHBsdXMgcmlzw6llIHN1ciBsZXMgY2hvc2VzIGRlIGxhCnJlbGlnaW9uLiBKJ3ZhcyDDoCBjb25mZXNzZSByw6lndWxpw6hyZW1lbnQgdG91cyBsZXMgYW5zLCBldCBjZSBxdWUgamUKdmFpcyB2b3VzIHJhY29udGVyIGzDoCBzZSBwYXNzYWl0IGF1eCBqb3VycyBkZSBtYSBqZXVuZXNzZSBxdWFuZCBqZSBuZQpjcmFpZ25haXMgbmkgRGlldSBuaSBkaWFibGUuIEMnw6l0YWl0IHVuIHNvaXIgY29tbWUgY2VsdWktY2ksIGxhCnZlaWxsZSBkdSBqb3VyIGRlIGwnYW4sIGlsIHkgYSBkZSBjZWxhIDM0IG91IDM1IGFucy4gUsOpdW5pcyBhdmVjIHRvdXMKbWVzIGNhbWFyYWRlcyBhdXRvdXIgZGUgbGEgY2FtYnVzZSwgbm91cyBwcmVuaW9ucyB1biBwZXRpdCBjb3VwOwptYWlzIHNpIGxlcyBwZXRpdHMgcnVpc3NlYXV4IGZvbnQgbGVzIGdyYW5kZXMgcml2acOocmVzLCBsZXMgcGV0aXRzCnZlcnJlcyBmaW5pc3NlbnQgcGFyIHZpZGVyIGxlcyBncm9zc2VzIGNydWNoZXMsIGV0IGRhbnMgY2VzIHRlbXBzLWzDoCwKb24gYnV2YWl0IHBsdXMgc2VjIGV0IHBsdXMgc291dmVudCBxdSdhdWpvdXJkJ2h1aSwgZXQgaWwgbifDqXRhaXQgcGFzCnJhcmUgZGUgdm9pciBmaW5pciBsZXMgZsOqdGVzIHBhciBkZXMgY291cHMgZCBwb2luZ3MgZXQgZGVzIHRpcmFnZXMgZGUKdGlnbmFzc2UuIExhIGphbWHDr3F1ZSDDqXRhaXQgYm9ubmUsLS1wYXMgbWVpbGxldXJlIHF1ZSBjZSBzb2lyLC0tbWFpcwplbGxlIMOpdGFpdCBib3VncmVtZW50IGJvbm5lLCBqZSB2b3VzIGxlIHBhcnNvdcOqdGUuIEonZW4gYXZhaXMgYmllbgpsYW1ww6kgdW5lIGRvdXphaW5lIGRlIHBldGl0cyBnb2JlbGV0cywgcG91ciBtYSBwYXJ0LCBldCBzdXIgbGVzIG9uemUKaGV1cmVzLCBqZSB2b3VzIGwnYXZvdWUgZnJhbmNoZW1lbnQsIGxhIHTDqnRlIG1lIHRvdXJuYWl0IGV0IGplIG1lCmxhaXNzYWkgdG9tYmVyIHN1ciBtYSByb2JlIGRlIGNhcnJpb2xlIHBvdXIgZmFpcmUgdW4gcGV0aXQgc29tbWUgZW4KYXR0ZW5kYW50IGwnaGV1cmUgZGUgc2F1dGVyIMOgIHBpZWRzIGpvaW50cyBwYXItZGVzc3VzIGxhIHTDqnRlIGQndW4KcXVhcnQgZGUgbGFyZCwgZGUgbGEgdmllaWxsZSBhbm7DqWUgZGFucyBsYSBub3V2ZWxsZSwgY29tbWUgbm91cwphbGxvbnMgbGUgZmFpcmUgY2Ugc29pciBzdXIgbCdoZXVyZSBkZSBtaW51aXQsIGF2YW50IGQnYWxsZXIgY2hhbnRlcgpsYSBndWlnbm9sw6llIGV0IHNvdWhhaXRlciBsYSBib25uZSBhbm7DqWUgYXV4IGhvbW1lcyBkdSBjaGFudGllcgp2b2lzaW4uCgpKZSBkb3JtYWlzIGRvbmMgZGVwdWlzIGFzc2V6IGxvbmd0ZW1wcyBsb3JzcXVlIGplIG1lIHNlbnRpcyBzZWNvdWVyCnJ1ZGVtZW50IHBhciBsZSBib3NzIGRlcyBwaXF1ZXVycywgQmFwdGlzdGUgRHVyYW5kLCBxdWkgbWUgZGl0OgoKLS1Kb2UhIG1pbnVpdCB2aWVudCBkZSBzb25uZXIgZXQgdHUgZXMgZW4gcmV0YXJkIHBvdXIgbGUgc2F1dCBkdQpxdWFydC4gTGVzIGNhbWFyYWRlcyBzb250IHBhcnRpcyBwb3VyIGZhaXJlIGxldXIgdG91cm7DqWUgZXQgbW9pIGplCm0nZW4gdmFpcyDDoCBMYXZhbHRyaWUgdm9pciBtYSBibG9uZGUuIFZldXgtdHUgdmVuaXIgYXZlYyBtb2k/CgotLcOAIExhdmFsdHJpZSEgbHVpIHLDqXBvbmRpcy1qZSwgZXMtdHUgZm91PyBub3VzIGVuIHNvbW1lcyDDoCBwbHVzIGRlCmNlbnQgbGlldWVzIGV0IGQnYWlsbGV1cnMgYXVyYWlzLXR1IGRldXggbW9pcyBwb3VyIGZhaXJlIGxlIHZveWFnZSwKcXUnaWwgbid5IGEgcGFzIGRlIGNoZW1pbiBkZSBzb3J0aWUgZGFucyBsYSBuZWlnZS4gRXQgcHVpcywgbGUKdHJhdmFpbCBkdSBsZW5kZW1haW4gZHUgam91ciBkZSBsJ2FuPwoKLS1BbmltYWwhIHLDqXBvbmRpdCBtb24gaG9tbWUsIGlsIG5lIHMnYWdpdCBwYXMgZGUgY2VsYS4gTm91cyBmZXJvbnMKbGUgdm95YWdlIGVuIGNhbm90IGQnw6ljb3JjZSDDoCBsJ2F2aXJvbiwgZXQgZGVtYWluIG1hdGluIMOgIHNpeCBoZXVyZXMKbm91cyBzZXJvbnMgZGUgcmV0b3VyIGF1IGNoYW50aWVyLgoKSmUgY29tcHJlbmFpcy4KCk1vbiBob21tZSBtZSBwcm9wb3NhaXQgZGUgY291cmlyIGxhIGNoYXNzZS1nYWxlcmllIGV0IGRlIHJpc3F1ZXIgbW9uCnNhbHV0IMOpdGVybmVsIHBvdXIgbGUgcGxhaXNpciBkJ2FsbGVyIGVtYnJhc3NlciBtYSBibG9uZGUsIGF1CnZpbGxhZ2UuIEMnw6l0YWl0IHJhaWRlISBJbCDDqXRhaXQgYmllbiB2cmFpIHF1ZSBqJ8OpdGFpcyB1biBwZXUgaXZyb2duZQpldCBkw6liYXVjaMOpIGV0IHF1ZSBsYSByZWxpZ2lvbiBuZSBtZSBmYXRpZ3VhaXQgcGFzIMOgIGNldHRlIMOpcG9xdWUsCm1haXMgcmlzcXVlciBkZSB2ZW5kcmUgbW9uIMOibWUgYXUgZGlhYmxlLCDDp2EgbWUgc3VycGFzc2FpdC4KCi0tQ3LDqSBwb3VsZSBtb3VpbGzDqWUhIGNvbnRpbnVhIEJhcHRpc3RlLCB0dSBzYWlzIGJpZW4gcXUnaWwgbid5IGEgcGFzCmRlIGRhbmdlci4gSWwgcydhZ2l0IGQnYWxsZXIgw6AgTGF2YWx0cmllIGV0IGRlIHJldmVuaXIgZGFucyBzaXgKaGV1cmVzLiBUdSBzYWlzIGJpZW4gcXUnYXZlYyBsYSBjaGFzc2UtZ2FsZXJpZSwgb24gdm95YWdlIGF1IG1vaW5zIDUwCmxpZXVlcyDDoCBsJ2hldXJlIGxvcnNxdSdvbiBzYWl0IG1hbmllciBsJ2F2aXJvbiBjb21tZSBub3VzLiBJbCBzJ2FnaXQKdG91dCBzaW1wbGVtZW50IGRlIG5lIHBhcyBwcm9ub25jZXIgbGUgbm9tIGR1IGJvbiBEaWV1IHBlbmRhbnQgbGUKdHJhamV0LCBldCBkZSBuZSBwYXMgcydhY2Nyb2NoZXIgYXV4IGNyb2l4IGRlcyBjbG9jaGVycyBlbiB2b3lhZ2VhbnQuCkMnZXN0IGZhY2lsZSDDoCBmYWlyZSBldCBwb3VyIMOpdml0ZXIgdG91dCBkYW5nZXIsIGlsIGZhdXQgcGVuc2VyIMOgIGNlCnF1J29uIGRpdCwgYXZvaXIgbCdvZWlsIG/DuSBsJ29uIHZhIGV0IG5lIHBhcyBwcmVuZHJlIGRlIGJvaXNzb24gZW4Kcm91dGUuIEonYWkgZMOpasOgIGZhaXQgbGUgdm95YWdlIGNpbnEgZm9pcyBldCB0dSB2b2lzIGJpZW4gcXUnaWwgbmUKbSdlc3QgamFtYWlzIGFycml2w6kgbWFsaGV1ci4gQWxsb25zIG1vbiB2aWV1eCwgcHJlbmRzIHRvbiBjb3VyYWdlIMOgCmRldXggbWFpbnMgZXQsIHNpIGxlIGNvZXVyIHQnZW4gZGl0LCBkYW5zIGRldXggaGV1cmVzIGRlIHRlbXBzIG5vdXMKc2Vyb25zIMOgIExhdmFsdHJpZS4gUGVuc2Ugw6AgbGEgcGV0aXRlIExpemEgR3VpbWJldHRlIGV0IGF1IHBsYWlzaXIgZGUKbCdlbWJyYXNzZXIuIE5vdXMgc29tbWVzIGTDqWrDoCBzZXB0IHBvdXIgZmFpcmUgbGUgdm95YWdlIG1haXMgaWwgZmF1dArDqnRyZSBkZXV4LCBxdWF0cmUsIHNpeCBvdSBodWl0IGV0IHR1IHNlcmFzIGxlIGh1aXRpw6htZS4KCi0tT3VpISB0b3V0IGNlbGEgZXN0IHRyw6hzIGJpZW4sIG1haXMgaWwgZmF1dCBmYWlyZSB1biBzZXJtZW50IGF1CmRpYWJsZSwgZXQgYydlc3QgdW4gYW5pbWFsIHF1aSBuJ2VudGVuZCBwYXMgw6AgcmlyZSBsb3JzcXUnb24gcydlbmdhZ2UKw6AgbHVpLgoKLS1VbmUgc2ltcGxlIGZvcm1hbGl0w6ksIG1vbiBKb2UuIElsIHMnYWdpdCBzaW1wbGVtZW50IGRlIG5lIHBhcyBzZQpncmlzZXIgZXQgZGUgZmFpcmUgYXR0ZW50aW9uIMOgIHNhIGxhbmd1ZSBldCDDoCBzb24gYXZpcm9uLiBVbiBob21tZQpuJ2VzdCBwYXMgdW4gZW5mYW50LCBxdWUgZGlhYmxlISBWaWVucyEgdmllbnMhIG5vcyBjYW1hcmFkZXMgbm91cwphdHRlbmRlbnQgZGVob3JzIGV0IGxlIGdyYW5kIGNhbm90IGRlIGxhIF9kcmF2ZV8gZXN0IHRvdXQgcHLDqnQgcG91cgpsZSB2b3lhZ2UuCgpKZSBtZSBsYWlzc2FpIGVudHJhw65uZXIgaG9ycyBkZSBsYSBjYWJhbmUgb8O5IGplIHZpcyBlbiBlZmZldCBzaXggZGUKbm9zIGhvbW1lcyBxdWkgbm91cyBhdHRlbmRhaWVudCwgbCdhdmlyb24gw6AgbGEgbWFpbi4gTGUgZ3JhbmQgY2Fub3QKw6l0YWl0IHN1ciBsYSBuZWlnZSBkYW5zIHVuZSBjbGFpcmnDqHJlIGV0IGF2YW50IGQnYXZvaXIgZXUgbGUgdGVtcHMgZGUKcsOpZmzDqWNoaXIsIGonw6l0YWlzIGTDqWrDoCBhc3NpcyBkYW5zIGxlIGRldmFudCwgbCdhdmlyb24gcGVuZGFudCBzdXIgbGUKcGxhdC1ib3JkLCBhdHRlbmRhbnQgbGUgc2lnbmFsIGR1IGTDqXBhcnQuIEonYXZvdWUgcXVlIGonw6l0YWlzIHVuIHBldQp0cm91YmzDqSwgbWFpcyBCYXB0aXN0ZSBxdWkgcGFzc2FpdCwgZGFucyBsZSBjaGFudGllciwgcG91ciBuJ8OqdHJlIHBhcwphbGzDqSDDoCBjb25mZXNzZSBkZXB1aXMgc2VwdCBhbnMgbmUgbWUgbGFpc3NhIHBhcyBsZSB0ZW1wcyBkZSBtZQpkw6licm91aWxsZXIuIElsIMOpdGFpdCDDoCBsJ2FycmnDqHJlLCBkZWJvdXQsIGV0IGQndW5lIHZvaXggdmlicmFudGUgaWwKbm91cyBkaXQ6CgotLVLDqXDDqXRleiBhdmVjIG1vaSEKCkV0IG5vdXMgcsOpcMOpdMOibWVzOgoKLS1TYXRhbiEgcm9pIGRlcyBlbmZlcnMsIG5vdXMgdGUgcHJvbWV0dG9ucyBkZSB0ZSBsaXZyZXIgbm9zIMOibWVzLApzaSBkJ2ljaSDDoCBzaXggaGV1cmVzIG5vdXMgcHJvbm9uw6dvbnMgbGUgbm9tIGRlIHRvbiBtYcOudHJlIGV0IGR1Cm7DtHRyZSwgbGUgYm9uIERpZXUsIGV0IG5vdXMgdG91Y2hvbnMgdW5lIGNyb2l4IGRhbnMgbGUgdm95YWdlLiDDgApjZXR0ZSBjb25kaXRpb24gdHUgbm91cyB0cmFuc3BvcnRlcmFzIMOgIHRyYXZlcnMgbGVzIGFpcnMsIGF1IGxpZXUgb8O5Cm5vdXMgdm91bG9ucyBhbGxlciBldCB0dSBub3VzIHJhbcOobmVyYXMgZGUgbcOqbWUgYXUgY2hhbnRpZXIhCgpJSUkKCiAgQWNhYnJpcyEgQWNhYnJhcyEgQWNhYnJhbQogIEZhaXMtbm91cyB2b3lhZ2VyIHBhci1kZXNzdXMgbGVzIG1vbnRhZ25lcwoKw4AgcGVpbmUgYXZpb25zLW5vdXMgcHJvbm9uY8OpIGxlcyBkZXJuacOocmVzIHBhcm9sZXMgcXVlIG5vdXMgc2VudMOubWVzCmxlIGNhbm90IHMnw6lsZXZlciBkYW5zIGwnYWlyIMOgIHVuZSBoYXV0ZXVyIGRlIGNpbnEgb3Ugc2l4IGNlbnRzCnBpZWRzLiBJbCBtZSBzZW1ibGFpdCBxdWUgaifDqXRhaXMgbMOpZ2VyIGNvbW1lIHVuZSBwbHVtZSBldCBhdQpjb21tYW5kZW1lbnQgZGUgQmFwdGlzdGUsIG5vdXMgY29tbWVuw6fDom1lcyDDoCBuYWdlciBjb21tZSBkZXMgcG9zc8OpZMOpcwpxdWUgbm91cyDDqXRpb25zLiBBdXggcHJlbWllcnMgY291cHMgZCdhdmlyb24gbGUgY2Fub3QgcyfDqWxhbsOnYSBkYW5zCmwnYWlyIGNvbW1lIHVuZSBmbMOoY2hlLCBldCBjJ2VzdCBsZSBjYXMgZGUgbGUgZGlyZSwgbGUgZGlhYmxlIG5vdXMKZW1wb3J0YWl0LiDDh2Egbm91cyBlbiBjb3VwYWl0IGxlIHJlc3BpcmUgZXQgbGUgcG9pbCBlbiBmcmlzYWl0IHN1cgpub3MgYm9ubmV0cyBkZSBjYXJjYWpvdS4KCk5vdXMgZmlsaW9ucyBwbHVzIHZpdGUgcXVlIGxlIHZlbnQuIFBlbmRhbnQgdW4gcXVhcnQgZCdoZXVyZSwKZW52aXJvbiwgbm91cyBuYXZpZ3XDom1lcyBhdS1kZXNzdXMgZGUgbGEgZm9yw6p0IHNhbnMgYXBlcmNldm9pciBhdXRyZQpjaG9zZSBxdWUgbGVzIGJvdXF1ZXRzIGRlcyBncmFuZHMgcGlucyBub2lycy4gSWwgZmFpc2FpdCB1bmUgbnVpdApzdXBlcmJlIGV0IGxhIGx1bmUsIGRhbnMgc29uIHBsZWluLCBpbGx1bWluYWl0IGxlIGZpcm1hbWVudCBjb21tZQp1biBiZWF1IHNvbGVpbCBkdSBtaWRpLiBJbCBmYWlzYWl0IHVuIGZyb2lkIGR1IHRvbm5lcnJlIGV0IG5vcwptb3VzdGFjaGVzIMOpdGFpZW50IGNvdXZlcnRlcyBkZSBnaXZyZSwgbWFpcyBub3VzIMOpdGlvbnMgY2VwZW5kYW50CnRvdXMgZW4gbmFnZS4gw4dhIHNlIGNvbXByZW5kIGFpc8OpbWVudCBwdWlzcXVlIGMnw6l0YWl0IGxlIGRpYWJsZSBxdWkKbm91cyBtZW5haXQgZXQgamUgdm91cyBhc3N1cmUgcXVlIGNlIG4nw6l0YWl0IHBhcyBzdXIgbGUgdHJhaW4gZGUgbGEKX0JsYW5jaGVfLiBOb3VzIGFwZXLDp8O7bWVzIGJpZW50w7R0IHVuZSDDqWNsYWlyY2llLCBjJ8OpdGFpdCBsYQpHYXRpbmVhdSBkb250IGxhIHN1cmZhY2UgZ2xhY8OpZSBldCBwb2xpZSDDqXRpbmNlbGFpdCBhdS1kZXNzb3VzIGRlCm5vdXMgY29tbWUgdW4gaW1tZW5zZSBtaXJvaXIuIFB1aXMsIHAndGl0LcOgLXAndGl0IG5vdXMgYXBlcsOnw7ttZXMgZGVzCmx1bWnDqHJlcyBkYW5zIGxlcyBtYWlzb25zIGQnaGFiaXRhbnRzOyBwdWlzIGRlcyBjbG9jaGVycyBkJ8OpZ2xpc2VzCnF1aSByZWx1aXNhaWVudCBjb21tZSBkZXMgYmHDr29ubmV0dGVzIGRlIHNvbGRhdHMsIHF1YW5kIGlscyBmb250CmwnZXhlcmNpY2Ugc3VyIGxlIENoYW1wIGRlIE1hcnMgZGUgTW9udHLDqWFsLiBPbiBwYXNzYWl0IGNlcyBjbG9jaGVycwphdXNzaSB2aXRlIHF1J29uIHBhc3NlIGxlcyBwb3RlYXV4IGRlIHTDqWzDqWdyYXBoZSwgcXVhbmQgb24gdm95YWdlCmVuIGNoZW1pbiBkZSBmZXIuIEV0IG5vdXMgZmlsaW9ucyB0b3Vqb3VycyBjb21tZSB0b3VzIGxlcyBkaWFibGVzLApwYXNzYW50IHBhci1kZXNzdXMgbGVzIHZpbGxhZ2VzLCBsZXMgZm9yw6p0cywgbGVzIHJpdmnDqHJlcyBldCBsYWlzc2FudApkZXJyacOocmUgbm91cyBjb21tZSB1bmUgdHJhw65uw6llIGQnw6l0aW5jZWxsZXMuIEMnZXN0IEJhcHRpc3RlLCBsZQpwb3Nzw6lkw6ksIHF1aSBnb3V2ZXJuYWl0LCBjYXIgaWwgY29ubmFpc3NhaXQgbGEgcm91dGUgZXQgbm91cwphcnJpdsOibWVzIGJpZW50w7R0IMOgIGxhIHJpdmnDqHJlIGRlcyBPdXRhb3VhaXMgcXVpIG5vdXMgc2Vydml0IGRlIGd1aWRlCnBvdXIgZGVzY2VuZHJlIGp1c3F1J2F1IGxhYyBkZXMgRGV1eC1Nb250YWduZXMuCgotLUF0dGVuZGV6IHVuIHBldSwgY3JpYSBCYXB0aXN0ZS4gTm91cyBhbGxvbnMgcmFzZXIgTW9udHLDqWFsIGV0IG5vdXMKYWxsb25zIGVmZnJheWVyIGxlcyBjb3VyZXV4IHF1aSBzb250IGVuY29yZSBkZWhvcnMgw6AgYyd0ZSBoZXVyZSBjaXRlLgpUb2ksIEpvZSEgbMOgLCBlbiBhdmFudCwgw6ljbGFpcmNpcy10b2kgbGUgZ29zaWVyIGV0IGNoYW50ZS1ub3VzIHVuZQpjaGFuc29uIHN1ciBsJ2F2aXJvbi4KCkVuIGVmZmV0LCBub3VzIGFwZXJjZXZpb25zIGTDqWrDoCBsZXMgbWlsbGUgbHVtacOocmVzIGRlIGxhIGdyYW5kZQp2aWxsZSwgZXQgQmFwdGlzdGUsIGQndW4gY291cCBkJ2F2aXJvbiwgbm91cyBmaXQgZGVzY2VuZHJlIMOgIHBldSBwcsOocwphdSBuaXZlYXUgZGVzIHRvdXJzIGRlIE5vdHJlLURhbWUuIEonZW5sZXZhaSBtYSBjaGlxdWUgcG91ciBuZSBwYXMKbCdhdmFsZXIsIGV0IGonZW50b25uYWkgw6AgdHVlLXTDqnRlIGNldHRlIGNoYW5zb24gZGUgY2lyY29uc3RhbmNlIHF1ZQp0b3VzIGxlcyBjYW5vdGllcnMgcsOpcMOpdMOocmVudCBlbiBjaG9ldXI6CgogIE1vbiBww6hyZSBuJ2F2YWl0IGZpbGxlIHF1ZSBtb2ksCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyLAogIEV0IGRlc3N1cyBsYSBtZXIgaWwgbSdlbnZvaWU6CiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZvbGUsIHF1aSB2b2xlLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciEKCiAgRXQgZGVzc3VzIGxhIG1lciBpbCBtJ2Vudm9pZSwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIsCiAgTGUgbWFyaW5pZXIgcXVpIG1lIG1lbmFpdDoKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdm9sZSwgcXVpIHZvbGUsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyIQoKICBMZSBtYXJpbmllciBxdWkgbWUgbWVuYWl0LAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciwKICBNZSBkaXQsIG1hIGJlbGxlLCBlbWJyYXNzZXotbW9pOgogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2b2xlLCBxdWkgdm9sZSwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIhCgogIE1lIGRpdCwgbWEgYmVsbGUsIGVtYnJhc3Nlei1tb2ksCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyLAogIE5vbiwgbm9uLCBtb25zaWV1ciwgamUgbmUgc2F1cmFpczoKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdm9sZSwgcXVpIHZvbGUsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyIQoKICBOb24sIG5vbiwgbW9uc2lldXIsIGplIG5lIHNhdXJhaXMsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyLAogIENhciBzaSBtb24gcGFwYSBsZSBzYXZhaXQ6CiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZvbGUsIHF1aSB2b2xlLAogICAgQ2Fub3QgZCfDqWNvcmNlIHF1aSB2YSB2b2xlciEKCiAgQ2FyIHNpIG1vbiBwYXBhIGxlIHNhdmFpdCwKICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdmEgdm9sZXIsCiAgQWghIGMnZXN0IGJpZW4gc8O7ciBxdSdpbCBtZSBiYXR0cmFpdC4KICAgIENhbm90IGQnw6ljb3JjZSBxdWkgdm9sZSwgcXVpIHZvbGUsCiAgICBDYW5vdCBkJ8OpY29yY2UgcXVpIHZhIHZvbGVyIQoKCklWCgpCaWVuIHF1J2lsIGbDu3QgcHLDqHMgZGUgZGV1eCBoZXVyZXMgZHUgbWF0aW4sIG5vdXMgdsOubWVzIGRlcyBncm91cGVzClMnYXJyw6p0ZXIgZGFucyBsZXMgcnVlcyBwb3VyIG5vdXMgdm9pciBwYXNzZXIsIG1haXMgbm91cyBmaWxpb25zIHNpCnZpdGUgcXUnZW4gdW4gY2xpbiBkJ29laWwgbm91cyBhdmlvbnMgZMOpcGFzc8OpIE1vbnRyw6lhbCBldCBzZXMKZmF1Ym91cmdzLCBldCBhbG9ycyBqZSBjb21tZW7Dp2FpIMOgIGNvbXB0ZXIgbGVzIGNsb2NoZXJzOiBsYQpMb25ndWUtUG9pbnRlLCBsYSBQb2ludGUtYXV4LVRyZW1ibGVzLCBSZXBlbnRpZ255LCBTYWludC1TdWxwaWNlLCBldAplbmZpbiBsZXMgZGV1eCBmbMOoY2hlcyBhcmdlbnTDqWVzIGRlIExhdmFsdHJpZSBxdWkgZG9taW5haWVudCBsZSB2ZXJ0CnNvbW1ldCBkZXMgZ3JhbmRzIHBpbnMgZHUgZG9tYWluZS4KCi0tQXR0ZW50aW9uISB2b3VzIGF1dHJlcywgbm91cyBjcmlhIEJhcHRpc3RlLiBOb3VzIGFsbG9ucyBhdHRlcnJpciDDoApsJ2VudHLDqWUgZHUgYm9pcywgZGFucyBsZSBjaGFtcCBkZSBtb24gcGFycmFpbiwgSmVhbi1KZWFuIEdhYnJpZWwsIGV0Cm5vdXMgbm91cyByZW5kcm9ucyBlbnN1aXRlIMOgIHBpZWQgcG91ciBhbGxlciBzdXJwcmVuZHJlIG5vcwpjb25uYWlzc2FuY2VzIGRhbnMgcXVlbHF1ZSBmcmljb3Qgb3UgcXVlbHF1ZSBkYW5zZSBkdSB2b2lzaW5hZ2UuCgpRdWkgZnV0IGRpdCBmdXQgZmFpdCwgZXQgY2lucSBtaW51dGVzIHBsdXMgdGFyZCBub3RyZSBjYW5vdCByZXBvc2FpdApkYW5zIHVuIGJhbmMgZGUgbmVpZ2Ugw6AgbCdlbnRyw6llIGR1IGJvaXMgZGUgSmVhbi1KZWFuIEdhYnJpZWw7IGV0Cm5vdXMgcGFydMOubWVzIHRvdXMgbGVzIGh1aXQgw6AgbGEgZmlsZSBwb3VyIG5vdXMgcmVuZHJlIGF1IHZpbGxhZ2UuIENlCm4nw6l0YWl0IHBhcyB1bmUgbWluY2UgYmVzb2duZSBjYXIgaWwgbid5IGF2YWl0IHBhcyBkZSBjaGVtaW4gYmF0dHUgZXQKbm91cyBhdmlvbnMgZGUgbGEgbmVpZ2UganVzcXUnYXUgY2FsaWZvdXJjaG9uLiBCYXB0aXN0ZSBxdWkgw6l0YWl0CnBsdXMgZWZmcm9udMOpIHF1ZSBsZXMgYXV0cmVzIHMnZW4gYWxsYSBmcmFwcGVyIMOgIGxhIHBvcnRlIGRlIGxhCm1haXNvbiBkZSBzb24gcGFycmFpbiBvw7kgbCdvbiBhcGVyY2V2YWl0IGVuY29yZSBkZSBsYSBsdW1pw6hyZSwgbWFpcwppbCBuJ3kgdHJvdXZhIHF1J3VuZSBmaWxsZSBfZW5nYWfDqHJlXyBxdWkgbHVpIGFubm9uw6dhIHF1ZSBsZXMKdmllaWxsZXMgZ2VucyDDqXRhaWVudCDDoCB1biBfc25hcXVlXyBjaGV6IGxlIHDDqHJlIFJvYmlsbGFyZCwgbWFpcwpxdWUgbGVzIGZhcmF1ZHMgZXQgbGVzIGZpbGxlcyBkZSBsYSBwYXJvaXNzZSDDqXRhaWVudCBwcmVzcXVlIHRvdXMKcmVuZHVzIGNoZXogQmF0aXNzZXR0ZSBBdWfDqSwgw6AgbGEgUGV0aXRlLU1pc8OocmUgZW4gYmFzIGRlCkNvbnRyZWNvZXVyLCBkZSBsJ2F1dHJlIGPDtHTDqSBkdSBmbGV1dmUsIGzDoCBvw7kgaWwgeSBhdmFpdCB1biByaWdvZG9uCmR1IGpvdXIgZGUgbCdhbi4KCi0tQWxsb25zIGF1IHJpZ29kb24sIGNoZXogQmF0aXNzZXR0ZSBBdWfDqSwgbm91cyBkaXQgQmFwdGlzdGUsIG9uIGVzdApjZXJ0YWluIGQneSByZW5jb250cmVyIG5vcyBibG9uZGVzLgoKLS1BbGxvbnMgY2hleiBCYXRpc3NldHRlIQoKRXQgbm91cyByZXRvdXJuw6JtZXMgYXUgY2Fub3QsIHRvdXQgZW4gbm91cyBtZXR0YW50IG11dHVlbGxlbWVudCBlbgpnYXJkZSBzdXIgbGUgZGFuZ2VyIHF1J2lsIHkgYXZhaXQgZGUgcHJvbm9uY2VyIGNlcnRhaW5lcyBwYXJvbGVzIGV0CmRlIHByZW5kcmUgdW4gY291cCBkZSB0cm9wLCBjYXIgaWwgZmFsbGFpdCByZXByZW5kcmUgbGEgcm91dGUgZGVzCmNoYW50aWVycyBldCB5IGFycml2ZXIgYXZhbnQgc2l4IGhldXJlcyBkdSBtYXRpbiwgc2FucyBxdW9pIG5vdXMKw6l0aW9ucyBmbGFtYsOpcyBjb21tZSBkZXMgY2FyY2Fqb3VzLCBldCBsZSBkaWFibGUgbm91cyBlbXBvcnRhaXQgYXUKZmluIGZvbmQgZGVzIGVuZmVycy4KCiAgQWNhYnJpcyEgQWNhYnJhcyEgQWNhYnJhbSEKICBGYWlzLW5vdXMgdm95YWdlciBwYXItZGVzc3VzIGxlcyBtb250YWduZXMhCgpjcmlhIGRlIG5vdXZlYXUgQmFwdGlzdGUuIEV0IG5vdXMgdm9pbMOgIHJlcGFydGlzIHBvdXIgbGEKUGV0aXRlLU1pc8OocmUsIGVuIG5hdmlndWFudCBlbiBsJ2FpciBjb21tZSBkZXMgcmVuw6lnYXRzIHF1ZSBub3VzCsOpdGlvbnMgdG91cy4gRW4gZGV1eCB0b3VycyBkJ2F2aXJvbiwgbm91cyBhdmlvbnMgdHJhdmVyc8OpIGxlIGZsZXV2ZQpldCBub3VzIMOpdGlvbnMgcmVuZHVzIGNoZXogQmF0aXNzZXR0ZSBBdWfDqSBkb250IGxhIG1haXNvbiDDqXRhaXQgdG91dAppbGx1bWluw6llLiBPbiBlbnRlbmRhaXQgdmFndWVtZW50LCBhdSBkZWhvcnMsIGxlcyBzb25zIGR1IHZpb2xvbiBldApsZXMgw6ljbGF0cyBkZSByaXJlIGRlcyBkYW5zZXVycyBkb250IG9uIHZveWFpdCBsZXMgb21icmVzIHNlCnRyw6ltb3Vzc2VyLCDDoCB0cmF2ZXJzIGxlcyB2aXRyZXMgY291dmVydGVzIGRlIGdpdnJlLiBOb3VzIGNhY2jDom1lcwpub3RyZSBjYW5vdCBkZXJyacOocmUgbGVzIHRhcyBkZSBib3VyZGlsbG9ucyBxdWkgYm9yZGFpZW50IGxhIHJpdmUsCmNhciBsYSBnbGFjZSBhdmFpdCByZWZvdWzDqSwgY2V0dGUgYW5uw6llLWzDoC4KCi0tTWFpbnRlbmFudCwgbm91cyByw6lww6l0YSBCYXB0aXN0ZSwgcGFzIGRlIGLDqnRpc2VzLCBsZXMgYW1pcywgZXQKYXR0ZW50aW9uIMOgIHZvcyBwYXJvbGVzLiBEYW5zb25zIGNvbW1lIGRlcyBwZXJkdXMsIG1haXMgcGFzIHVuIHNldWwKdmVycmUgZGUgTW9sc29uLCBuaSBkZSBqYW1hw69xdWUsIHZvdXMgbSdlbnRlbmRleiEgRXQgYXUgcHJlbWllcgpzaWduZSwgc3VpdmV6LW1vaSB0b3VzLCBjYXIgaWwgZmF1ZHJhIHJlcGFydGlyIHNhbnMgYXR0aXJlcgpsJ2F0dGVudGlvbi4KCkV0IG5vdXMgYWxsw6JtZXMgZnJhcHBlciDDoCBsYSBwb3J0ZS4KClYKCkxlIHDDqHJlIEJhdGlzc2V0dGUgdmludCBvdXZyaXIgbHVpLW3Dqm1lIGV0IG5vdXMgZsO7bWVzIHJlw6d1cyDDoCBicmFzCm91dmVydHMgcGFyIGxlcyBpbnZpdMOpcyBxdWUgbm91cyBjb25uYWlzc2lvbnMgcHJlc3F1ZSB0b3VzLgoKTm91cyBmw7ttZXMgZCdhYm9yZCBhc3NhaWxsaXMgZGUgcXVlc3Rpb25zOgoKLS1EJ2/DuSB2ZW5lei12b3VzPwoKLS1KZSB2b3VzIGNyb3lhaXMgZGFucyBsZXMgY2hhbnRpZXJzIQoKLS1Wb3VzIGFycml2ZXogYmllbiB0YXJkIQoKLS1WZW5leiBwcmVuZHJlIHVuZSBsYXJtZSEKCkNlIGZ1dCBlbmNvcmUgQmFwdGlzdGUgcXVpIG5vdXMgdGlyYSBkJ2FmZmFpcmUgZW4gcHJlbmFudCBsYSBwYXJvbGU6CgotLUQnYWJvcmQsIGxhaXNzZXotbm91cyBub3VzIGTDqWNhcG90ZXIgZXQgcHVpcyBlbnN1aXRlIGxhaXNzZXotbm91cwpkYW5zZXIuIE5vdXMgc29tbWVzIHZlbnVzIGV4cHLDqHMgcG91ciDDp2EuIERlbWFpbiBtYXRpbiwgamUgcsOpcG9uZHJhaQrDoCB0b3V0ZXMgdm9zIHF1ZXN0aW9ucyBldCBub3VzIHZvdXMgcmFjb250ZXJvbnMgdG91dCBjZSBxdWUgdm91cwp2b3VkcmV6LgoKUG91ciBtb2kgaidhdmFpcyBkw6lqw6AgcmVsdXF1w6kgTGl6YSBHdWltYmV0dGUgcXVpIMOpdGFpdCBmYXJhdWTDqWUgcGFyCmxlIHAndGl0IEJvaXNqb2xpIGRlIExhbm9yYWllLiBKZSBtJ2FwcHJvY2hhaSBkJ2VsbGUgcG91ciBsYSBzYWx1ZXIKZXQgcG91ciBsdWkgZGVtYW5kZXIgbCdhdmFudGFnZSBkZSBsYSBwcm9jaGFpbmUgcXVpIMOpdGFpdCB1biBfcmVlbF8Kw6AgcXVhdHJlLiBFbGxlIGFjY2VwdGEgYXZlYyB1biBzb3VyaXJlIHF1aSBtZSBmaXQgb3VibGllciBxdWUgaidhdmFpcwpyaXNxdcOpIGxlIHNhbHV0IGRlIG1vbiDDom1lIHBvdXIgYXZvaXIgbGUgcGxhaXNpciBkZSBtZSB0csOpbW91c3NlciBldApkZSBiYXR0cmUgZGVzIGFpbGVzIGRlIHBpZ2VvbiBlbiBzYSBjb21wYWduaWUuIFBlbmRhbnQgZGV1eCBoZXVyZXMgZGUKdGVtcHMsIHVuZSBkYW5zZSBuJ2F0dGVuZGFpdCBwYXMgbCdhdXRyZSBldCBjZSBuJ2VzdCBwYXMgcG91ciBtZQp2YW50ZXIgc2kgamUgdm91cyBkaXMgcXVlIGRhbnMgY2UgdGVtcHMtbMOgLCBpbCBuJ3kgYXZhaXQgcGFzIG1vbgpwYXJlaWwgw6AgZGl4IGxpZXVlcyDDoCBsYSByb25kZSBwb3VyIGxhIGdpZ3VlIHNpbXBsZSBvdSBsYSB2b2xldXNlLgpNZXMgY2FtYXJhZGVzLCBkZSBsZXVyIGPDtHTDqSwgcydhbXVzYWllbnQgY29tbWUgZGVzIGx1cm9ucywgZXQgdG91dCBjZQpxdWUgamUgcHVpcyB2b3VzIGRpcmUsIGMnZXN0IHF1ZSBsZXMgZ2Fyw6dvbnMgZCdoYWJpdGFudHMgw6l0YWllbnQKZmF0aWd1w6lzIGRlIG5vdXMgYXV0cmVzLCBsb3JzcXVlIHF1YXRyZSBoZXVyZXMgc29ubsOocmVudCDDoCBsYQpwZW5kdWxlLiBKJ2F2YWlzIGNydSBhcGVyY2V2b2lyIEJhcHRpc3RlIER1cmFuZCBxdWkgcydhcHByb2NoYWl0IGR1CmJ1ZmZldCBvw7kgbGVzIGhvbW1lcyBwcmVuYWllbnQgZGVzIG5pcHBlcyBkZSB3aGlza3kgYmxhbmMsIGRlIHRlbXBzCmVuIHRlbXBzLCBtYWlzIGonw6l0YWlzIHRlbGxlbWVudCBvY2N1cMOpIGF2ZWMgbWEgcGFydGVuYWlyZSBxdWUgamUKbid5IHBvcnRhaSBwYXMgYmVhdWNvdXAgZCdhdHRlbnRpb24uIE1haXMgbWFpbnRlbmFudCBxdWUgbCdoZXVyZSBkZQpyZW1vbnRlciBlbiBjYW5vdCDDqXRhaXQgYXJyaXbDqWUsIGplIHZpcyBjbGFpcmVtZW50IHF1ZSBCYXB0aXN0ZSBhdmFpdApwcmlzIHVuIGNvdXAgZGUgdHJvcCBldCBqZSBmdXMgb2JsaWfDqSBkJ2FsbGVyIGxlIHByZW5kcmUgcGFyIGxlIGJyYXMKcG91ciBsZSBmYWlyZSBzb3J0aXIgYXZlYyBtb2kgZW4gZmFpc2FudCBzaWduZSBhdXggYXV0cmVzIGRlIHNlCnByw6lwYXJlciDDoCBub3VzIHN1aXZyZSBzYW5zIGF0dGlyZXIgbCdhdHRlbnRpb24gZGVzIGRhbnNldXNlcy4gTm91cwpzb3J0w65tZXMgZG9uYyBsZXMgdW5zIGFwcsOocyBsZXMgYXV0cmVzIHNhbnMgZmFpcmUgc2VtYmxhbnQgZGUgcmllbgpldCwgY2lucSBtaW51dGVzIHBsdXMgdGFyZCwgbm91cyDDqXRpb25zIHJlbW9udMOpcyBlbiBjYW5vdCwgYXByw6hzCmF2b2lyIHF1aXR0w6kgbGUgYmFsIGNvbW1lIGRlcyBzYXV2YWdlcywgc2FucyBkaXJlIGJvbmpvdXIgw6AgcGVyc29ubmUsCnBhcyBtw6ptZSDDoCBMaXphIHF1ZSBqJ2F2YWlzIGludml0w6llIHBvdXIgZGFuc2VyIHVuIF9mb2luXy4gSidhaQp0b3Vqb3VycyBwZW5zw6kgcXVlIGMnw6l0YWl0IGNlbGEgcXVpIGwnYXZhaXQgZMOpY2lkw6llIMOgIG1lIHRyaWdhdWRlcgpldCDDoCDDqXBvdXNlciBsZSBwZXRpdCBCb2lzam9saSBzYW5zIG3Dqm1lIG0naW52aXRlciDDoCBzZXMgbm9jZXMsIGxhCmJvdWdyZXNzZS4gTWFpcyBwb3VyIHJldmVuaXIgw6Agbm90cmUgY2Fub3QsIGplIHZvdXMgYXZvdWUgcXVlIG5vdXMKw6l0aW9ucyBydWRlbWVudCBlbWLDqnTDqXMgZGUgdm9pciBxdWUgQmFwdGlzdGUgRHVyYW5kIGF2YWl0IGJ1IHVuCmNvdXAgY2FyIGMnw6l0YWl0IGx1aSBxdWkgbm91cyBnb3V2ZXJuYWl0IGV0IG5vdXMgbidhdmlvbnMganVzdGUgcXVlCmxlIHRlbXBzIGRlIHJldmVuaXIgYXUgY2hhbnRpZXIgcG91ciBzaXggaGV1cmVzIGR1IG1hdGluLCBhdmFudApsZSByw6l2ZWlsIGRlcyBob21tZXMgcXVpIG5lIHRyYXZhaWxsYWllbnQgcGFzIGxlIGpvdXIgZHUgam91ciBkZQpsJ2FuLiBMYSBsdW5lIMOpdGFpdCBkaXNwYXJ1ZSBldCBpbCBuZSBmYWlzYWl0IHBsdXMgYXVzc2kgY2xhaXIKcXUnYXVwYXJhdmFudCBldCBjZSBuJ2VzdCBwYXMgc2FucyBjcmFpbnRlIHF1ZSBqZSBwcmlzIG1hIHBvc2l0aW9uIMOgCmwnYXZhbnQgZHUgY2Fub3QsIGJpZW4gZMOpY2lkw6kgw6AgYXZvaXIgbCdvZWlsIHN1ciBsYSByb3V0ZSBxdWUgbm91cwphbGxpb25zIHN1aXZyZS4gQXZhbnQgZGUgbm91cyBlbmxldmVyIGRhbnMgbGVzIGFpcnMsIGplIG1lIHJldG91cm5haQpldCBqZSBkaXMgw6AgQmFwdGlzdGU6CgotLUF0dGVudGlvbiEgbMOgLCBtb24gdmlldXguIFBpcXVlIHRvdXQgZHJvaXQgc3VyIGxhIG1vbnRhZ25lIGRlCk1vbnRyw6lhbCwgYXVzc2l0w7R0IHF1ZSB0dSBwb3VycmFzIGwnYXBlcmNldm9pci4KCi0tSmUgY29ubmFpcyBtb24gYWZmYWlyZSwgcsOpcGxpcXVhIEJhcHRpc3RlLCBldCBtw6psZS10b2kgZGVzIHRpZW5uZXMhCgpFdCBhdmFudCBxdWUgaidhaWUgZXUgbGUgdGVtcHMgZGUgcsOpcGxpcXVlcjoKCiAgQWNhYnJpcyEgQWNhYnJhcyEgQWNhYnJhbSEKICBGYWlzLW5vdXMgdm95YWdlciBwYXItZGVzc3VzIGxlcyBtb250YWduZXMhCgpWSQoKRXQgbm91cyB2b2lsw6AgcmVwYXJ0aXMgw6AgdG91dGUgdml0ZXNzZS4gTWFpcyBpbCBkZXZpbnQgYXVzc2l0w7R0CsOpdmlkZW50IHF1ZSBub3RyZSBwaWxvdGUgbidhdmFpdCBwbHVzIGxhIG1haW4gYXVzc2kgc8O7cmUsIGNhciBsZQpjYW5vdCBkw6ljcml2YWl0IGRlcyB6aWd6YWdzIGlucXVpw6l0YW50cy4gTm91cyBuZSBwYXNzw6JtZXMgcGFzIMOgIGNlbnQKcGllZHMgZHUgY2xvY2hlciBkZSBDb250cmVjb2V1ciBldCBhdSBsaWV1IGRlIG5vdXMgZGlyaWdlciDDoCBsJ291ZXN0LAp2ZXJzIE1vbnRyw6lhbCwgQmFwdGlzdGUgbm91cyBmaXQgcHJlbmRyZSBsZXMgYm9yZMOpZXMgdmVycyBsYSByaXZpw6hyZQpSaWNoZWxpZXUuIFF1ZWxxdWVzIGluc3RhbnRzIHBsdXMgdGFyZCwgbm91cyBwYXNzw6JtZXMgcGFyLWRlc3N1cyBsYQptb250YWduZSBkZSBCZWxvZWlsIGV0IGlsIG5lIHMnZW4gbWFucXVhIHBhcyBkZSBkaXggcGllZHMgcXVlIGwnYXZhbnQKZHUgY2Fub3QgbidhbGzDonQgc2UgYnJpc2VyIHN1ciBsYSBncmFuZGUgY3JvaXggZGUgdGVtcMOpcmFuY2UgcXVlCmwnw6l2w6pxdWUgZGUgUXXDqWJlYyBhdmFpdCBwbGFudMOpZSBsw6AuCgotLcOAIGRyb2l0ZSEgQmFwdGlzdGUhIMOgIGRyb2l0ZSEgbW9uIHZpZXV4LCBjYXIgdHUgdmFzIG5vdXMgZW52b3llcgpjaGV6IGxlIGRpYWJsZSwgc2kgdHUgbmUgZ291dmVybmVzIHBhcyBtaWV1eCBxdWUgw6dhIQoKRXQgQmFwdGlzdGUgZml0IGluc3RpbmN0aXZlbWVudCB0b3VybmVyIGxlIGNhbm90IHZlcnMgbGEgZHJvaXRlIGVuCm1ldHRhbnQgbGUgY2FwIHN1ciBsYSBtb250YWduZSBkZSBNb250csOpYWwgcXVlIG5vdXMgYXBlcmNldmlvbnMgZMOpasOgCmRhbnMgbGUgbG9pbnRhaW4uIEonYXZvdWUgcXVlIGxhIHBldXIgY29tbWVuw6dhaXQgw6AgbWUgdG9ydGlsbGVyLCBjYXIKc2kgQmFwdGlzdGUgY29udGludWFpdCDDoCBub3VzIGNvbmR1aXJlIGRlIHRyYXZlcnMsIG5vdXMgw6l0aW9ucwpmbGFtYsOpcyBjb21tZSBkZXMgZ29yZXRzIHF1J29uIGdyaWxsZSBhcHLDqHMgbGEgYm91Y2hlcmllLiBFdCBqZSB2b3VzCmFzc3VyZSBxdWUgbGEgZMOpZ3JpbmdvbGFkZSBuZSBzZSBmaXQgcGFzIGF0dGVuZHJlLCBjYXIgYXUgbW9tZW50IG/DuQpub3VzIHBhc3Npb25zIGF1LWRlc3N1cyBkZSBNb250csOpYWwsIEJhcHRpc3RlIG5vdXMgZml0IHByZW5kcmUgdW5lCl9zaGVlcl8gZXQsIGF2YW50IGQnYXZvaXIgZXUgbGUgdGVtcHMgZGUgbSd5IHByw6lwYXJlciwgbGUgY2Fub3QKcydlbmZvbsOnYWl0IGRhbnMgdW4gYmFuYyBkZSBuZWlnZSwgZGFucyB1bmUgw6ljbGFpcmNpZSwgc3VyIGxlIGZsYW5jCmRlIGxhIG1vbnRhZ25lLiBIZXVyZXVzZW1lbnQgcXVlIGMnw6l0YWl0IGRhbnMgbGEgbmVpZ2UgbW9sbGUsIHF1ZQpwZXJzb25uZSBuJ2F0dHJhcGEgZGUgbWFsIGV0IHF1ZSBsZSBjYW5vdCBuZSBmdXQgcGFzIGJyaXPDqS4gTWFpcyDDoApwZWluZSDDqXRpb25zLW5vdXMgc29ydGlzIGRlIGxhIG5laWdlIHF1ZSB2b2lsw6AgQmFwdGlzdGUgcXVpIGNvbW1lbmNlCsOgIHNhY3JlciBjb21tZSB1biBwb3Nzw6lkw6kgZXQgcXVpIGTDqWNsYXJlIHF1J2F2YW50IGRlIHJlcGFydGlyIHBvdXIgbGEKR2F0aW5lYXUgaWwgdmV1dCBkZXNjZW5kcmUgZW4gdmlsbGUgcHJlbmRyZSB1biB2ZXJyZS4gSidlc3NheWFpIGRlCnJhaXNvbm5lciBhdmVjIGx1aSwgbWFpcyBhbGxleiBkb25jIGZhaXJlIGVudGVuZHJlIHJhaXNvbiDDoCB1bgppdnJvZ25lIHF1aSB2ZXV0IHNlIG1vdWlsbGVyIGxhIGx1ZXR0ZS4gQWxvcnMsIHJlbmR1IMOgIGJvdXQgZGUKcGF0aWVuY2UsIGV0IHBsdXTDtHQgcXVlIGRlIGxhaXNzZXIgbm9zIMOibWVzIGF1IGRpYWJsZSBxdWkgc2UgbMOpY2hhaXQKZMOpasOgIGxlcyBiYWJpbmVzIGVuIG5vdXMgdm95YW50IGRhbnMgbCdlbWJhcnJhcywgamUgZGlzIHVuIG1vdCDDoCBtZXMKYXV0cmVzIGNvbXBhZ25vbnMgcXVpIGF2YWllbnQgYXVzc2kgcGV1ciBxdWUgbW9pLCBldCBub3VzIG5vdXMgamV0b25zCnRvdXMgc3VyIEJhcHRpc3RlIHF1ZSBub3VzIHRlcnJhc3NvbnMsIHNhbnMgbHVpIGZhaXJlIGRlIG1hbCwgZXQgcXVlCm5vdXMgcGxhw6dvbnMgZW5zdWl0ZSBhdSBmb25kIGR1IGNhbm90LC0tYXByw6hzIGwnYXZvaXIgbGlnb3TDqSBjb21tZSB1bgpib3V0IGRlIHNhdWNpc3NlIGV0IGx1aSBhdm9pciBtaXMgdW4gYsOiaWxsb24gcG91ciBsJ2VtcMOqY2hlciBkZQpwcm9ub25jZXIgZGVzIHBhcm9sZXMgZGFuZ2VyZXVzZXMsIGxvcnNxdWUgbm91cyBzZXJpb25zIGVuIGwnYWlyLiBFdDoKCiAgQWNhYnJpcyEgQWNhYnJhcyEgQWNhYnJhbSEKCm5vdXMgdm9pbMOgIHJlcGFydGlzIHN1ciB1biB0cmFpbiBkZSB0b3VzIGxlcyBkaWFibGVzLCBjYXIgbm91cwpuJ2F2aW9ucyBwbHVzIHF1J3VuZSBoZXVyZSBwb3VyIG5vdXMgcmVuZHJlIGF1IGNoYW50aWVyIGRlIGxhCkdhdGluZWF1LiBDJ2VzdCBtb2kgcXVpIGdvdXZlcm5haXMsIGNldHRlIGZvaXMtbMOgLCBldCBqZSB2b3VzIGFzc3VyZQpxdWUgaidhdmFpcyBsJ29laWwgb3V2ZXJ0IGV0IGxlIGJyYXMgc29saWRlLiBOb3VzIHJlbW9udMOibWVzIGxhCnJpdmnDqHJlIE91dGFvdWFpcyBjb21tZSB1bmUgcG91c3Npw6hyZSBqdXNxdSfDoCBsYSBQb2ludGUgw6AgR2F0aW5lYXUgZXQKZGUgbMOgIG5vdXMgcGlxdcOibWVzIGF1IG5vcmQgdmVycyBsZSBjaGFudGllci4gTm91cyBuJ2VuIMOpdGlvbnMgcGx1cwpxdSfDoCBxdWVscXVlcyBsaWV1ZXMsIHF1YW5kIHZvaWzDoC10LWlsIHBhcyBjZXQgYW5pbWFsIGRlIEJhcHRpc3RlIHF1aQpzZSBkw6l0b3J0aWxsZSBkZSBsYSBjb3JkZSBhdmVjIGxhcXVlbGxlIG5vdXMgbCdhdmlvbnMgZmljZWzDqSwgcXVpCnMnYXJyYWNoZSBzb24gYsOiaWxsb24gZXQgcXVpIHNlIGzDqHZlIHRvdXQgZHJvaXQsIGRhbnMgbGUgY2Fub3QsIGVuCmzDomNoYW50IHVuIHNhY3JlIHF1aSBtZSBmaXQgZnLDqW1pciBqdXNxdWUgZGFucyBsYSBwb2ludGUgZGVzIGNoZXZldXguCkltcG9zc2libGUgZGUgbHV0dGVyIGNvbnRyZSBsdWkgZGFucyBsZSBjYW5vdCBzYW5zIGNvdXJpciBsZSByaXNxdWUKZGUgdG9tYmVyIGQndW5lIGhhdXRldXIgZGUgZGV1eCBvdSB0cm9pcyBjZW50cyBwaWVkcywgZXQgbCdhbmltYWwKZ2VzdGljdWxhaXQgY29tbWUgTGluIHBlcmR1IGVuIG5vdXMgbWVuYcOnYW50IHRvdXMgZGUgc29uIGF2aXJvbiBxdSdpbAphdmFpdCBzYWlzaSBldCBxdSdpbCBmYWlzYWl0IHRvdXJub3llciBzdXIgbm9zIHTDqnRlcywgZW4gZmFpc2FudCBsZQptb3VsaW5ldCBjb21tZSB1biBJcmxhbmRhaXMgYXZlYyBzb24gX3NoaWxlbGFnaF8uIExhIHBvc2l0aW9uIMOpdGFpdAp0ZXJyaWJsZSwgY29tbWUgdm91cyBsZSBjb21wcmVuZXogYmllbi4gSGV1cmV1c2VtZW50IHF1ZSBub3VzCmFycml2aW9ucywgbWFpcyBqJ8OpdGFpcyB0ZWxsZW1lbnQgZXhjaXTDqSwgcXVlIHBhciB1bmUgZmF1c3NlCm1hbm9ldXZyZSBxdWUgamUgZmlzIHBvdXIgw6l2aXRlciBsJ2F2aXJvbiBkZSBCYXB0aXN0ZSwgbGUgY2Fub3QKaGV1cnRhIGxhIHTDqnRlIGQndW4gZ3JvcyBwaW4gZXQgcXVlIG5vdXMgdm9pbMOgIHRvdXMgcHLDqWNpcGl0w6lzIGVuCmJhcywgZMOpZ3JpbmdvbGFudCBkZSBicmFuY2hlIGVuIGJyYW5jaGUgY29tbWUgZGVzIHBlcmRyaXggcXVlIGwnb24KdHVlIGRhbnMgbGVzIMOpcGluZXR0ZXMuIEplIG5lIHNhaXMgcGFzIGNvbWJpZW4gamUgbWlzIGRlIHRlbXBzIMOgCmRlc2NlbmRyZSBqdXNxdSdlbiBiYXMgY2FyIGplIHBlcmRpcyBjb25uYWlzc2FuY2UgYXZhbnQgZCdhcnJpdmVyLCBldAptb24gZGVybmllciBzb3V2ZW5pciDDqXRhaXQgY29tbWUgY2VsdWkgZCd1biBob21tZSBxdWkgcsOqdmUgcXUnaWwKdG9tYmUgZGFucyB1biBwdWl0cyBxdWkgbidhIHBhcyBkZSBmb25kLgoKVklJCgpWZXJzIGxlcyBodWl0IGhldXJlcyBkdSBtYXRpbiwgamUgbSfDqXZlaWxsYWkgZGFucyBtb24gbGl0IGRhbnMgbGEKY2FiYW5lLCBvw7kgbm91cyBhdmFpZW50IHRyYW5zcG9ydMOpcyBkZXMgYsO7Y2hlcm9ucyBxdWkgbm91cyBhdmFpZW50CnRyb3V2w6lzIHNhbnMgY29ubmFpc3NhbmNlLCBlbmZvbmPDqXMganVzcXUnYXUgY291IGRhbnMgdW4gYmFuYyBkZQpuZWlnZSBkdSB2b2lzaW5hZ2UuIEhldXJldXNlbWVudCBxdWUgcGVyc29ubmUgbmUgcyfDqXRhaXQgY2Fzc8OpIGxlcwpyZWlucyBtYWlzIGplIG4nYWkgcGFzIGJlc29pbiBkZSB2b3VzIGRpcmUgcXVlIGonYXZhaXMgbGVzIGPDtHRlcyBzdXIKbGUgbG9uZyBjb21tZSB1biBob21tZSBxdWkgYSBjb3VjaMOpIHN1ciBsZXMgcmF2YWxlbWVudHMgcGVuZGFudCB0b3V0ZQp1bmUgc2VtYWluZSwgc2FucyBwYXJsZXIgZCd1biBfYmxhY2tleWVfIGV0IGRlIGRldXggb3UgdHJvaXMKZMOpY2hpcnVyZXMgc3VyIGxlcyBtYWlucyBldCBkYW5zIGxhIGZpZ3VyZS4gRW5maW4sIGxlIHByaW5jaXBhbCwKYydlc3QgcXVlIGxlIGRpYWJsZSBuZSBub3VzIGF2YWl0IHBhcyB0b3VzIGVtcG9ydMOpcyBldCBqZSBuJ2FpIHBhcwpiZXNvaW4gZGUgdm91cyBkaXJlIHF1ZSBqZSBuZSBtJ2VtcHJlc3NhaSBwYXMgZGUgZMOpbWVudGlyIGNldXggcXVpCnByw6l0ZW5kaXJlbnQgcXUnaWxzIG0nYXZhaWVudCB0cm91dsOpLCBhdmVjIEJhcHRpc3RlIGV0IGxlcyBzaXgKYXV0cmVzLCB0b3VzIHNhb3VscyBjb21tZSBkZXMgZ3JpdmVzLCBldCBlbiB0cmFpbiBkZSBjdXZlciBub3RyZQpqYW1hw69xdWUgZGFucyB1biBiYW5jIGRlIG5laWdlIGRlcyBlbnZpcm9ucy4gQyfDqXRhaXQgZMOpasOgIHBhcyBzaSBiZWF1CmQnYXZvaXIgcmlzcXXDqSBkZSB2ZW5kcmUgc29uIMOibWUgYXUgZGlhYmxlLCBwb3VyIHMnZW4gdmFudGVyIHBhcm1pCmxlcyBjYW1hcmFkZXM7IGV0IGNlIG4nZXN0IHF1ZSBiaWVuIGRlcyBhbm7DqWVzIHBsdXMgdGFyZCBxdWUgamUKcmFjb250YWkgbCdoaXN0b2lyZSB0ZWxsZSBxdSdlbGxlIG0nw6l0YWl0IGFycml2w6llLgoKVG91dCBjZSBxdWUgamUgcHVpcyB2b3VzIGRpcmUsIG1lcyBhbWlzLCBjJ2VzdCBxdWUgY2Ugbidlc3QgcGFzIHNpCmRyw7RsZSBxdSdvbiBsZSBwZW5zZSBxdWUgZCdhbGxlciB2b2lyIHNhIGJsb25kZSBlbiBjYW5vdCBkJ8OpY29yY2UsIGVuCnBsZWluIGNvZXVyIGQnaGl2ZXIsIGVuIGNvdXJhbnQgbGEgY2hhc3NlLWdhbGVyaWU7IHN1cnRvdXQgc2kgdm91cwphdmV6IHVuIG1hdWRpdCBpdnJvZ25lIHF1aSBzZSBtw6psZSBkZSBnb3V2ZXJuZXIuIFNpIHZvdXMgbSdlbiBjcm95ZXosCnZvdXMgYXR0ZW5kcmV6IMOgIGwnw6l0w6kgcHJvY2hhaW4gcG91ciBhbGxlciBlbWJyYXNzZXIgdm9zIHAndGl0cwpjb2V1cnMsIHNhbnMgY291cmlyIGxlIHJpc3F1ZSBkZSB2b3lhZ2VyIGF1eCBkw6lwZW5zIGR1IGRpYWJsZS4KCkV0IEpvZSBsZSBfY29va18gcGxvbmdlYSBzYSBtaWNvdWFuZSBkYW5zIGxhIG3DqWxhc3NlIGJvdWlsbG9ubmFudGUKYXV4IHJlZmxldHMgZG9yw6lzLCBldCBkw6ljbGFyYSBxdWUgbGEgdGlyZSDDqXRhaXQgY3VpdGUgw6AgcG9pbnQgZXQKcXUnaWwgbid5IGF2YWl0IHBsdXMgcXUnw6AgbCfDqXRpcmVyLgoKCgpMRSBMT1VQLUdBUk9VCgpPdWkhIFZvdXMgw6p0ZXMgdG91cyBkZXMgZmlucy1maW5zLCBsZXMgYXZvY2F0cyBkIE1vbnRyw6lhbCwgcG91ciB2b3VzCm1vcXVlciBkZXMgbG91cHMtZ2Fyb3VzLiBJbCBlcyB2cmFpIHF1ZSBsZSBkaWFibGUgbmUgZmFpdCBwYXMgdGFudCBkZQpjw6lyw6ltb25pZXMgYXZlYyB2b3VzIGF1dHJlcyBldCBxdSdpbCBlc3Qgc2kgc8O7ciBkZSBzb24gYWZmYWlyZSwgcXUnaWwKbidhIHBhcyBiZXNvaW4gZGUgdm91cyBmYWlyZSBjb3VyaXIgbGEgcHLDqXRlbnRhaW5lIHBvdXIgdm91cyBhdHRyYXBlcgpwYXIgbGUgY2hpZ25vbiBkdSBjb3UsIMOgIGwnaGV1cmUgcXVpIGx1aSBjb252aWVuZHJhLgoKLS1Wb3lvbnMsIHDDqHJlIEJyaW5kYW1vdXIsIG5lIHZvdXMgZsOiY2hleiBwYXMsIGV0IHNpIHZvdXMgYXZleiB2dSBkZXMKbG91cHMtZ2Fyb3VzLCByYWNvbnRlei1ub3VzIMOnYS4KCkMnw6l0YWl0IHBlbmRhbnQgbGEgZGVybmnDqHJlIGx1dHRlIMOpbGVjdG9yYWxlIGRlIFJpY2hlbGlldSwgZW50cmUKQnJ1bmVhdSBldCBNb3JnYW4sIGRhbnMgdW5lIHNhbGxlIGR1IGNvbWl0w6kgZHUgUG90LWF1LWJldXJyZSwgZW4gYmFzCmRlIFNvcmVsLiBMZXMgY2FiYWxldXJzIHLDqXZpc2FpZW50IGxlcyBsaXN0ZXMgZXQgZmFpc2FpZW50IGRlcyBjb3VycwpkJ8OpY29ub21pZSBwb2xpdGlxdWUgYXV4IGJhZGF1ZHMgcXVpIHByw6l0ZW5kYWllbnQgcydpbnTDqXJlc3NlciDDoApsZXVycyBhcmd1bWVudHMsIHBvdXIgYXR0cmFwZXIgZGUgdGVtcHMgZW4gdGVtcHMgdW4gcCd0aXQgY291cCBkZQp3aGlza3kgYmxhbmMgw6AgbGEgc2FudMOpIGRlIG1vbnNpZXVyIE1vcmdhbi4KCkRhbnMgdW5lIHNhbGxlIGJhc3NlLCByZW1wbGllIGRlIGZ1bcOpZSwgYXNzaXMgc3VyIGRlcyBiYW5jcyBncm9zc2llcnMKYXV0b3VyIGQndW5lIHRhYmxlIGRlIGJvaXMgZGUgc2FwaW4gYnJ1dCwgdmluZ3QtY2lucSDDoCB0cmVudGUKZ2FpbGxhcmRzIGRlcyBhbGVudG91cnMgY2F1c2FpZW50IHBvbGl0aXF1ZSBzb3VzIGxhIGhhdXRlIGRpcmVjdGlvbgpkJ3VuIMOpdHVkaWFudCBlbiBkcm9pdCBxdWkgcG9udGlmaWFpdCwgZmxhbnF1w6kgZGUgcXVhdHJlIG91IGNpbnEKZXhlbXBsYWlyZXMgZHUgSGFuc2FyZCBldCBkZXMgZGVybmllcnMgbGl2cmVzIGJsZXVzIGRlcyBtaW5pc3TDqHJlcwpkJ090dGF3YS4KCkxlIHDDqHJlIFBpZXJyaWNoZSBCcmluZGFtb3VyIGVuIMOpdGFpdCByZW5kdSBhdSBwYXJveHlzbWUgZCd1bgplbnRob3VzaWFzbWUgw6ljaGV2ZWzDqSBldCBjcmlhaXQgY29tbWUgdW4gcG9zc8OpZMOpOgoKLS1Ib3VycmFoIHBvdXIgbW9uc2lldXIgTW9yZ2FuISBldCBxdWUgbGUgZGlhYmxlIGVtcG9ydGUgdG91cyBsZXMKcm91Z2VzIGRlIFNvcmVsOyBjJ2VzdCB1bmUgYmFuZGUgZGUgY291cmV1eCBkZSBsb3VwLWdhcm91eC4KClVuIMOpY2xhdCBkZSByaXJlIGZvcm1pZGFibGUgYWNjdWVpbGxpdCBjZXR0ZSBmcmFzcXVlIGR1IHDDqHJlClBpZXJyaWNoZSBldCBjb21tZSBvbiBsZSBzYXZhaXQgYmF2YXJkLCDDoCBzZXMgaGV1cmVzIGQnZW50aG91c2lhc21lLApvbiByw6lzb2x1dCBkZSBsZSBmYWlyZSBjYXVzZXIuCgotLURlcyBjb3VyZXV4IGRlIGxvdXAtZ2Fyb3UhIEFsbG9ucyBkb25jIE0uIEJyaW5kYW1vdXIsIGVzdC1jZSBxdWUKdm91cyBjcm95ZXogZW5jb3JlIMOgIGNlcyBibGFndWVzLWzDoCwgZGFucyBsZSByYW5nIGR1IFBvdC1hdS1iZXVycmU/CgpDJ2VzdCBhbG9ycyBxdWUgbGUgdmllaWxsYXJkIHJpcG9zdGEgZW4gcydhdHRhcXVhbnQgYXUgbWFucXVlIGRlIHZlcnR1CmV0IGQnb3J0aG9kb3hpZSBkZXMgYXZvY2F0cyBlbiBnw6luw6lyYWwgZXQgZGUgY2V1eCBkZSBNb250csOpYWwgZW4KcGFydGljdWxpZXIuCgotLUFoIGJlbiBvdWkhIHZvdXMgw6p0ZXMgdG91cyBwYXJlaWxzLCB2b3VzIGF1dHJlcyBsZXMgYXZvY2F0cywgZXQgc2kKamUgdm91cyBkZW1hbmRhaXMgc2V1bGVtZW50IGNlIHF1ZSBjJ2VzdCBxdSd1biBsb3VwLWdhcm91LCB2b3VzCnNlcmlleiBiZW4gZW4gcGVpbmUgZGUgbWUgbGUgZGlyZS4gUXVhbmQgamUgZGlzIHF1ZSB0b3VzIGxlcyByb3VnZXMKZGUgU29yZWwgY291cmVudCBsZSBsb3VwLWdhcm91LCBjJ2VzdCB1bmUgbWFuacOocmUgZGUgcGFybGVyLCBjYXIgdm91cwpkZXZyaWV6IHNhdm9pciBxdSdpbCBmYXV0IGF2b2lyIHBhc3PDqSBzZXB0IGFucyBzYW5zIGFsbGVyIMOgIGNvbmZlc3NlLApwb3VyIHF1ZSBsZSBkaWFibGUgcHVpc3NlIHMnZW1wYXJlciBkJ3VuIGhvbW1lIGV0IGx1aSBmYWlyZSBwb3Vzc2VyCmR1IHBvaWwgZW4gZGVkYW5zLiBKZSBzdXBwb3NlIHF1ZSB2b3VzIG5lIHNhdmV6IG3Dqm1lIHBhcyBxdSd1biBob21tZQpxdWkgY291cnQgbGUgbG91cC1nYXJvdSBhIGxhIGNvdWVubmUgY29tbWUgdW5lIHBlYXUgZGUgbG91cCByZXZpcsOpZQrDoCBsJ2VudmVycywgYXZlYyBsZSBwb2lsIGVuIGRlZGFucy4gVW4gc2F1dmFnZSBkZSBTYWludC1GcmFuw6dvaXMKY29ubmHDrnQgw6dhLCBtYWlzIHVuIGF2b2NhdCBkZSBNb250csOpYWwsIMOnYSBwZXV0IGJhdmFzc2VyIHN1ciBsYQpwb2xpdGlxdWUsIG1haXMgZW4gZGVob3JzIGRlIMOnYSwgZmF1dCBwYXMgbHVpIGRlbWFuZGVyIGdyYW5kLWNob3NlCnN1ciBsZXMgY2hvc2VzIHPDqXJpZXVzZXMgZXQgc3VyIGNlIHF1aSBjb25jZXJuZSBsZXMgaGFiaXRhbnRzLgoKLS1DJ2VzdCB2cmFpLCByw6lwb25kaXJlbnQgcXVlbHF1ZXMgZmFyY2V1cnMgcXVpIHNlIHJhbmdlYWllbnQgYXZlYyBsZQpww6hyZSBQaWVycmljaGUsIGNvbnRyZSBsJ2F2b2NhdCBlbiBoZXJiZS4KCi0tT3VpISB0b3V0IMOnYSwgYydlc3QgdHLDqHMgYmllbiwgcmlwb3N0YSBsJ8OpdHVkaWFudCBkYW5zIGxlIGJ1dCBkZQpwb3Vzc2VyIFBpZXJyaWNoZSDDoCBib3V0LCBtYWlzIMOnYSBuJ2VzdCBwYXMgdW5lIHbDqXJpdGFibGUgaGlzdG9pcmUgZGUKbG91cC1nYXJvdS4gRW4gYXZlei12b3VzIGphbWFpcyB2dSwgdm91cywgdW4gbG91cC1nYXJvdSwgTS4KQnJpbmRhbW91cj8gQydlc3QgY2VsYSBxdWUgamUgdm91ZHJhaXMgc2F2b2lyLgoKLS1PdWksIGonZW4gYWkgdnUgdW4gbG91cC1nYXJvdSwgcGFzIHVuIHNldWwsIG1haXMgdmluZ3QtY2lucSwgZXQgc2kKamUgdm91cyByZW5jb250cmFpcyBzZXVsZW1lbnQgc3VyIGxlIGJvcmQgZCd1biBmb3Nzw6ksIGRhbnMgdW5lIHRhbGxlCmRlIGhhcnQtcm91Z2UgYXByw6hzIG5ldWYgaGV1cmVzIGR1IHNvaXIsIGplIGdhZ2VyYWlzIHF1ZSB2b3VzIGF1cmllegpsZSBwb2lsIGF1c3NpIGxvbmcgcXUndW4gbG91cCwgdm91cyBxdWkgcGFybGV6LCBjYXIgw6dhIHZvdXMKZW1iw6p0ZXJhaXQgYmVuIGRlIG1lIG1vbnRyZXIgdm90cmUgYmlsbGV0IGRlIGNvbmZlc3Npb24uIExlIHBsdXMgcXVlCsOnYSBwb3VycmFpdCDDqnRyZSBjZSBzZXJhaXQgdW4gbWF1dmFpcyBiaWxsZXQgZGUgcMOicXVlcyBkZSByZW5hcmQuIEFoIQpvbiB2b3VzIGNvbm5hw650IGxlcyBnZW5zIGRlIE1vbnRyw6lhbC4gRmF1dCBwYXMgdmVuaXIgbm91cyBwb3Vzc2VyIGRlcwpwb2ludGVzLCBwYXJjZSBxdWUgdm91cyDDqnRlcyBwbHVzIMOpZHVxdcOpcyBxdWUgbm91cyBhdXRyZXMuCgotLU91aSEgb3VpLCB0b3V0IMOnYSwgYydlc3QgYmllbiBiZWF1IG1haXMgYydlc3QgcG91ciBub3VzIGVuZG9ybWlyCnF1ZSB2b3VzIGJsYWd1ZXogY29tbWUgw6dhLiBBbGxleiBkaXJlIMOnYSBhdXggZ2VucyBkZSBCcnVuZWF1LiBDZSBxdWkKbWUgZmF1dCDDoCBtb2kgYydlc3QgZGVzIHByZXV2ZXMsIGV0IHNpIHZvdXMgc2F2ZXogdW5lIGhpc3RvaXJlIGRlCmxvdXAtZ2Fyb3UsIHJhY29udGV6LWxhLCBjYXIgb24gdmEgZmluaXIgcGFyIGNyb2lyZSBxdWUgdm91cyBuJ2VuCnNhdmV6IHBhcyBldCBxdWUgdm91cyB2b3VsZXogdm91cyBtb3F1ZXIgZGUgbm91cyBhdXRyZXMuCgotLU91aS1kYSEgb3VpLiBFaCBiZW4gaidlbiBhaSB1bmUgaGlzdG9pcmUgZXQgamUgdmFzIHZvdXMgbGEgY29udGVyLAptYWlzIMOgIHVuZSBjb25kaXRpb246IHZvdXMgYWxsZXogbm91cyBmYWlyZSBzZXJ2aXIgdW4gZ2FsbG9uIGRlCndoaXNreSBkJ8OpbGVjdGlvbiBwb3VyIHF1ZSBub3VzIGJ1dmlvbnMgw6AgbGEgc2FudMOpIGRlIG1vbnNpZXVyCk1vcmdhbiwgbm90cmUgY2FuZGlkYXQuCgpMYSBwcm9wb3NpdGlvbiBmdXQgYWdyw6nDqWUgZXQgbGUgcCd0aXQgbGFpdCDDqWxlY3RvcmFsIGZ1dCB2ZXJzw6kgw6AgbGEKcm9uZGUsIGhhdXNzYW50IGQndW4gY3JhbiBsJ2VudGhvdXNpYXNtZSBkw6lqw6Agc3VyY2hhdWZmw6kgZGUgY2V0CmF1ZGl0b2lyZSBkw6lzaW50w6lyZXNzw6khCgpFdCBhcHLDqHMgYXZvaXIgY29uc3RhdMOpIHF1J2lsIG5lIHJlc3RhaXQgcGx1cyB1bmUgZ291dHRlIGRlIGxpcXVpZGUKYXUgZm9uZCBkZSBsYSBtZXN1cmUgZCd1biBnYWxsb24gcXUnb24gYXZhaXQgcGxhY8OpIHN1ciB1bmUgcGlsZSBkZQpsaXR0w6lyYXR1cmUgw6lsZWN0b3JhbGUsIGF1IGJlYXUgbWlsaWV1IGRlIGxhIHRhYmxlLCBQaWVycmljaGUKQnJpbmRhbW91ciBwcml0IGxhIHBhcm9sZToKCkMnZXN0IHBhcyBwb3VyIHVuIHZlcnJlIGRlIHdoaXNreSBkdSBnb3V2ZXJuZW1lbnQgcXVlIGplIHZvdWRyYWlzCnZvdXMgY29udGVyIHVuZSBtZW50ZXJpZS4gSWwgbWUgZmF1ZHJhaXQgcXVlbHF1ZSBjaG9zZSBkZSBwbHVzCnPDqXJpZXV4IHF1ZSDDp2EgcXVlIGplIG1lIG1ldHRlIGVuIGNvbnNjaWVuY2UgZW4gdGVtcHMgZCfDqWxlY3Rpb24uIExlcwpncm9zIGJvbm5ldHMgc2UgdmVuZGVudCB0cm9wIGNoZXIgw6AgT3R0YXdhIGNvbW1lIMOgIFF1w6liZWMsIHBvdXIgcXVlCmxlcyBnZW5zIGR1IGNvbXTDqSBkZSBTb3JlbCBwYXNzZW50IHBvdXIgZ8OidGVyIGxlcyBwcml4LiBKZSB2b3VzIGRpcmFpCmRvbmMgbGEgdsOpcml0w6kgZXQgcmllbiBxdWUgbGEgdsOpcml0w6ksIGNvbW1lIG9uIGRpdCDDoCBsYSBjb3VyIGRlIFNvcmVsCnF1YW5kIG9uIGVzdCBhcHBlbMOpIGNvbW1lIHTDqW1vaW4uIFBvdXIgZGVzIGxvdXBzLWdhcm91cywgaidlbiBhaSB2dQphc3NleiBwb3VyIGZhaXJlIHVuIHLDqWdpbWVudCwgZGFucyBtb24gamV1bmUgdGVtcHMsIGxvcnNxdWUgamUKbmF2aWd1YWlzIGwnw6l0w6kgw6AgYm9yZCBkZXMgYmF0ZWF1eCBldCBxdWUgamUgZmFpc2FpcyBsYSBww6pjaGUgYXUKcGV0aXQgcG9pc3NvbiwgbCdoaXZlciwgYXV4IGNoZW5hdXggZGVzIFRyb2lzLVJpdmnDqHJlczsgbWFpcyBqZSB2b3VzCmxlIGRpcmFpIGJpZW4gcXVlIGonZW4gYWkgamFtYWlzIGTDqWxpdnLDqS4gSidhdmFpcyBiaWVuIGRvdXplIG91CnRyZWl6ZSBhbnMgZXQgaifDqXRhaXMgX2Nvb2tfIMOgIGJvcmQgZCd1biBjaGFsYW5kIGF2ZWMgbW9uIGTDqWZ1bnQKcMOocmUgcXVpIMOpdGFpdCBjYXBpdGFpbmUuIEMnw6l0YWl0IGxlIGpvdXIgZGUgbGEgVG91c3NhaW50IGV0IG5vdXMKbW9udGlvbnMgZGUgUXXDqWJlYyBhdmVjIHVuZSBjYXJnYWlzb24gZGUgY2hhcmJvbiwgcGFyIHVuZSBncmFuZGUKYnJpc2UgZGUgbm9yZC1lc3QuIE5vdXMgYXZpb25zIGTDqXBhc3PDqSBsZSBsYWMgU2FpbnQtUGllcnJlIGV0IHN1ciBsZXMKaHVpdCBoZXVyZXMgZHUgc29pciBub3VzIG5vdXMgdHJvdXZpb25zIMOgIGxhIHTDqnRlIGR1IGxhYy4gSWwgZmFpc2FpdApub2lyIGNvbW1lIGxlIGxvdXAgZXQgaWwgYnJ1bWFzc2FpdCBtw6ptZSB1biBwZXUsIGNlIHF1aSBub3VzCmVtcMOqY2hhaXQgZGUgYmllbiBkaXN0aW5ndWVyIGxlIHBoYXJlIGRlIGwnw65sZSBkZSBHcsOiY2UuIEonw6l0YWlzIGRlCnZpZ2llIMOgIGwnYXZhbnQgZXQgbW9uIGTDqWZ1bnQgcMOocmUgw6l0YWl0IMOgIGxhIGJhcnJlLiBWb3VzIHNhdmV6IHF1ZQpsJ2VudHLDqWUgZHUgY2hlbmFsIG4nZXN0IHBhcyBsYXJnZSBldCBxdSdpbCBmYXV0IG91dnJpciBsJ29laWwgcG91ciBuZQpwYXMgcyfDqWNob3Vlci4gSWwgZmFpc2FpdCB1bmUgYm9ubmUgYnJpc2UgZXQgbm91cyBhdmlvbnMgcHJpcyBub3RyZQpwZXJyb3F1ZXQgZXQgbm90cmUgaHVuaWVyLCBjZSBxdWkgbmUgbm91cyBlbXDDqmNoYWl0IHBhcyBkZSBtb250ZXIKZ3JhbmQgdHJhaW4gc3VyIG5vdHJlIGdyYW5kZSB2b2lsZS4gVG91dCDDoCBjb3VwIGxlIHRlbXBzIHBhcnV0CnMnw6ljbGFpcmNpciBldCBub3VzIGFwZXLDp8O7bWVzIHN1ciBsYSByaXZlIGRlIGwnw65sZSBkZSBHcsOiY2UsIHF1ZSBub3VzCnJhc2lvbnMgZW4gbW9udGFudCwgdW4gZ3JhbmQgZmV1IGRlIHNhcGluYWdlcyBhdXRvdXIgZHVxdWVsIGRhbnNhaWVudAp1bmUgdmluZ3RhaW5lIGRlIHBvc3PDqWTDqXMgcXVpIGF2YWllbnQgZGVzIHTDqnRlcyBldCBkZXMgcXVldWVzIGRlIGxvdXAKZXQgZG9udCBsZXMgeWV1eCBicmlsbGFpZW50IGNvbW1lIGRlcyB0aXNvbnMuIERlcyByaWNhbmVtZW50cwp0ZXJyaWJsZXMgYXJyaXZhaWVudCBqdXNxdSfDoCBub3VzIGV0IG9uIHBvdXZhaXQgYXBlcmNldm9pciB2YWd1ZW1lbnQKbGUgY29ycHMgZCd1biBob21tZSBjb3VjaMOpIHBhciB0ZXJyZSBldCBxdWUgcXVlbHF1ZXMgbWF1ZGl0cyDDqXRhaWVudAplbiB0cmFpbiBkZSBkw6ljb3VwZXIgcG91ciBlbiBmYWlyZSB1biBmcmljb3QuIEMnw6l0YWl0IHVuZSByb25kZSBkZQpsb3Vwcy1nYXJvdXMgcXVlIGxlIGRpYWJsZSBhdmFpdCByw6l1bmlzIHBvdXIgbGV1ciBmYWlyZSBib2lyZSBkdSBzYW5nCmRlIGNocsOpdGllbiBldCBsZXVyIGZhaXJlIG1hbmdlciBkZSBsYSB2aWFuZGUgZnJhw65jaGUuIEplIGNvdXJ1cyDDoApsJ2FycmnDqHJlIHBvdXIgYXR0aXJlciBsJ2F0dGVudGlvbiBkZSBtb24gZMOpZnVudCBww6hyZSBldCBkZSBCYXB0aXN0ZQpMYWZsZXVyLCBsZSBtYXRlbG90IHF1aSBuYXZpZ3VhaXQgYXZlYyBub3VzLCBtYWlzIHF1aSBuJ8OpdGFpdCBwYXMgZGUKcXVhcnQgw6AgY2UgbW9tZW50LWzDoC4gSWxzIGF2YWllbnQgZMOpasOgIGFwZXLDp3UgbGUgcGlxdWUtbmlxdWUgZGVzCmxvdXBzLWdhcm91cy4gQmFwdGlzdGUgYXZhaXQgcHJpcyBsYSBiYXJyZSBldCBtb24gZMOpZnVudCBww6hyZSDDqXRhaXQKZW4gdHJhaW4gZGUgY2hhcmdlciBzb24gZnVzaWwgcG91ciB0aXJlciBzdXIgbGVzIHBvc3PDqWTDqXMgcXVpCmNvbnRpbnVhaWVudCDDoCBjcmllciBjb21tZSBkZXMgcGVyZHVzIGVuIHNhdXRhbnQgZW4gcm9uZCBhdXRvdXIgZHUKZmV1LiBJbCBmYWxsYWl0IHNlIGTDqXDDqmNoZXIgY2FyIGxlIGJhdGVhdSBmaWxhaXQgYm9uIHRyYWluIGRldmFudCBsZQpub3JkLWVzdC4KCi0tVml0ZSEgUGllcnJpY2hlLCB2aXRlISBkb25uZS1tb2kgbGEgYnJhbmNoZSBkZSByYW1lYXUgYsOpbml0LCBxdSdpbAp5IGEgw6AgbGEgdMOqdGUgZGUgbW9uIGxpdCwgZGFucyBsYSBjYWJpbmUuIFR1IHRyb3V2ZXJhcyBhdXNzaSB1bgp0csOoZmxlIMOgIHF1YXRyZSBmZXVpbGxlcyBkYW5zIHVuIGxpdnJlIGRlIHByacOocmVzLCBldCBwdWlzIHByZW5kcwpkZXV4IGJhbGxlcyBldCBzYXVjZS1sZXMgZGFucyBsJ2VhdSBiw6luaXRlLiBWaXRlLCBkw6lww6pjaGUtdG9pIQoKSmUgdHJvdXZhaSBiaWVuIGxlIHJhbWVhdSBiw6luaXQsIG1haXMgamUgbmUgcHVzIG1ldHRyZSBsYSBtYWluIHN1ciBsZQp0csOoZmxlIMOgIHF1YXRyZSBmZXVpbGxlcyBldCBkYW5zIG1hIHByw6ljaXBpdGF0aW9uIGplIHJlbnZlcnNhaSBsZQpwZXRpdCBiw6luaXRpZXIgc2FucyBwb3V2b2lyIHNhdWNlciBsZXMgYmFsbGVzIGRlZGFucy4KCk1vbiBww6hyZSBwdWx2w6lyaXNhIGxlIHJhbWVhdSBzZWMgZW50cmUgc2VzIGRvaWd0cyBldCBzJ2VuIHNlcnZpdCBwb3VyCmJvdXJyZXIgc29uIGZ1c2lsLCBtYWlzIGplIG4nb3NhaSBsdWkgYXZvdWVyIHF1ZSBsZSB0csOoZmxlIMOgIHF1YXRyZQpmZXVpbGxlcyBuJ8OpdGFpdCBwYXMgbMOgIGV0IHF1ZSBsZXMgYmFsbGVzIG4nYXZhaWVudCBwYXMgw6l0w6kgbW91aWxsw6llcwpkYW5zIGwnZWF1IGLDqW5pdGUuIElsIG1pdCBsZXMgZGV1eCBiYWxsZXMgZGFucyBsZSBjYW5vbiwgZml0IHVuIGdyYW5kCnNpZ25lIGRlIGNyb2l4IGV0IHZpc2EgZGFucyBsZSB0YXMgZGUgbcOpY3LDqWFudHMuCgpMZSBjb3VwIHBhcnRpdCwgbWFpcyBjJ2VzdCBjb21tZSBzJ2lsIGF2YWl0IGNoYXJnw6kgc29uIGZ1c2lsIGF2ZWMgZGVzCnBvaXMgZXQgbGVzIGxvdXBzLWdhcm91cyBjb250aW51w6hyZW50IMOgIGRhbnNlciBldCDDoCByaWNhbmVyLCBlbiBub3VzCm1vbnRyYW50IGR1IGRvaWd0LgoKTGVzIG1hdWRpdHMhIGRpdCBtb24gZMOpZnVudCBww6hyZSwgamUgdmFpcyBlc3NheWVyIGVuY29yZSB1bmUgZm9pcy4KCkV0IGlsIHJlY2hhcmdlYSBzb24gZnVzaWwgZXQgZW4gZ3Vpc2UgZGUgYmFsbGUgaWwgZm91cnJhIHNvbiBjaGFwZWxldApkYW5zIGxlIGNhbm9uLgoKRXQgcGFmIQoKQ2V0dGUgZm9pcyBsZSBjb3VwIGF2YWl0IHBvcnTDqSEgTGUgZmV1IHMnw6l0ZWlnbml0IHN1ciBsYSByaXZlIGV0IGxlcwpsb3Vwcy1nYXJvdXMgcydlbmZ1aXJlbnQgZGFucyBsZXMgYm9pcyBlbiBwb3Vzc2FudCBkZXMgY3JpcyDDoCBmYWlyZQpmcsOpbWlyIHVuIGNhYmFsZXVyIGQnw6lsZWN0aW9ucy4KCkxlcyBncmFpbmVzIGR1IGNoYXBlbGV0IGxlcyBhdmFpZW50IMOpdmlkZW1tZW50IHJlbmR1cyBtYWxhZGVzIGV0IGxlcwphdmFpZW50IGRpc3BlcnPDqXMsIG1haXMgY29tbWUgYyfDqXRhaXQgdW4gY2hhcGVsZXQgbmV1ZiBxdWkgbidhdmFpdApwYXMgZW5jb3JlIMOpdMOpIGLDqW5pdCwgbW9uIGTDqWZ1bnQgcMOocmUgw6l0YWl0IGQnb3BpbmlvbiBxdSdpbCBuJ2F2YWl0CnBhcyByw6l1c3NpIMOgIGxlcyBkw6lsaXZyZXIgZXQgcXUnaWxzIGlyYWllbnQgc2FucyBkb3V0ZSBjb250aW51ZXIgbGV1cgpzYWJiYXQgc3VyIHVuIGF1dHJlIHBvaW50IGRlIGwnw65sZS4KCkNlIHF1aSBhdmFpdCBlbXDDqmNow6kgbGUgcHJlbWllciBjb3VwIGRlIHBvcnRlciwgYydlc3QgcXVlIGxlIGZ1c2lsCm4nYXZhaXQgcGFzIMOpdMOpIGJvdXJyw6kgYXZlYyBsZSB0csOoZmxlIMOgIHF1YXRyZSBmZXVpbGxlcyBldCBxdWUgbGVzCmJhbGxlcyBuJ2F2YWllbnQgcGFzIMOpdMOpIHBsb25nw6llcyBkYW5zIGwnZWF1IGLDqW5pdGUuCgotLUhlaW4hIHF1J2VzdC1jZSBxdWUgdm91cyBkaXRlcyBkZSDDp2EsIE0uIGwnYXZvY2F0LiBKJ2VuIGFpLXQteSB2dQpkZXMgbG91cHMtZ2Fyb3VzPyBjb250aW51ZSBQaWVycmljaGUgQnJpbmRhbW91ci4KCi0tT3VpISBMJ2hpc3RvaXJlIG4nZXN0IHBhcyBtYXV2YWlzZSwgbWFpcyBqZSB0cm91dmUgcXVlIHZvdXMgbGVzCmF2ZXogdnVzIHVuIHBldSBkZSBsb2luIGV0IHF1J2lsIHkgYSBiaWVuIGxvbmd0ZW1wcyBkZSDDp2EuIFNpIGxhCmNob3NlIHMnw6l0YWl0IHBhc3PDqWUgbCdhdXRvbW5lIGRlcm5pZXIsIGplIGNyb2lyYWlzIHF1ZSBjZSBzb250IGxlcwptZW1icmVzIGR1IENsdWIgZGUgcMOqY2hlIGRlIFBoYW5ldWYgZXQgZGUgSm9lIFJpZW5kZWF1IGRlIE1vbnRyw6lhbApxdWUgdm91cyBhdmV6IGFwZXLDp3VzIHN1ciBsJ8OubGUgZGUgR3LDomNlIGVuIHRyYWluIGRlIGNvdXJpciBsYQpnYWxpcGV0dGUuIFZvdXMgYXZleiBkaXQgdm91cy1tw6ptZSBxdWUgdG91cyBsZXMgcm91Z2VzIMOpdGFpZW50IGRlcwpjb3VyZXV4IGRlIGxvdXAtZ2Fyb3UgZXQgdm91cyBzYXZleiBiaWVuLCBNLiBCcmluZGFtb3VyLCBxdSdpbCBuJ3kgYQpwYXMgZGUgYmxldXMgZGFucyBjZSBjbHViLWzDoCEKCi0tQWghIHZvdXMgdm91cyBtb3F1ZXogZGUgbW9uIGhpc3RvaXJlIHNhbnMgZG91dGUgcXVlIGMnw6l0YWl0IGVuCnRlbXBzIGQnw6lsZWN0aW9uIGV0IHF1ZSBqJ2F2YWlzIHByaXMgdW4gY291cCBkZSB0cm9wIGR1IHdoaXNreSBkdQpjYW5kaWRhdCBkZSBjZSB0ZW1wcy1sw6AuIEVoIGJpZW4hIGFycsOqdGV6IHVuIHBldSwgamUgbidhaSBwYXMgZmluaSBldApqJ2VuIGFpIHVuZSBhdXRyZSBxdWUgbW9uIGTDqWZ1bnQgcMOocmUgbSdhIHJhY29udMOpZSwgY2Ugc29pci1sw6AsIGVuCm1vbnRhbnQgw6AgTW9udHLDqWFsIMOgIGJvcmQgZGUgc29uIGJhdGVhdS4gQydlc3QgdW5lIGhpc3RvaXJlIHF1aSBsdWkKZXN0IGFycml2w6llIMOgIGx1aS1tw6ptZSBldCBqZSB2b3VzIGF2ZXJ0aXMgZCdhdmFuY2UgcXVlIGplIG1lIGbDomNoZXJhaQp1biBwZXUgc8OpcmlldXNlbWVudCBzaSB2b3VzIGZhaXRlcyBzZXVsZW1lbnQgc2VtYmxhbnQgZCdlbiBkb3V0ZXIuCgpNb24gZMOpZnVudCBww6hyZSwgZGFucyBzb24gamV1bmUgdGVtcHMsIGZhaXNhaXQgbGEgY2hhc3NlIGF2ZWMgbGVzCnNhdXZhZ2VzIGRlIFNhaW50LUZyYW7Dp29pcyBkYW5zIGxlIGhhdXQgZHUgU2FpbnQtTWF1cmljZSBldCBkYW5zIGxlCnBheXMgZGUgbGEgTWF0YXdhbi4gQyfDqXRhaXQgdW4gbHVyb24gcXVpIG4nYXZhaXQgcGFzIGZyb2lkIGF1eCB5ZXV4CmV0LCBlbnRyZSBub3VzLCBqJ3BldXggYmllbiB2b3VzIGRpcmUgcXUnaWwgbidoYcOvc3NhaXQgcGFzIGxlcwpzYXV2YWdlc3Nlcy4gTGUgY3Vyw6kgZGUgbGEgbWlzc2lvbiBkZXMgQWLDqW5ha2lzIGwnYXZhaXQgYXZlcnRpCmRldXggb3UgdHJvaXMgZm9pcyBkZSBiaWVuIHByZW5kcmUgZ2FyZGUgw6AgbHVpLCBjYXIgbGVzIHNhdXZhZ2VzCnBvdXJyYWllbnQgbHVpIGZhaXJlIHVuIG1hdXZhaXMgcGFydGksIHMnaWxzIGwnYXR0cmFwYWllbnQgw6AgcsO0ZGVyCmF1dG91ciBkZSBsZXVycyBjYWJhbmVzLiBNYWlzIGxlcyBjb3VyZXVycyBkZXMgYm9pcyBkZSBjZSB0ZW1wcy1sw6AgbmUKY3JhaWduYWllbnQgcGFzIGdyYW5kLWNob3NlIGV0LCBtYSBmb2ksIHZvdXMgYXV0cmVzLCBsZXMgZ29kZWx1cmVhdXgKZGUgTW9udHLDqWFsLCB2b3VzIHNhdmV6IGJpZW4gcXUnaWwgZmF1dCBxdWUgamV1bmVzc2Ugc2UgcGFzc2UuIE1vbgpkw6lmdW50IHDDqHJlIMOpdGFpdCBkb25jIHBhcnRpIHBvdXIgYWxsZXIgZmFpcmUgbGEgY2hhc3NlIGF1IGNhc3RvciwKYXUgcmF0IG11c3F1w6kgZXQgYXUgY2FyY2Fqb3UgZGFucyBsZSBoYXV0IGR1IFNhaW50LU1hdXJpY2UuIFVuZSBmb2lzCnJlbmR1IGzDoCwgaWwgYXZhaXQgY2FtcMOpIGF2ZWMgbGVzIEFiw6luYWtpcywgZXQgc2EgY2FiYW5lIGRlIHNhcGluYWdlcwrDqXRhaXQgw6AgcGVpbmUgY291dmVydGUgZGUgbmVpZ2UgcXUnaWwgYXZhaXQgZMOpasOgIGpldMOpIGwnb2VpbCBzdXIgdW5lCmJlbGxlIHNhdXZhZ2Vzc2UgcXVpIGF2YWl0IHN1aXZpIHNvbiBww6hyZSDDoCBsYSBjaGFzc2UuIEMnw6l0YWl0IHVuZQpiZWxsZSBmaWxsZSwgdW5lIGJlbGxlISBtYWlzIGVsbGUgcGFzc2FpdCBwb3VyIMOqdHJlIHNvcmNpw6hyZSBkYW5zIGxhCnRyaWJ1IGV0IGVsbGUgc2UgZmFpc2FpdCBjcmFpbmRyZSBkZSB0b3VzIGxlcyBjaGFzc2V1cnMgcXVpIG4nb3NhaWVudApsJ2FwcHJvY2hlci4gTW9uIGTDqWZ1bnQgcMOocmUgcXVpIMOpdGFpdCB1biBicmF2ZSBzZSBwaXF1YSBhdSBqZXUgZXQsCmNvbW1lIGlsIHBhcmxhaXQgY291cmFtbWVudCBzYXV2YWdlLCBpbCBjb21tZW7Dp2Egw6AgY29udGVyIGZsZXVyZXR0ZSDDoApsYSBzYXV2YWdlc3NlLiBMZSBww6hyZSBkZSBsYSBiZWxsZSBmYWlzYWl0IGRlcyBhYnNlbmNlcyBkZSBkZXV4IG91CnRyb2lzIGpvdXJzIHBvdXIgYWxsZXIgdGVuZHJlIHNlcyBwacOoZ2VzIGV0IHNlcyBhdHRyYXBlcywgZXQgcGVuZGFudApjZSB0ZW1wcy1sw6AsIGxlcyBjaG9zZXMgYWxsYWllbnQgcm9uZGVtZW50LiBJbCBmYXV0IHZvdXMgZGlyZSBxdWUKbGEgc2F1dmFnZXNzZSDDqXRhaXQgdW5lIHYnbGltZXVzZSBkZSBwYXllbm5lIHF1aSBuJ2FsbGFpdCBqYW1haXMgw6AKbCfDqWdsaXNlIGRlIFNhaW50LUZyYW7Dp29pcyBldCBvbiBwcsOpdGVuZGFpdCBtw6ptZSBxdSdlbGxlIG4nYXZhaXQKamFtYWlzIMOpdMOpIGJhcHRpc8OpZS4gUGFzIGJlc29pbiBkZSB2b3VzIGRpcmUgdG91dCBhdSBsb25nIGNvbW1lbnQKbGVzIGNob3NlcyBzZSBwYXNzw6hyZW50LCBtYWlzIG1vbiBkw6lmdW50IHDDqHJlIGZpbml0IHBhciBvYnRlbmlyIHVuCnJlbmRlei12b3VzLCDDoCBxdWVscXVlcyBhcnBlbnRzIGR1IGNhbXAsIHN1ciBsZSBjb3VwIGRlIG1pbnVpdCBkJ3VuCmRpbWFuY2hlIGF1IHNvaXIuCgpJbCB0cm91dmEgYmllbiBsJ2hldXJlIHVuIHBldSBzaW5ndWxpw6hyZSBldCBsZSBqb3VyIHVuIHBldSBzdXNwZWN0LAptYWlzIHF1YW5kIG9uIGVzdCBhbW91cmV1eCBvbiBwYXNzZSBwYXItZGVzc3VzIGJpZW4gZGVzIGNob3Nlcy4KSWwgc2UgcmVuZGl0IGRvbmMgw6AgbCdlbmRyb2l0IGTDqXNpZ27DqSBhdmFudCBsJ2hldXJlIGV0IGlsIGZ1bWFpdAp0cmFucXVpbGxlbWVudCBzYSBwaXBlIHBvdXIgcHJlbmRyZSBwYXRpZW5jZSwgbG9yc3F1J2lsIGVudGVuZGl0IGR1CmJydWl0IGRhbnMgbGEgZmFyZG9jaGUuIElsIHMnaW1hZ2luYSBxdWUgYyfDqXRhaXQgc2Egc2F1dmFnZXNzZSBxdWkKcydhcHByb2NoYWl0LCBtYWlzIGlsIGNoYW5nZWEgYmllbnTDtHQgZCdpZMOpZSBlbiBhcGVyY2V2YW50IGRldXggeWV1eApxdWkgYnJpbGxhaWVudCBjb21tZSBkZXMgX2ZpZm9sbGV0c18gZXQgcXVpIGxlIGZpeGFpZW50IGQndW5lCm1hbmnDqHJlIMOpdHJhbmdlLiBJbCBjcnV0IGQnYWJvcmQgcXVlIGMnw6l0YWl0IHVuIGNoYXQgc2F1dmFnZSBvdQp1biBjYXJjYWpvdSwgZXQgaWwgZXV0IGp1c3RlIGxlIHRlbXBzIGQnw6lwYXVsZXIgc29uIGZ1c2lsIHF1J2lsCm5lIHF1aXR0YWl0IGphbWFpcyBldCBkJ2Vudm95ZXIgdW5lIGJhbGxlIGVudHJlIGxlcyBkZXV4IHlldXgKZGUgbCdhbmltYWwgcXVpIHMnYXZhbsOnYWl0IGVuIHJhbXBhbnQgZGFucyBsYSBuZWlnZSBldCBzb3VzIGxlcwpicm91c3NhaWxsZXMuIE1haXMgaWwgYXZhaXQgbWFucXXDqSBzb24gY291cCBldCwgYXZhbnQgcXUnaWwgZXV0IGxlCnRlbXBzIGRlIHNlIGdhcmVyLCBsYSBiw6p0ZSDDqXRhaXQgc3VyIGx1aSwgZHJlc3PDqWUgc3VyIHNlcyBwYXR0ZXMgZGUKZGVycmnDqHJlIGV0IHTDomNoYW50IGRlICdsZW50b3VyZXIgYXZlYyBzZXMgcGF0dGVzIGRlIGRldmFudC4gQyfDqXRhaXQKdW4gbG91cCwgbWFpcyB1biBsb3VwIGltbWVuc2UsIGNvbW1lIG1vbiBkw6lmdW50IHDDqHJlIG4nZW4gYXZhaXQKamFtYWlzIHZ1LiBJbCBzb3J0aXQgc29uIGNvdXRlYXUgZGUgY2hhc3NlIGV0IGwnaWTDqWUgbHVpIHZpbnQgcXUnaWwKYXZhaXQgYWZmYWlyZSDDoCB1biBsb3VwLWdhcm91LiBJbCBzYXZhaXQgcXVlIGxhIHNldWxlIG1hbmnDqHJlIGRlIHNlCmTDqWJhcnJhc3NlciBkZSBjZXMgbWF1ZGl0ZXMgYsOqdGVzLWzDoCwgYyfDqXRhaXQgZGUgbGV1ciB0aXJlciBkdSBzYW5nCmVuIGxldXIgZmFpc2FudCB1bmUgYmxlc3N1cmUsIGRhbnMgbGUgZnJvbnQsIGVuIGZvcm1lIGRlIGNyb2l4LiBDJ2VzdApjZSBxdSdpbCB0ZW50YSBkZSBmYWlyZSwgbWFpcyBsZSBsb3VwLWdhcm91IHNlIGTDqWZlbmRhaXQgY29tbWUgdW4KZGFtbsOpIHF1J2lsIMOpdGFpdCwgZXQgbW9uIGTDqWZ1bnQgcMOocmUgZXNzYXlhIHZhaW5lbWVudCBkZSBsdWkgcGxvbmdlcgpzb24gY291dGVhdSBkYW5zIGxlIGNvcnBzLCBwdWlzcXUnaWwgbmUgcG91dmFpdCBwYXMgcGFydmVuaXIgw6AgbGUKZMOpbGl2cmVyLiBNYWlzIGxhIHBvaW50ZSBkdSBjb3V0ZWF1IHBsaWFpdCBjaGFxdWUgZm9pcyBjb21tZSBzJ2lsIGV1dApmcmFwcMOpIGRhbnMgdW4gY8O0dMOpIGRlIGN1aXIgw6Agc2VtZWxsZS4gTGEgbHV0dGUgc2UgcHJvbG9uZ2VhaXQgZXQKZGV2ZW5haXQgdGVycmlibGUgZXQgZGFuZ2VyZXVzZS4gTGUgbG91cC1nYXJvdSBkw6ljaGlyYWl0IGxlcyBmbGFuY3MKZGUgbW9uIGTDqWZ1bnQgcMOocmUgYXZlYyBzZXMgbG9uZ3VlcyBncmlmZmVzIGxvcnNxdWUgY2VsdWktY2ksIGQndW4KY291cCBkZSBzb24gY291dGVhdSBxdWkgY291cGFpdCBjb21tZSB1biByYXNvaXIsIHLDqXVzc2l0IMOgIGx1aQplbmxldmVyIHVuZSBwYXR0ZSBkZSBkZXZhbnQuIExhIGLDqnRlIHBvdXNzYSB1biBodXJsZW1lbnQgcXVpCnJlc3NlbWJsYWl0IGF1IGNyaSBkJ3VuZSBmZW1tZSBxdSdvbiDDqWdvcmdlIGV0IGRpc3BhcnV0IGRhbnMgbGEKZm9yw6p0LiBNb24gZMOpZnVudCBww6hyZSBuJ29zYSBwYXMgbGEgcG91cnN1aXZyZSwgbWFpcyBpbCBtaXQgbGEKcGF0dGUgZGFucyBzb24gc2FjIGV0IHJlbnRyYSBhdSBjYW1wIHBvdXIgcGFuc2VyIHNlcyBibGVzc3VyZXMgcXVpLApiaWVuIHF1ZSBkb3Vsb3VyZXVzZXMsIG5lIHByw6lzZW50YWllbnQgY2VwZW5kYW50IGF1Y3VuIGRhbmdlci4gTGUKbGVuZGVtYWluLCBsb3JzcXUnaWwgcydpbmZvcm1hIGRlIGxhIHNhdXZhZ2Vzc2UsIGlsIGFwcHJpdCBxdSdlbGxlCsOpdGFpdCBwYXJ0aWUsIHBlbmRhbnQgbGEgbnVpdCwgYXZlYyBzb24gcMOocmUsIGV0IHBlcnNvbm5lIG5lCmNvbm5haXNzYWl0IGxhIHJvdXRlIHF1J2lscyBhdmFpZW50IHByaXNlLiBNYWlzIGp1Z2V6IGRlIGwnw6l0b25uZW1lbnQKZGUgbW9uIGTDqWZ1bnQgcMOocmUgbG9yc3F1J2VuIGZvdWlsbGFudCBkYW5zIHNvbiBzYWMgcG91ciB5IGNoZXJjaGVyCnVuZSBwYXR0ZSBkZSBsb3VwLCBpbCB5IHRyb3V2YSB1bmUgbWFpbiBkZSBzYXV2YWdlc3NlLCBjb3Vww6llIGp1c3RlCmF1LWRlc3N1cyBkdSBwb2lnbmV0LiBDJ8OpdGFpdCB0b3V0IGJvbm5lbWVudCBsYSBtYWluIGRlIGxhIGNvcXVpbmUKcXVpIHMnw6l0YWl0IHRyYW5zZm9ybcOpZSBlbiBsb3VwLWdhcm91IHBvdXIgYm9pcmUgc29uIHNhbmcgZXQKbCdlbnZveWVyIGNoZXogbGUgZGlhYmxlIHNhbnMgbHVpIGRvbm5lciBzZXVsZW1lbnQgbGUgdGVtcHMgZGUgZmFpcmUKdW4gYWN0ZSBkZSBjb250cml0aW9uLiBNb24gcMOocmUgbmUgcGFybGEgcGFzIGRlIGxhIGNob3NlIGF1eCBzYXV2YWdlcwpkdSBjYW1wLCBtYWlzIHNvbiBwcmVtaWVyIHNvaW4sIGVuIGRlc2NlbmRhbnQgw6AgU2FpbnQtRnJhbsOnb2lzLCBsZQpwcmludGVtcHMgc3VpdmFudCwgZnV0IGRlIHMnaW5mb3JtZXIgZGUgbGEgc2F1dmFnZXNzZSBxdWkgw6l0YWl0CnJldmVudWUgYXUgdmlsbGFnZSwgcHLDqXRlbmRhbnQgYXZvaXIgcGVyZHUgbGEgbWFpbiBkcm9pdGUgZGFucyB1bgpwacOoZ2Ugw6AgY2FyY2Fqb3UuIExhIHNjw6lsw6lyYXRlIMOpdGFpdCBkaXNwYXJ1ZSBldCBjb3VyYWl0IHByb2JhYmxlbWVudApsZSBmYXJmYWRldCBwYXJtaSBsZXMgcmVuw6lnYXRzIGRlIHNhIHRyaWJ1LgoKVm9pbMOgIG1vbiBoaXN0b2lyZSwgbW9uc2lldXIgbCdpbmNyw6lkdWxlLCB0ZXJtaW5hIGxlIHDDqHJlIFBpZXJyaWNoZSwKZXQgamUgdm91cyBhc3N1cmUgcXUnZWxsZSBlc3QgZGlhYmxlbWVudCBwbHVzIHZyYWllIHF1ZSB0b3V0IGNlIHF1ZQp2b3VzIHZlbmV6IG5vdXMgcmFjb250ZXIgw6AgcHJvcG9zIGRlIExlY3RvciBMYW5nZXZpbiwgZGUgbW9uc2lldXIKTW9yZ2FuIGV0IGR1IHAndGl0IEJhcHRpc3RlIEd1w6h2cmVtb250LiBUw6JjaGV6IHNldWxlbWVudCBkZSB2b3VzCmTDqWxpdnJlciBkZSBCcnVuZWF1IGNvbW1lIG1vbiBkw6lmdW50IHDDqHJlIHMnw6l0YWl0IGTDqWxpdnLDqSBkZSBsYQpzYXV2YWdlc3NlLCBtYWlzLCBzJ2lsIGZhdXQgZW4gY3JvaXJlIEJhcHRpc3RlIFJvdWlsbGFyZCBxdWkgY2FiYWxlCmRlIGwnYXV0cmUgY8O0dMOpLCBqJ2FpIGJpZW4gcGV1ciBxdWUgbGVzIHJvdWdlcyBub3VzIGZhc3NlbnQgdG91cwpjb3VyaXIgbGUgbG91cC1nYXJvdSwgbGUgc29pciBkZSBsJ8OpbGVjdGlvbi4gRW4gYXR0ZW5kYW50IHByZW5vbnMgdW4KYXV0J2NvdXAgw6AgbGEgc2FudMOpIGRlIG5vdHJlIGNhbmRpZGF0IGV0IGFsbG9ucyBub3VzIGNvdWNoZXIsIGNoYWN1bgpjaGV6IG5vdXMuCgoKCkxBIELDilRFIMOAIEdSQU5EJ1FVRVVFCgpJCgpDJ2VzdCBhYnNvbHVtZW50IGNvbW1lIGplIHRlIGxlIGRpcywgaW5zaXN0YSBsZSBwJ3RpdCBQaWVycmljaGUKRGVzcm9zaWVycywgaidhaSB2dSBtb2ktbcOqbWUgbGEgcXVldWUgZGUgbGEgYsOqdGUuIFVuZSBxdWV1ZSBwb2lsdWUKZCd1biByb3VnZSDDqWNhcmxhdGUgZXQgY291cMOpZSBlbiBzaWZmbGV0IHBhcyBsb2luIGR1Li4uIHRyb2dub24uClVuZSBxdWV1ZSBkZSBzaXggcGllZHMsIG1vbiB2aWV1eCEKCi0tT3VpIGMnZXN0IGJlbiBib24gZGUgdm9pciBsYSBxdWV1ZSBkZSBsYSBiw6p0ZSwgbWFpcyBjJ3ZsaW1ldXggZGUKRmFuZmFuIExhemV0dGUgZXN0IHNpIGJsYWd1ZXVyIHF1J2lsIG1lIGZhdWRyYWl0IGQnYXV0cmVzIHByZXV2ZXMgcXVlCsOnYSBwb3VyIGxlIGNyb2lyZSBzdXIgcGFyb2xlLgoKLS1EJ2Fib3JkLCBjb250aW51YSBQaWVycmljaGUsIHR1IGF2b3VlcmFzIGJlbiBxdSdpbCBhIHRvdXQgY2UgcXUnaWwKZmF1dCBwb3VyIHNlIGZhaXJlIHBvdXJzdWl2cmUgcGFyIGxhIGLDqnRlIMOgIGdyYW5kJ3F1ZXVlLiBJbCBlc3QKYmxhZ3VldXIsIHR1IHZpZW5zIGRlIGxlIGRpcmUsIGlsIGFpbWUgw6AgcHJlbmRyZSBsYSBnb3V0dGUsIHRvdXQgbGUKbW9uZGUgbGUgc2FpdCwgZXQgw6dhIGNvdXJ0IHN1ciBsYSBodWl0acOobWUgYW5uw6llIHF1J2lsIGZhaXQgZGVzCnDDonF1ZXMgZGUgcmVuYXJkLiBTJ2lsIGZhdXQgw6p0cmUgc2VwdCBhbnMgc2FucyBmYWlyZSBzZXMgcMOicXVlcwpvcmRpbmFpcmVzIHBvdXIgY291cmlyIGxlIGxvdXAtZ2Fyb3UsIGlsIHN1ZmZpdCBkZSBmYWlyZSBkZXMgcMOicXVlcwpkZSByZW5hcmQgcGVuZGFudCBsYSBtw6ptZSBww6lyaW9kZSBwb3VyIHNlIGZhaXJlIGF0dGFxdWVyIHBhciBsYSBiw6p0ZQrDoCBncmFuZCdxdWV1ZS4gRXQgaWwgbCdhIHJlbmNvbnRyw6llIGVuIGZhY2UgZHUgbWFub2lyIGRlIERhdXRyYXllLApkYW5zIGxlcyBncmFuZHMgYXJicmVzIHF1aSBib3JkZW50IGxhIHJvdXRlIG/DuSBsZSBzb2xlaWwgbmUgcMOpbsOodHJlCmphbWFpcywgbcOqbWUgZW4gcGxlaW4gbWlkaS4gSnVzdGUgw6AgbGEgbcOqbWUgcGxhY2Ugb8O5IExvdWlzb24gTGFyb2NoZQpzJ8OpdGFpdCBmYWl0IGFycmFjaGVyIHVuIG9laWwgcGFyIGxlIG1hdWRpdCBhbmltYWwsIGlsIGEgZW52aXJvbiB1bmUKZGl6YWluZSBkJ2FubsOpZXMuCgpBaW5zaSBjYXVzYWllbnQgUGllcnJpY2hlIERlc3Jvc2llcnMgZXQgTWF4aW1lIFNhbnNzb3VjaSwgZW4gcHJlbmFudApjbGFuZGVzdGluZW1lbnQgdW4gcCd0aXQgY291cCBkYW5zIGxhIG1haXNvbm5ldHRlIGR1IHZpZWlsIEFuZHLDqQpMYWxpYmVydMOpIHF1aSB2ZW5kYWl0IHVuIHZlcnJlIHBhciBjaSBldCBwYXIgbMOgIMOgIHNlcyBjb25uYWlzc2FuY2VzLApzYW5zIHRyb3AgcydvY2N1cGVyIGRlcyBsb2lzIGRlIHBhdGVudGVzIG91IGRlcyByZW1vbnRyYW5jZXMgZHUgY3Vyw6kuCgotLUV0IHRvaSwgQW5kcsOpLCBxdWUgcGVuc2VzLXR1IGRlIHRvdXQgw6dhPyBkZW1hbmRhIFBpZXJyaWNoZS4gVHUgYXMKZMO7IGVuIHZvaXIgZGVzIGLDqnRlcyDDoCBncmFuZCdxdWV1ZSBkYW5zIHRvbiBqZXVuZSB0ZW1wcy4gQ3JvaXMtdHUgcXVlCkZhbmZhbiBMYXpldHRlIGVuIGFpdCByZW5jb250csOpIHVuZSwgw6AgRGF1dHJheWU/CgotLUMnZXN0IGNlIHF1J2lsIHByw6l0ZW5kLCBtZXMgZW5mYW50cywgZXQsIGNvbW1lIGxlIHZvaWNpIHF1aSB2aWVudApwcmVuZHJlIHNhIG5pcHBlIG9yZGluYWlyZSwgdm91cyBuJ2F2ZXogcXUnw6AgbGUgZmFpcmUgamFzZXIgbHVpLW3Dqm1lCnNpIHZvdXMgdm91bGV6IGVuIHNhdm9pciBwbHVzIGxvbmcuCgpJSQoKRmFuZmFuIExhemV0dGUgw6l0YWl0IHVuIG1hdXZhaXMgc3VqZXQgcXVpIGZhaXNhaXQgbGUgZMOpc2VzcG9pciBkZSBzZXMKcGFyZW50cywgcXVpIHNlIG1vcXVhaXQgZGVzIHNlcm1vbnMgZHUgY3Vyw6ksIHF1aSBzZW1haXQgbGUgZMOpc29yZHJlCmRhbnMgbGEgcGFyb2lzc2UgZXQgcXVpLS1jb25zw6lxdWVuY2UgZmF0YWxlLS3DqXRhaXQgbGEgY29xdWVsdWNoZSBkZQp0b3V0ZXMgbGVzIGpvbGllcyBmaWxsZXMgZGVzIGFsZW50b3Vycy4KCkxlIHDDqHJlIExhemV0dGUgbCdhdmFpdCBtaXMgYXUgY29sbMOoZ2UgZGUgTCdBc3NvbXB0aW9uLCBkJ2/DuSBpbApzJ8OpdGFpdCDDqWNoYXBww6kgcG91ciBhbGxlciDDoCBNb250csOpYWwgbCdhaXJlIHVuIG3DqXRpZXIgcXVlbGNvbnF1ZS4gRXQKcHVpcyBpbCBhdmFpdCBwYXNzw6kgZGV1eCBzYWlzb25zIGRhbnMgbGVzIGNoYW50aWVycyBldCDDqXRhaXQgcmV2ZW51CmNoZXogc29uIHDDqHJlIHF1aSBzZSBmYWlzYWl0IHZpZXV4LCBwb3VyIGRpcmlnZXIgbGVzIHRyYXZhdXggZGUgbGEKZmVybWUuCgpGYW5mYW4gw6l0YWl0IHVuIHJ1ZGUgZ2FycyBhdSB0cmF2YWlsLCBpbCBmYWxsYWl0IGx1aSBkb25uZXIgY2VsYSwgZXQKaWwgYmVzb2duYWl0IGNvbW1lIHF1YXRyZSBsb3JzcXUnaWwgcyd5IG1ldHRhaXQ7IG1haXMgaWwgw6l0YWl0CmpvdXJuYWxpZXIsIGNvbW1lIG9uIGRpdCBhdSBwYXlzLCBldCBpbCBmYWlzYWl0IGFzc2V6IHNvdXZlbnQgZGVzCm5ldXZhaW5lcyBxdWkgbifDqXRhaWVudCBwYXMgdG91am91cnMgc291cyBsJ2ludm9jYXRpb24gZGUgc2FpbnQKRnJhbsOnb2lzLVhhdmllci4KCkNvbW1lIGlsIGZhaXNhaXQgdG91dCDDoCBzYSB0w6p0ZSwgaWwgYXZhaXQgcHJpcyBwb3VyIGhhYml0dWRlIGRlIG5lCmZhaXJlIHNlcyBww6JxdWVzIHF1J2FwcsOocyBsYSBww6lyaW9kZSBkZSByaWd1ZXVyLCBldCBpbCBtZXR0YWl0IHVuZQplc3DDqGNlIGRlIGZhbmZhcm9ubmFkZSDDoCBuZSBzJ2FwcHJvY2hlciBkZXMgc2FjcmVtZW50cyBxdSdhcHLDqHMgcXVlCnRvdXMgbGVzIGZpZMOobGVzIHMnw6l0YWllbnQgbWlzIGVuIHLDqGdsZSBhdmVjIGxlcyBjb21tYW5kZW1lbnRzIGRlCmwnw4lnbGlzZS4KCkJyZWYsIEZhbmZhbiDDqXRhaXQgdW4gbHVyb24gcXVlIGxlcyBjb21tw6hyZXMgZHUgdmlsbGFnZSB0cmFpdGFpZW50IGRlCl9wZW5kYXJkXywgcXVlIGxlcyBtYW1hbnMgcXVpIGF2YWllbnQgZGVzIGZpbGxlcyDDoCBtYXJpZXIKY3JhaWduYWllbnQgY29tbWUgbGEgcGVzdGUgZXQgcXVpIHBhc3NhaXQsIHNlbG9uIGxlcyBsaWV1eCBvw7kgb24KcydvY2N1cGFpdCBkZSBzYSBwZXJzb25uZSwgcG91ciB1biBib24gZGlhYmxlIG91IHBvdXIgdW4gbWF1dmFpcwpnYXJuZW1lbnQuCgpQaWVycmljaGUgRGVzcm9zaWVycyBldCBNYXhpbWUgU2Fuc3NvdWNpIHNlIGxldsOocmVudCBwb3VyIGx1aQpzb3VoYWl0ZXIgbGEgYmllbnZlbnVlIGV0IHBvdXIgbCdpbnZpdGVyIMOgIHByZW5kcmUgdW4gY291cCwgcXUnaWwKcydlbXByZXNzYSBkZSBuZSBwYXMgcmVmdXNlci4KCi0tRXQgbWFpbnRlbmFudCwgRmFuZmFuLCByYWNvbnRlLW5vdXMgdG9uIGhpc3RvaXJlIGRlIGLDqnRlIMOgCmdyYW5kJ3F1ZXVlLiBNYXhpbWUgdmV1dCBmYWlyZSBsJ2luY3LDqWR1bGUgZXQgcHLDqXRlbmQgcXVlIHR1IHZldXgKbm91cyBlbiBmYWlyZSBhY2Nyb2lyZS4KCi0tT3VpZMOgLCBvdWkhIEVoIGJpZW4sIHRvdXQgY2UgcXVlIGplIHBldXggdm91cyBkaXJlLCBjJ2VzdCBxdWUgc2kKYydlw7t0IMOpdMOpIE1heGltZSBTYW5zc291Y2kgcXVpIGV1dCByZW5jb250csOpIGxhIGLDqnRlIGF1IGxpZXUgZGUgbW9pLApqZSBjcm9pcyBxdSdpbCBuZSByZXN0ZXJhaXQgcGx1cyBwZXJzb25uZSBwb3VyIHJhY29udGVyIGwnaGlzdG9pcmUsCmF1IGpvdXIgZCdhdWpvdXJkJ2h1aS4KCkV0LCBzJ2FkcmVzc2FudCDDoCBNYXhpbWUgU2Fuc3NvdWNpOgoKLS1FdCB0b2ksIG1vbiBwJ3RpdCBNYXhpbWUsIHRvdXQgY2UgcXVlIGplIHRlIHNvdWhhaXRlLCBjJ2VzdCBkZSBuZQpqYW1haXMgdGUgdHJvdXZlciBlbiBwYXJlaWxsZSBjb21wYWduaWU7IHR1IG4nYXMgcGFzIGxlcyBicmFzIGFzc2V6CmxvbmdzLCBsZXMgcmVpbnMgYXNzZXogc29saWRlcyBldCBsZSBjb3JwcyBhc3NleiByYWlkZSBwb3VyIHRlIHRpcmVyCmQnYWZmYWlyZSBkYW5zIHVuZSBwYXJlaWxsZSByZW5jb250cmUuIMOJY291dGUtbW9pIGJpZW4gZXQgdHUgbSdlbgpkaXJhcyBkZXMgbm91dmVsbGVzIGVuc3VpdGUuCgpFdCBwdWlzOgoKLS1BbmRyw6ksIHRyb2lzIHZlcnJlcyBkZSBNb2xzb24gcsOpZHVpdC4KCklJSQoKLS1EJ2Fib3JkLCBqZSBuJ2FpIHBhcyBkJ29iamVjdGlvbiDDoCByZWNvbm5hw650cmUgcXUnaWwgeSBhIHBsdXMgZGUKc2VwdCBhbnMgcXVlIGplIGZhaXMgZGVzIHDDonF1ZXMgZGUgcmVuYXJkIGV0IG3Dqm1lLCBlbiB5IHLDqWZsw6ljaGlzc2FudApiaWVuLCBqJ2F2b3VlcmFpIHF1ZSBqJ2FpIG3Dqm1lIHBhc3PDqSBkZXV4IGFucyBzYW5zIGZhaXJlIGRlIHDDonF1ZXMgZHUKdG91dCwgbG9yc3F1ZSBqJ8OpdGFpcyBkYW5zIGxlcyBjaGFudGllcnMuIEonYXZhaXMgZG9uYyBjZSBxdSdpbApmYWxsYWl0IHBvdXIgcmVuY29udHJlciBsYSBiw6p0ZSwgcydpbCBmYXV0IGVuIGNyb2lyZSBCYXB0aXN0ZQpHYWxsaWVuLCBxdWkgYSDDqXR1ZGnDqSBjZXMgY2hvc2VzLWzDoCBkYW5zIGxlcyBncm9zIGxpdnJlcyBxdSdpbCBhCnRyb3V2w6lzIGNoZXogbGUgbm90YWlyZSBMYXRvdXIuCgpKZSBtZSBtb3F1YWlzIGJpZW4gZGUgbGEgY2hvc2UgYXVwYXJhdmFudDsgbWFpcywgbG9yc3F1ZSBqZSB2b3VzCmF1cmFpIHJhY29udMOpIGNlIHF1aSB2aWVudCBkZSBtJ2Fycml2ZXIgw6AgRGF1dHJheWUsIGRhbnMgbGEgbnVpdCBkZQpzYW1lZGkgw6AgZGltYW5jaGUsIHZvdXMgbSdlbiBkaXJleiBkZXMgbm91dmVsbGVzLiBKJ8OpdGFpcyBwYXJ0aQpzYW1lZGkgbWF0aW4gYXZlYyB2aW5ndC1jaW5xIHBvY2hlcyBkJ2F2b2luZSBwb3VyIGFsbGVyIGxlcyBwb3J0ZXIKw6AgQmVydGhpZXIgY2hleiBSw6ltaSBUcmFuY2hlbW9udGFnbmUgZXQgcG91ciBlbiByYXBwb3J0ZXIgcXVlbHF1ZXMKbWFyY2hhbmRpc2VzOiB1biBwJ3RpdCBiYXJpbCBkZSBtw6lsYXNzZSwgdW4gcCd0aXQgcXVhcnQgZGUgY2Fzc29uYWRlLAp1bmUgbWV1bGUgZGUgZnJvbWFnZSwgdW5lIGRhbWUtamVhbm5lIGRlIGphbWHDr3F1ZSBldCBxdWVscXVlcyBsaXZyZXMKZGUgdGjDqSBwb3VyIG5vcyBwcm92aXNpb25zIGQnaGl2ZXIuIExlIGdyYW5kIFNlbSDDoCBHcm9zLUxvdWlzCkNoYW1wYWduZSBtJ2FjY29tcGFnbmFpdCBldCBub3VzIGZhaXNpb25zIGxlIHZveWFnZSBlbiBncmFuZCdjaGFyZXR0ZQphdmVjIG1hIHBvdWxpY2hlIGJsb25kZS0tbGEgbWVpbGxldXJlIGLDqnRlIGRlIGxhIHBhcm9pc3NlLCBzYW5zIG1lCnZhbnRlciwgbmkgbGEgcG91bGljaGUgbm9uIHBsdXMuIE5vdXMgw6l0aW9ucyDDoCBCZXJ0aGllciBzdXIgbGVzCm9uemUgaGV1cmVzIGRlIGxhIG1hdGluw6llIGV0LCBhcHLDqHMgYXZvaXIgcsOpZ2zDqSBub3MgYWZmYWlyZXMgY2hlegpUcmFuY2hlbW9udGFnbmUsIGTDqWNoYXJnw6kgbm90cmUgYXZvaW5lLCByZWNoYXJnw6kgbm9zIHByb3Zpc2lvbnMsCmlsIG5lIG5vdXMgcmVzdGFpdCBwbHVzIHF1J8OgIHByZW5kcmUgdW4gcCd0aXQgY291cCBlbiBhdHRlbmRhbnQgbGEKZnJhw65jaGUgZHUgc29pciBwb3VyIHJlcHJlbmRyZSBsYSByb3V0ZSBkZSBMYW5vcmFpZS4gTGUgZ3JhbmQgU2VtCkNoYW1wYWduZSBmcsOpcXVlbnRlIHVuZSBwZXRpdGUgTGF2aW9sZXR0ZSBkZSBsYSBwZXRpdGUgcml2acOocmUgZGUKQmVydGhpZXIsIGV0IGlsIHBhcnRpdCDDoCBsJ2F2YW5jZSBwb3VyIGFsbGVyIGZhcmF1ZGVyIHNhIHByw6l0ZW5kdWUKanVzcXUnw6AgbCdoZXVyZSBkdSBkw6lwYXJ0LgoKSmUgZGV2YWlzIGxlIHByZW5kcmUgZW4gcGFzc2FudCwgc3VyIGxlcyBodWl0IGhldXJlcyBkdSBzb2lyLCBldCwKcG91ciB0dWVyIGxlIHRlbXBzLCBqJ2FsbGFpIHJlbmNvbnRyZXIgZGVzIGNvbm5haXNzYW5jZXMgY2hlegpKYWxiZXJ0LCBjaGV6IEdhZ25vbiBldCBjaGV6IEd1aWxtZXR0ZSwgb8O5IG5vdXMgcGF5w6JtZXMgY2hhY3VuIHVuZQp0b3VybsOpZSwgc2FucyBjZXBlbmRhbnQgbm91cyBncmlzZXIgc8OpcmlldXNlbWVudCBuaSBsZXMgdW5zIG5pIGxlcwphdXRyZXMuIExhIGpvdXJuw6llIGF2YWl0IMOpdMOpIGJlbGxlLCBtYWlzLCBzdXIgbGUgc29pciwgbGUgdGVtcHMKZGV2aW50IGxvdXJkIGV0IGplIG0nYXBlcsOndXMgcXVlIG5vdXMgbmUgdGFyZGVyaW9ucyBwYXMgw6AgYXZvaXIgZGUKbCdvcmFnZS4gSmUgc2VyYWlzIGJpZW4gcGFydGkgdmVycyBsZXMgc2l4IGhldXJlcywgbWFpcyBqJ2F2YWlzIGRvbm7DqQpyZW5kZXotdm91cyBhdSBncmFuZCBTZW0gw6AgaHVpdCBoZXVyZXMgZXQgamUgbmUgdm91bGFpcyBwYXMgZMOpcmFuZ2VyCnVuIGdhcsOnb24gcXVpIF9nb3NzYWl0XyBzw6lyaWV1c2VtZW50IGV0IHBvdXIgbGUgYm9uIG1vdGlmLgpKJ2F0dGVuZGlzIGRvbmMgcGF0aWVtbWVudCBldCBqZSBkb25uYWkgdW5lIGJvbm5lIHBvcnRpb24gw6AgbWEKcG91bGljaGUsIGNhciBqJ2F2YWlzIGwnaW50ZW50aW9uIGRlIHJldG91cm5lciDDoCBMYW5vcmFpZSBzdXIgdW4gYm9uCnRyYWluLiDDgCBodWl0IGhldXJlcyBwcsOpY2lzZXMsIGonw6l0YWlzIMOgIGxhIHBldGl0ZSByaXZpw6hyZSwgY2hleiBsZQpww6hyZSBMYXZpb2xldHRlLCBvw7kgaWwgbWUgZmFsbHV0IGRlc2NlbmRyZSBwcmVuZHJlIHVuIGNvdXAgZXQgc2FsdWVyCmxhIGNvbXBhZ25pZS4gQ29tbWUgb24gbmUgcGFydCBqYW1haXMgc3VyIHVuZSBzZXVsZSBqYW1iZSwgaWwgZmFsbHV0CmVuIHByZW5kcmUgdW4gZGV1eGnDqG1lIHBvdXIgcsOpdGFibGlyIGwnw6lxdWlsaWJyZSwgY29tbWUgZGl0IEJhcHRpc3RlCkdhbGxpZW4sIGV0IGFwcsOocyBhdm9pciBkaXQgbGUgYm9uc29pciDDoCB0b3V0IGxlIG1vbmRlLCBub3VzIHByw65tZXMKbGUgQ2hlbWluIGR1IFJvaS4gTGEgcGx1aWUgbmUgdG9tYmFpdCBwYXMgZW5jb3JlLCBtYWlzIGlsIMOpdGFpdApmYWNpbGUgZGUgdm9pciBxdSdvbiBhdXJhaXQgdW5lIHRlbXDDqnRlIGF2YW50IGxvbmd0ZW1wcyBldCBqZQpmb3VldHRhaSBtYSBwb3VsaWNoZSBkYW5zIGwnZXNwb2lyIGQnYXJyaXZlciBjaGV6IG5vdXMgYXZhbnQgbGUKZ3JhaW4uCgpJVgoKRW4gZW50cmFudCBjaGV6IGxlIHDDqHJlIExhdmlvbGV0dGUsIGonYXZhaXMgYmllbiByZW1hcnF1w6kgcXVlIFNlbQphdmFpdCBwcmlzIHVuIGNvdXAgZGUgdHJvcDsgZXQgYydlc3QgZmFjaWxlIMOgIHZvaXIgY2hleiBsdWksIGNhcgp2b3VzIHNhdmV6IHF1J2lsIGEgbGVzIHlldXggY29tbWUgdW5lIG1vcnVlIGdlbMOpZSwgbG9yc3F1J2lsIHNlIG1ldAplbiBmw6p0ZSwgbWFpcyBsZXMgZGV1eCBkZXJuaWVycyBjb3VwcyBkdSBkw6lwYXJ0IGxlIGZpbmlyZW50CmNvbXBsw6h0ZW1lbnQgZXQgaWwgcydlbmRvcm1pdCBjb21tZSB1bmUgbWFybW90dGUgYXUgbW91dmVtZW50IGRlIGxhCmNoYXJyZXR0ZS4gSmUgbHVpIHBsYcOnYWkgbGEgdMOqdGUgc3VyIHVuZSBib3R0ZSBkZSBmb2luIHF1ZSBqJ2F2YWlzIGF1CmZvbmQgZGUgbGEgdm9pdHVyZSBldCBqZSBwYXJ0aXMgZ3JhbmQgdHJhaW4uIE1haXMgaidhdmFpcyDDoCBwZWluZQpmYWl0IHVuZSBkZW1pLWxpZXVlLCBxdWUgbGEgdGVtcMOqdGUgw6ljbGF0YSBhdmVjIHVuZSBmdXJldXIgdGVycmlibGUuClZvdXMgdm91cyByYXBwZWxleiBsYSB0ZW1ww6p0ZSBkZSBzYW1lZGkgZGVybmllci4gTGEgcGx1aWUgdG9tYmFpdCDDoAp0b3JyZW50cywgbGUgdmVudCBzaWZmbGFpdCBkYW5zIGxlcyBhcmJyZXMgZXQgY2Ugbidlc3QgcXVlIHBhciBsYQpsdWV1ciBkZXMgw6ljbGFpcnMgcXVlIGonZW50cmV2b3lhaXMgcGFyZm9pcyBsYSByb3V0ZS4gSGV1cmV1c2VtZW50CnF1ZSBtYSBwb3VsaWNoZSBhdmFpdCBsJ2luc3RpbmN0IGRlIG1lIHRlbmlyIGRhbnMgbGUgbWlsaWV1IGR1CmNoZW1pbiwgY2FyIGlsIGZhaXNhaXQgbm9pciBjb21tZSBkYW5zIHVuIGZvdXIuIExlIGdyYW5kIFNlbSBkb3JtYWl0CnRvdWpvdXJzLCBiaWVuIHF1J2lsIGbDu3QgdHJlbXDDqSBjb21tZSB1bmUgbGF2ZXR0ZS4gSmUgbidhaSBwYXMgYmVzb2luCmRlIHZvdXMgZGlyZSBxdWUgaifDqXRhaXMgZGFucyBsZSBtw6ptZSDDqXRhdC4gTm91cyBhcnJpdsOibWVzIGFpbnNpCmp1c3F1ZSBjaGV6IExvdWlzIFRyZW1wZSBkb250IGonYXBlcsOndXMgbGEgbWFpc29uIGphdW5lIMOgIGxhIGx1ZXVyCmQndW4gw6ljbGFpciBxdWkgbSdhdmV1Z2xhLCBldCBxdWkgZnV0IHN1aXZpIGQndW4gY291cCBkZSB0b25uZXJyZSBxdWkKZml0IHRyZW1ibGVyIG1hIGLDqnRlIGV0IGxhIGZpdCBzJ2FycsOqdGVyIHRvdXQgY291cnQuIFNlbSBsdWktbcOqbWUKcyfDqXZlaWxsYSBkZSBzYSBsw6l0aGFyZ2llIGV0IHBvdXNzYSB1biBnw6ltaXNzZW1lbnQgc3VpdmkgZCd1biBjcmkgZGUKdGVycmV1cjoKCi0tUmVnYXJkZSwgRmFuZmFuISBsYSBiw6p0ZSDDoCBncmFuZCdxdWV1ZSEKCkplIG1lIHJldG91cm5haSBwb3VyIGFwZXJjZXZvaXIgZGVycmnDqHJlIGxhIHZvaXR1cmUgZGV1eCBncmFuZHMgeWV1eApxdWkgYnJpbGxhaWVudCBjb21tZSBkZXMgdGlzb25zIGV0LCB0b3V0IGVuIG3Dqm1lIHRlbXBzLCB1biDDqWNsYWlyIG1lCmZpdCB2b2lyIHVuIGFuaW1hbCBxdWkgcG91c3NhIHVuIGh1cmxlbWVudCBkZSBfYsOqdGUtw6Atc2VwdC10w6p0ZXNfCmVuIHNlIGJhdHRhbnQgbGVzIGZsYW5jcyBkJ3VuZSBxdWV1ZSByb3VnZSBkZSBzaXggcGllZHMgZGUgbG9uZy4tLUonYWkKbGEgcXVldWUgY2hleiBtb2kgZXQgamUgdm91cyBsYSBtb250cmVyYWkgcXVhbmQgdm91cyB2b3VkcmV6IS0tSmUgbmUKc3VpcyBndcOocmUgcGV1cmV1eCBkZSBtYSBuYXR1cmUsIG1haXMgaidhdm91ZSBxdWUgbWUgdm95YW50IGFpbnNpLCDDoApsYSBub2lyY2V1ciwgc2V1bCBhdmVjIHVuIGhvbW1lIHNhb3VsLCBhdSBtaWxpZXUgZCd1bmUgdGVtcMOqdGUKdGVycmlibGUgZXQgZW4gZmFjZSBkJ3VuZSBiw6p0ZSBjb21tZSDDp2EsIGplIHNlbnRpcyB1biBmcmlzc29uIG1lCnBhc3NlciBkYW5zIGxlIGRvcyBldCBqZSBsYW7Dp2FpIHVuIGdyYW5kIGNvdXAgZGUgZm91ZXQgw6AgbWEganVtZW50CnF1aSBwYXJ0aXQgY29tbWUgdW5lIGZsw6hjaGUuIEplIHZpcyBxdWUgaidhdmFpcyBsYSBkb3VibGUgY2hhbmNlIGRlCm1lIGNhc3NlciBsZSBjb3UgZGFucyB1bmUgY291bMOpZSBvdSBlbiByb3VsYW50IGVuIGJhcyBkZSBsYSBjw7R0ZSwgb3UKYmllbiBkZSBtZSB0cm91dmVyIGZhY2Ugw6AgZmFjZSBhdmVjIGNldHRlIGZhbWV1c2UgYsOqdGUgw6AgZ3JhbmQncXVldWUKZG9udCBvbiBtJ2F2YWl0IHRhbnQgcGFybMOpLCBtYWlzIMOgIGxhcXVlbGxlIGplIGNyb3lhaXMgw6AgcGVpbmUuIEMnZXN0CmFsb3JzIHF1ZSB0b3V0ZXMgbWVzIHDDonF1ZXMgZGUgcmVuYXJkIG1lIHJldmlucmVudCDDoCBsYSBtw6ltb2lyZSBldCBqZQpwcm9taXMgYmllbiBkZSBmYWlyZSBtZXMgZGV2b2lycyBjb21tZSB0b3V0IGxlIG1vbmRlLCBzaSBsZSBib24gRGlldQptZSB0aXJhaXQgZGUgbMOgLiBKZSBzYXZhaXMgYmllbiBxdWUgbGUgc2V1bCBtb3llbiBkZSB2ZW5pciDDoCBib3V0IGRlCmxhIGLDqnRlLCBzaSDDp2EgZW4gdmVuYWl0IMOgIHVuZSBwcmlzZSBkZSBjb3JwcywgYyfDqXRhaXQgZGUgbHVpIGNvdXBlcgpsYSBxdWV1ZSBhdSByYXMgZHUgdHJvZ25vbiwgZXQgamUgbSdhc3N1cmFpIHF1ZSBqJ2F2YWlzIGJpZW4gZGFucyBtYQpwb2NoZSB1biBib24gY291dGVhdSDDoCByZXNzb3J0IGRlIGNoYW50aWVyIHF1aSBjb3VwYWl0IGNvbW1lIHVuCnJhc29pci4gVG91dCBjZWxhIG1lIHBhc3NhIHBhciBsYSB0w6p0ZSBkYW5zIHVuIGluc3RhbnQgcGVuZGFudCBxdWUgbWEKanVtZW50IGdhbG9wYWl0IGNvbW1lIHVuZSBkw6ljaGHDrm7DqWUgZXQgcXVlIGxlIGdyYW5kIFNlbSBDaGFtcGFnbmUsIMOgCm1vaXRpw6kgZMOpZ3Jpc8OpIHBhciBsYSBwZXVyLCBjcmlhaXQ6CgotLUZvdWV0dGUsIEZhbmZhbiEgbGEgYsOqdGUgbm91cyBwb3Vyc3VpdC4gSidsdWkgdm9pcyBsZXMgeWV1eCBkYW5zIGxhCm5vaXJjZXVyLgoKRXQgbm91cyBhbGxpb25zIHVuIHRyYWluIGQnZW5mZXIuIE5vdXMgcGFzc8OibWVzIGxlIHZpbGxhZ2UgZGVzIEJsYWlzCmV0IGlsIGZhbGx1dCBub3VzIGVuZ2FnZXIgZGFucyBsYSByb3V0ZSBxdWkgbG9uZ2UgbGUgbWFub2lyIGRlCkRhdXRyYXllLiBMYSByb3V0ZSBlc3Qgw6l0cm9pdGUsIGNvbW1lIHZvdXMgc2F2ZXouIEQndW4gY8O0dMOpLCB1bmUgaGFpZQplbiBoYWxsaWVyIGJvcmTDqWUgZCd1biBmb3Nzw6kgYXNzZXogcHJvZm9uZCBzw6lwYXJlIGxlIHBhcmMgZHUgY2hlbWluLApldCBkZSBsJ2F1dHJlLCB1bmUgcmFuZ8OpZSBkZSBncmFuZHMgYXJicmVzIGxvbmdlIGxhIGPDtHRlIGp1c3F1J2F1CnBvbnQgZGUgRGF1dHJheWUuIExlcyDDqWNsYWlycyBww6luw6l0cmFpZW50IMOgIHBlaW5lIMOgIHRyYXZlcnMgbGUKZmV1aWxsYWdlIGRlcyBhcmJyZXMgZXQgbGUgbW9pbmRyZSDDqWNhcnQgZGUgbGEgcG91bGljaGUgZGV2YWl0IG5vdXMKamV0ZXIgZGFucyBsZSBmb3Nzw6kgZHUgY8O0dMOpIGR1IG1hbm9pciwgb3UgYnJpc2VyIGxhIGNoYXJyZXR0ZSBlbgptb3JjZWF1eCBzdXIgbGVzIHRyb25jcyBkZXMgZ3JhbmRzIGFyYnJlcy4gSmUgZGlzIMOgIFNlbToKCi0tVGllbnMtdG9pIGJpZW4gbW9uIFNlbSEgSWwgdmEgbm91cyBhcnJpdmVyIHVuIGFjY2lkZW50LgoKRXQgdmxhbiEgcGF0YXRyYXMhIHVuIGdyYW5kIGNvdXAgZGUgdG9ubmVycmUgw6ljbGF0ZSBldCB2b2lsw6AgbGEKcG91bGljaGUgYWZmb2zDqWUgcXVpIHNlIGpldHRlIMOgIGRyb2l0ZSBkYW5zIGxlIGZvc3PDqSwgZXQgbGEgY2hhcnJldHRlCnF1aSBzZSB0cm91dmUgc2VucyBkZXNzdXMgZGVzc291cy4gSWwgZmFpc2FpdCB1bmUgbm9pcmNldXIgw6AgbmUgcGFzCnNlIHZvaXIgbGUgYm91dCBkdSBuZXosIG1haXMsIGVuIG1lIHJlbGV2YW50IHRhbnQgYmllbiBxdWUgbWFsLApqJ2FwZXLDp3VzIGF1LWRlc3N1cyBkZSBtb2kgbGVzIGRldXggeWV1eCBkZSBsYSBiw6p0ZSBxdWkgcyfDqXRhaXQKYXJyw6p0w6llIGV0IHF1aSBtZSByZWx1cXVhaXQgZCd1biBhaXIgZsOpcm9jZS4gSmUgbWUgdMOidGFpIHBvdXIgdm9pciBzaQpqZSBuJ2F2YWlzIHJpZW4gZGUgY2Fzc8OpLiBKZSBuJ2F2YWlzIGF1Y3VuIG1hbCBldCBtYSBwcmVtacOocmUgaWTDqWUKZnV0IGRlIHNhaXNpciBsJ2FuaW1hbCBwYXIgbGEgcXVldWUgZXQgZGUgbWUgZ2FyZXIgZGUgc2EgZ3VldWxlIGRlCnBvc3PDqWTDqS4gSmUgbWUgdHJhw65uYWkgZW4gcmFtcGFudCwgZXQsIHRvdXQgZW4gb3V2cmFudCBtb24gY291dGVhdQrDoCByZXNzb3J0IHF1ZSBqZSBwbGHDp2FpIGRhbnMgbWEgY2VpbnR1cmUsIGV0IGF1IG1vbWVudCBvw7kgbGEgYsOqdGUKcyfDqWxhbsOnYWl0IHN1ciBtb2kgZW4gcG91c3NhbnQgdW4gcnVnaXNzZW1lbnQgaW5mZXJuYWwsIGplIGZpcyB1bgpib25kIGRlIGPDtHTDqSBldCBsJ2F0dHJhcGFpIHBhciBsYSBxdWV1ZSBxdWUgaidlbXBvaWduYWkgc29saWRlbWVudApkZSBtZXMgZGV1eCBtYWlucy4gSWwgZmFsbGFpdCB2b2lyIGxhIGx1dHRlIHF1aSBzJ2Vuc3Vpdml0LiBMYSBiw6p0ZSwKcXVpIHNlbnRhaXQgYmllbiBxdWUgamUgbGEgdGVuYWlzIHBhciBsZSBib24gYm91dCwgZmFpc2FpdCBkZXMgc2F1dHMKdGVycmlibGVzIHBvdXIgbWUgZmFpcmUgbMOiY2hlciBwcmlzZSwgbWFpcyBqZSBtZSBjcmFtcG9ubmFpcyBjb21tZSB1bgpkw6lzZXNww6lyw6kuIEV0IGNlbGEgZHVyYSBwZW5kYW50IGF1IG1vaW5zIHVuIHF1YXJ0IGQnaGV1cmUuIEplIHZvbGFpcwrDoCBkcm9pdGUsIMOgIGdhdWNoZSwgY29tbWUgdW5lIGNhc3Nlcm9sZSBhdSBib3V0IGRlIGxhIHF1ZXVlIGQndW4KY2hpZW4sIG1haXMgamUgdGVuYWlzIGJvbi4gSidhdXJhaXMgYmllbiB2b3VsdSBzYWlzaXIgbW9uIGNvdXRlYXUKcG91ciBsYSBjb3VwZXIsIGNldHRlIG1hdWRpdGUgcXVldWUsIG1haXMgaW1wb3NzaWJsZSBkJ3kgcGVuc2VyIHRhbnQKcXVlIGxhIGNoYXJvZ25lIHNlIGTDqW3DqG5lcmFpdCBhaW5zaS4gw4AgbGEgZmluLCB2b3lhbnQgcXUnZWxsZSBuZQpwb3V2YWl0IHBhcyBtZSBmYWlyZSBsw6JjaGVyIHByaXNlLCBsYSB2b2lsw6AgcGFydGllIHN1ciBsYSByb3V0ZSBhdQp0cmlwbGUgZ2Fsb3AsIGV0IG1vaSBwYXIgZGVycmnDqHJlLCBuYXR1cmVsbGVtZW50LgoKSmUgbidhaSBqYW1haXMgdm95YWfDqSBhdXNzaSB2aXRlIHF1ZSBjZWxhIGRlIG1hIHZpZS4gTGVzIGNoZXZldXggbSdlbgpmcmlzYWllbnQgZW4gZMOpcGl0IGRlIGxhIHBsdWllIHF1aSB0b21iYWl0IHRvdWpvdXJzIMOgIHRvcnJlbnRzLiBMYQpiw6p0ZSBwb3Vzc2FpdCBkZXMgYmV1Z2xlbWVudHMgcG91ciBtJ2VmZnJheWVyIGRhdmFudGFnZSBldCwgw6AgbGEKZmF2ZXVyIGQndW4gw6ljbGFpciwgamUgbSdhcGVyw6d1cyBxdWUgbm91cyBmaWxpb25zIHZlcnMgbGUgcG9udCBkZQpEYXV0cmF5ZS4gSmUgcGVuc2FpcyBiaWVuIMOgIG1vbiBjb3V0ZWF1LCBtYWlzIG4nb3NhaXMgcGFzIG1lIHJpc3F1ZXIKZCd1bmUgc2V1bGUgbWFpbiwgbG9yc3F1J2VuIGFycml2YW50IGF1IHBvbnQsIGxhIGLDqnRlIHRvdXJuYSB2ZXJzIGxhCmdhdWNoZSBldCB0ZW50YSBkJ2VzY2FsYWRlciBsYSBwYWxpc3NhZGUuIExhIG1hdWRpdGUgdm91bGFpdCBzYXV0ZXIKw6AgbCdlYXUgcG91ciBtZSBub3llci4gSGV1cmV1c2VtZW50IHF1ZSBzb24gcHJlbWllciBzYXV0IG5lIHLDqXVzc2l0CnBhcywgY2FyLCBhdmVjIGwnZXJyZSBkJ2FsbGVyIHF1ZSBqJ2F2YWlzIGFjcXVpc2UsIGonYXVyYWlzCmNlcnRhaW5lbWVudCBmYWl0IGxlIHBsb25nZW9uLiBFbGxlIHJlY3VsYSBwb3VyIHByZW5kcmUgdW4gbm91dmVsCsOpbGFuIGV0IGMnZXN0IGNlIHF1aSBtZSBkb25uYSBtYSBjaGFuY2UuIEplIHNhaXNpcyBtb24gY291dGVhdSBkZQpsYSBtYWluIGRyb2l0ZSBldCwgYXUgbW9tZW50IG/DuSBlbGxlIHNhdXRhaXQsIGplIHLDqXVuaXMgdG91cyBtZXMKZWZmb3J0cywgamUgZnJhcHBhaSBqdXN0ZSBldCBsYSBxdWV1ZSBtZSByZXN0YSBkYW5zIGxhIG1haW4uIEonw6l0YWlzCmTDqWxpdnLDqSBldCBqJ2VudGVuZGlzIGxhIGNoYXJvZ25lIHF1aSBzZSBkw6liYXR0YWl0IGRhbnMgbGVzIGVhdXggZGUKbGEgcml2acOocmUgRGF1dHJheWUgZXQgcXVpIGZpbml0IHBhciBkaXNwYXJhw650cmUgYXZlYyBsZSBjb3VyYW50LiBKZQptZSByZW5kaXMgYXUgbW91bGluIG/DuSBqZSByYWNvbnRhaSBtb24gYWZmYWlyZSBhdSBtZXVuaWVyIGV0IG5vdXMKZXhhbWluw6JtZXMgZW5zZW1ibGUgbGEgcXVldWUgcXVlIGonYXZhaXMgYXBwb3J0w6llLiBDJ8OpdGFpdCB1bmUgcXVldWUKbG9uZ3VlIGRlIGNpbnEgw6Agc2l4IHBpZWRzLCBhdmVjIHVuIGJvdXF1ZXQgZGUgcG9pbCBhdSBib3V0LCBtYWlzIHVuZQpxdWV1ZSByb3VnZSDDqWNhcmxhdGU7IHVuZSB2cmFpZSBxdWV1ZSBkZSBwb3Nzw6lkw6llLCBxdW9pIQoKTGEgdGVtcMOqdGUgcyfDqXRhaXQgYXBhaXPDqWUgZXQgw6AgbCdhaWRlIGQndW4gZmFuYWwsIGplIHBhcnRpcyDDoCBsYQpyZWNoZXJjaGUgZGUgbWEgdm9pdHVyZSBxdWUgamUgdHJvdXZhaSBlbWJvdXJiw6llIGRhbnMgdW4gZm9zc8OpIGRlIGxhCnJvdXRlLCBhdmVjIGxlIGdyYW5kIFNlbSBDaGFtcGFnbmUgcXVpLCBjb21wbMOodGVtZW50IGTDqWdyaXPDqSwgYXZhaXQKZMOpZ2Fnw6kgbGEgcG91bGljaGUgZXQgdHJhdmFpbGxhaXQgw6AgcmFtYXNzZXIgbWVzIG1hcmNoYW5kaXNlcyBxdWUgbGUKY2hvYyBhdmFpdCDDqXBhcnBpbGzDqWVzIHN1ciBsYSByb3V0ZS4KClNlbSBmdXQgbCdob21tZSBsZSBwbHVzIMOpdG9ubsOpIGR1IG1vbmRlIGRlIG1lIHZvaXIgcmV2ZW5pciBzYWluIGV0CnNhdWYsIGNhciBpbCBjcm95YWl0IGJpZW4gcXVlIGMnw6l0YWl0IGxlIGRpYWJsZSBlbiBwZXJzb25uZSBxdWkKbSdhdmFpdCBlbXBvcnTDqS4KCkFwcsOocyBhdm9pciBlbXBydW50w6kgdW4gaGFybmFpcyBhdSBtZXVuaWVyIHBvdXIgcmVtcGxhY2VyIGxlIG7DtHRyZSwKcXUnaWwgYXZhaXQgZmFsbHUgY291cGVyIHBvdXIgbGliw6lyZXIgbGEgcG91bGljaGUsIG5vdXMgcmVwcsOubWVzIGxhCnJvdXRlIGR1IHZpbGxhZ2Ugb8O5IG5vdXMgYXJyaXbDom1lcyBzdXIgbCdoZXVyZSBkZSBtaW51aXQuCgotLVZvaWzDoCBtb24gaGlzdG9pcmUgZXQgamUgdm91cyBpbnZpdGUgY2hleiBtb2kgdW4gZGUgY2VzIGpvdXJzIHBvdXIKdm9pciBsYSBxdWV1ZSBkZSBsYSBiw6p0ZS4gQmFwdGlzdGUgTGFtYmVydCBlc3QgZW4gdHJhaW4gZGUKbCdlbXBhaWxsZXIgcG91ciBsYSBjb25zZXJ2ZXIuCgpWCgpMZSByw6ljaXQgcXVpIHByw6ljw6hkZSBkb25uYSBsaWV1LCBxdWVscXVlcyBqb3VycyBwbHVzIHRhcmQsIMOgIHVuCmTDqW3DqmzDqSByZXN0w6kgY8OpbMOoYnJlIGRhbnMgbGVzIGFubmFsZXMgY3JpbWluZWxsZXMgZGUgTGFub3JhaWUuIFBvdXIKZW1ww6pjaGVyIHVuIHZyYWkgcHJvY8OocyBldCBsZXMgZnJhaXMgcnVpbmV1eCBxdWkgcydlbnN1aXZlbnQsIG9uIGV1dApyZWNvdXJzIMOgIHVuIGFyYml0cmFnZSBkb250IHZvaWNpIGxlIHByb2PDqHMtdmVyYmFsOgoKIkNlIHNlcHRpw6htZSBqb3VyIGRlIG5vdmVtYnJlIDE4NTYsIMOgIDMgaGV1cmVzIGRlIHJlbGV2w6llLCBub3VzCnNvdXNzaWduw6lzLCBKZWFuLUJhcHRpc3RlIEdhbGxpZW4sIGluc3RpdHV0ZXVyIGRpcGzDtG3DqSBldAptYcOudHJlLWNoYW50cmUgZGUgbGEgcGFyb2lzc2UgZGUgTGFub3JhaWUsIE9uw6lzaW1lIEJvbWJlbmxlcnQsIGJlZGVhdQpkZSBsYSBkaXRlIHBhcm9pc3NlLCBldCBEYW1hc2UgQnJpcXVlbGV1ciwgw6lwaWNpZXIsIGF5YW50IMOpdMOpIGNob2lzaXMKY29tbWUgYXJiaXRyZXMgZHUgcGxlaW4gZ3LDqSBkZXMgaW50w6lyZXNzw6lzIGVuIGNldHRlIGNhdXNlLCBhdm9ucwpyZW5kdSBsYSBzZW50ZW5jZSBkJ2FyYml0cmFnZSBxdWkgc3VpdCBkYW5zIGxlIGRpZmbDqXJlbmQgc3VydmVudQplbnRyZSBGcmFuw6dvaXMtWGF2aWVyIFRyZW1wZSwgc3Vybm9tbcOpIEZyYW5jaXMgSmVhbi1KZWFuIGV0IEpvc2VwaCwKc3Vybm9tbcOpIEZhbmZhbiBMYXpldHRlLgoKTGUgc3VzLW5vbW3DqSBGLi1YLiBUcmVtcGUgcmV2ZW5kaXF1ZSBkZXMgZG9tbWFnZXMtaW50w6lyw6p0cywgYXUgbW9udGFudApkZSBjZW50IGZyYW5jcywgYXUgZGl0IEZhbmZhbiBMYXpldHRlLCBlbiBsJ2FjY3VzYW50IGQnYXZvaXIgY291cMOpIGxhCnF1ZXVlIGRlIHNvbiB0YXVyZWF1IHJvdWdlIGRhbnMgbGEgbnVpdCBkdSBzYW1lZGkgMyBvY3RvYnJlIGRlcm5pZXIsCmV0IGQnYXZvaXIgYWluc2kgY2F1c8OpIGxhIG1vcnQgZHUgZGl0IHRhdXJlYXUgZCd1bmUgbWFuacOocmUgY3J1ZWxsZSwKaWxsw6lnYWxlIGV0IHN1YnJlcHRpY2UsIHN1ciBsZSBwb250IGRlIGxhIHJpdmnDqHJlIERhdXRyYXllLCBwcsOocyBkdQptYW5vaXIgZGVzIHNlaWduZXVycyBkZSBMYW5vcmFpZS4KCkxlIGRpdCBGYW5mYW4gTGF6ZXR0ZSBuaWUgZCd1bmUgbWFuacOocmUgw6luZXJnaXF1ZSBsJ2FjY3VzYXRpb24gZHVkaXQKRi4tWC4gVHJlbXBlIGV0IGxhIGTDqWNsYXJlIG1hbGljaWV1c2UgZXQgaXJyw6l2w6lyZW5jaWV1c2UsIGF1IHBsdXMKaGF1dCBkZWdyw6kuIElsIHJlY29ubmHDrnQgYXZvaXIgY291cMOpIGxhIHF1ZXVlIGQndW4gYW5pbWFsIGNvbm51IGRhbnMKbm9zIGNhbXBhZ25lcyBzb3VzIGxlIG5vbSBkZSBfYsOqdGUgw6AgZ3JhbmQncXVldWVfIGRhbnMgZGVzCmNvbmRpdGlvbnMgZm9ydCBkYW5nZXJldXNlcyBwb3VyIHNhIHZpZSBjb3Jwb3JlbGxlIGV0IHBvdXIgbGUgc2FsdXQKZGUgc29uIMOibWUsIG1haXMgY2VsYSDDoCBzb24gY29ycHMgZMOpZmVuZGFudCBldCBwYXJjZSBxdWUgYydlc3QgbGUKc2V1bCBtb3llbiByZWNvbm51IGRlIHNlIGTDqWJhcnJhc3NlciBkZSBsYSBiw6p0ZS4KCkV0IGxlcyBkZXV4IGludMOpcmVzc8OpcyBwcm9kdWlzZW50IGNoYWN1biB1biB0w6ltb2luIHBvdXIgc291dGVuaXIKbGV1cnMgcHLDqXRlbnRpb25zLCB0ZWwgcXVlIGNvbnZlbnUgZGFucyBsZXMgY29uZGl0aW9ucyBkJ2FyYml0cmFnZS4KCkxlIG5vbW3DqSBQaWVycmUgQnVzc2VhdSwgZW5nYWfDqSBhdSBzZXJ2aWNlIGR1IGRpdCBGLi1YLiBUcmVtcGUsCmTDqWNsYXJlIHF1ZSBsYSBxdWV1ZSBwcm9kdWl0ZSBwYXIgbGUgc3VzZGl0IEZhbmZhbiBMYXpldHRlIGx1aSBwYXJhw650CsOqdHJlIGxhIHF1ZXVlIGR1IGTDqWZ1bnQgdGF1cmVhdSBkZSBzb24gbWHDrnRyZSwgZG9udCBpbCBhIHRyb3V2w6kgbGEKY2FyY2Fzc2Ugw6ljaG91w6llIHN1ciBsYSBncsOodmUsIHF1ZWxxdWVzIGpvdXJzIGF1cGFyYXZhbnQsIGRhbnMgdW4Kw6l0YXQgYXZhbmPDqSBkZSBkw6ljb21wb3NpdGlvbi4gTGUgdGF1cmVhdSBlc3QgcHLDqWNpc8OpbWVudCBkaXNwYXJ1IGRhbnMKbGEgbnVpdCBkdSAzIG9jdG9icmUsIGRhdGUgb8O5IGxlIGRpdCBGYW5mYW4gTGF6ZXR0ZSBwcsOpdGVuZCBhdm9pcgpyZW5jb250csOpIGxhIF9iw6p0ZSDDoCBncmFuZCdxdWV1ZV8uIEV0IGNlIHF1aSBsZSBjb25maXJtZSBkYW5zIHNhCmNvbnZpY3Rpb24sIGMnZXN0IGxhIGNvdWxldXIgZGUgbGEgc3VzZGl0ZSBxdWV1ZSBkdSBzdXNkaXQgdGF1cmVhdQpxdWksIHF1ZWxxdWVzIGpvdXJzIGF1cGFyYXZhbnQsIHMnw6l0YWl0IGFtdXPDqSDDoCBzZSBncmF0dGVyIHN1ciB1bmUKYmFycmnDqHJlIHLDqWNlbW1lbnQgcGVpbnRlIGVuIHZlcm1pbGxvbi4KCkV0IHNlIHByw6lzZW50ZSBlbnN1aXRlIGxlIG5vbW3DqSBTZW0gQ2hhbXBhZ25lLCBzdXJub21tw6kKU2VtLcOgLWdyb3MtTG91aXMsIHF1aSBkw6lzaXJlIGNvbmZpcm1lciBkZSBsYSBtYW5pw6hyZSBsYSBwbHVzIGFic29sdWUKbGVzIGTDqWNsYXJhdGlvbnMgZGUgRmFuZmFuIExhemV0dGUsIGNhciBpbCDDqXRhaXQgYXZlYyBsdWkgcGVuZGFudCBsYQp0ZW1ww6p0ZSBkdSAzIG9jdG9icmUgZXQgaWwgYSBhcGVyw6d1IGV0IHZ1IGRpc3RpbmN0ZW1lbnQgbGEgX2LDqnRlIMOgCmdyYW5kJ3F1ZXVlXyB0ZWxsZSBxdWUgZMOpY3JpdGUgZGFucyBsYSBkw6lwb3NpdGlvbiBkdSBkaXQgTGF6ZXR0ZS4KCkVuIHZ1ZSBkZSBjZXMgdMOpbW9pZ25hZ2VzIGV0IGTDqXBvc2l0aW9ucyBldDoKCkNvbnNpZMOpcmFudCBxdWUgbCdleGlzdGVuY2UgZGUgbGEgX2LDqnRlIMOgIGdyYW5kJyBxdWV1ZV8gYSDDqXTDqSBkZQp0ZW1wcyBpbW3DqW1vcmlhdXggcmVjb25udWUgY29tbWUgcsOpZWxsZSwgZGFucyBub3MgY2FtcGFnbmVzLCBldCBxdWUKbGUgc2V1bCBtb3llbiBkZSBzZSBwcm90w6lnZXIgY29udHJlIGxhIHN1c2RpdGUgYsOqdGUgZXN0IGRlIGx1aSBjb3VwZXIKbGEgcXVldWUgY29tbWUgcGFyYcOudCBsJ2F2b2lyIGZhaXQgc2kgYnJhdmVtZW50IEZhbmZhbiBMYXpldHRlLCB1bgpkZXMgaW50w6lyZXNzw6lzIGVuIGNldHRlIGNhdXNlOwoKQ29uc2lkw6lyYW50LCBkJ2F1dHJlIHBhcnQsIHF1J3VuIHRhdXJlYXUgcm91Z2UgYXBwYXJ0ZW5hbnQgw6AgRi4tWC4KVHJlbXBlIGVzdCBkaXNwYXJ1IMOgIGxhIG3Dqm1lIGRhdGUgZXQgcXVlIGxhIGNhcmNhc3NlIGEgw6l0w6kgdHJvdXbDqWUsCsOpY2hvdcOpZSBldCBzYW5zIHF1ZXVlLCBzdXIgbGEgZ3LDqHZlIGR1IFNhaW50LUxhdXJlbnQgcGFyIGxlIHTDqW1vaW4KUGllcnJlIEJ1c3NlYXUsIHF1ZWxxdWVzIGpvdXJzIHBsdXMgdGFyZDsKCkNvbnNpZMOpcmFudCBxdSdlbiBmYWNlIGRlIHTDqW1vaWduYWdlcyBhdXNzaSBjb250cmFkaWN0b2lyZXMgaWwgZXN0CmZvcnQgZGlmZmljaWxlIGRlIGZhaXJlIHBsYWlzaXIgw6AgdG91dCBsZSBtb25kZSwgdG91dCBlbiByZXN0YW50IGRhbnMKbGVzIGxpbWl0ZXMgZCd1bmUgZMOpY2lzaW9uIHDDqXJlbXB0b2lyZTsKCkTDqWNpZG9uczoKCjEuIFF1J8OgIGwnYXZlbmlyIGxlIGRpdCBGYW5mYW4gTGF6ZXR0ZSBzb2l0IGZvcmPDqSBkZSBmYWlyZSBzZXMgcMOicXVlcwpkYW5zIGxlcyBjb25kaXRpb25zIHZvdWx1ZXMgcGFyIG5vdHJlIFNhaW50ZSBNw6hyZSBsJ8OJZ2xpc2UsIGNlIHF1aSBsZQpwcm90w6lnZXJhIGNvbnRyZSBsYSByZW5jb250cmUgZGVzIGxvdXBzLWdhcm91cywgYsOqdGVzIMOgIGdyYW5kJ3F1ZXVlCmV0IGZldXggZm9sbGV0cyBxdWVsY29ucXVlcywgZW4gYWxsYW50IMOgIEJlcnRoaWVyIG91IGFpbGxldXJzLgoKMi4gUXVlIGxlIGRpdCBGLi1YLiBUcmVtcGUgc29pdCBmb3Jjw6kgZGUgcmVuZmVybWVyIHNlcyB0YXVyZWF1eCBkZQptYW5pw6hyZSDDoCBsZXMgZW1ww6pjaGVyIGRlIGZyw6lxdWVudGVyIGxlcyBjaGVtaW5zIHB1YmxpY3MgZXQgZGUKcydhdHRhcXVlciBhdXggcGFzc2FudHMgZGFucyBsZXMgdMOpbsOoYnJlcywgw6AgZGVzIGhldXJlcyBpbmR1ZXMgZHUKam91ciBldCBkZSBsYSBudWl0LgoKMy4gUXVlIGxlcyBkZXV4IGludMOpcmVzc8OpcyBlbiBjZXR0ZSBjYXVzZSwgbGVzIHN1c2RpdHMgRmFuZmFuIExhemV0dGUKZXQgRi4tWC4gVHJlbXBlIHNvaWVudCBjb25kYW1uw6lzIMOgIHByZW5kcmUgbGEgcXVldWUgY291cMOpZSBwYXIgRmFuZmFuCkxhemV0dGUgZXQgw6AgbGEgbWV0dHJlIGVuIGxvdGVyaWUgcGFybWkgbGVzIGhhYml0YW50cyBkZSBsYSBwYXJvaXNzZQphZmluIHF1ZSBsYSBzb21tZSByw6lhbGlzw6llIG5vdXMgc29pdCByZW1pc2Ugw6AgdGl0cmUgZGUgY29tcGVuc2F0aW9uCnBvdXIgbm90cmUgYXJiaXRyYWdlLCBwb3VyIHN1aXZyZSBsYSBib25uZSB0cmFkaXRpb24gcXVpIHZldXQgcXVlLApkYW5zIGxlcyBwcm9jw6hzIGRvdXRldXgsIGxlcyBqdWdlcyBldCBsZXMgYXZvY2F0cyBzb2llbnQgcsOpbXVuw6lyw6lzLApxdWVsIHF1ZSBzb2l0IGxlIHNvcnQgZGVzIHBsYWlkZXVycyBxdWkgc29udCByZW52b3nDqXMgZG9zIMOgIGRvcywKY2hhY3VuIHBheWFudCBsZXMgZnJhaXMuCgpFbiBmb2kgZGUgcXVvaSBub3VzIGF2b25zIHNpZ27DqSwKCiAgSmVhbi1CYXB0aXNsZSBHYWxsaWVuLAogIE9uw6lzaW1lIEJvbWJlbmxlcnQsCiAgRGFtYXNlIEJyaXF1ZWxldXIuCgpQb3VyIGNvcGllIGNvbmZvcm1lOiBILiBCZWF1Z3JhbmQuCgoKCk1BQ0xPVU5FCgpJCgpCaWVuIHF1J29uIGx1aSBlw7t0IGRvbm7DqSwgYXUgYmFwdMOqbWUsIGxlIHByw6lub20gZGUgTWF4aW1lLCB0b3V0IGxlCm1vbmRlIGF1IHZpbGxhZ2UgbCdhcHBlbGFpdCBfTWFjbG91bmVfLgoKRXQgdG91dCBjZWxhLCBwYXJjZSBxdWUgc2EgbcOocmUsIE1hcmllIEdhbGxpZW4sIGF2YWl0IHVuIGTDqWZhdXQKZCdhcnRpY3VsYXRpb24gcXVpIGwnZW1ww6pjaGFpdCBkZSBwcm9ub25jZXIgZGlzdGluY3RlbWVudCBzb24gbm9tLgpFbGxlIGRpc2FpdCBfTWFjbG91bmVfIGF1IGxpZXUgZGUgTWF4aW1lLCBldCBsZXMgdmlsbGFnZW9pcwpsJ2FwcGVsYWllbnQgY29tbWUgc2EgbcOocmUuCgpDJ8OpdGFpdCB1biBwYXV2cmUgaMOocmUgcXVpIMOpdGFpdCBuw6kgZXQgcXVpIGF2YWl0IGdyYW5kaSBkYW5zIGxhIHBsdXMKcHJvZm9uZGUgZXQgZGFucyBsYSBwbHVzIHJlc3BlY3RhYmxlIG1pc8OocmUuCgpTb24gcMOocmUgw6l0YWl0IHVuIGJyYXZlIGJhdGVsaWVyIHF1aSBzJ8OpdGFpdCBub3nDqSBhbG9ycyBxdWUgTWFjbG91bmUKw6l0YWl0IGVuY29yZSBhdSBiZXJjZWF1LCBldCBsYSBtw6hyZSBhdmFpdCByw6l1c3NpIHRhbnQgYmllbiBxdWUgbWFsLAplbiBhbGxhbnQgZW4gam91cm7DqWUgw6AgZHJvaXRlIGV0IMOgIGdhdWNoZSwgw6AgdHJhw65uZXIgdW5lIHDDqW5pYmxlCmV4aXN0ZW5jZSBldCDDoCByw6ljaGFwcGVyIGxhIHZpZSBkZSBzb24gZW5mYW50IHF1aSDDqXRhaXQgbsOpIHJhY2hpdGlxdWUKZXQgcXVpIGF2YWl0IHbDqWN1IGV0IGdyYW5kaSwgZW4gZMOpcGl0IGRlcyBwcsOpZGljdGlvbnMgZGUgdG91dGVzIGxlcwpjb21tw6hyZXMgZGVzIGFsZW50b3Vycy4KCkxlIHBhdXZyZSBnYXLDp29uIMOpdGFpdCB1biBtb25zdHJlIGRlIGxhaWRldXIuIE1hbCBmYWl0IGF1IHBvc3NpYmxlLAppbCBhdmFpdCB1biBwYXV2cmUgY29ycHMgbWFsaW5ncmUgYXVxdWVsIHNlIHRyb3V2YWllbnQgdGFudCBiaWVuIHF1ZQptYWwgYXR0YWNow6lzIGRlIGxvbmdzIGJyYXMgZXQgZGUgbG9uZ3VlcyBqYW1iZXMgZ3LDqmxlcyBxdWkgc2UKdGVybWluYWllbnQgcGFyIGRlcyBwaWVkcyBldCBkZXMgbWFpbnMgcXVpIG4nYXZhaWVudCBndcOocmUgc2VtYmxhbmNlCmh1bWFpbmUuIElsIMOpdGFpdCBiYW5jYWwsIGJvaXRldXgsIHRvcnR1LWJvc3N1IGNvbW1lIG9uIGRpdCBkYW5zIG5vcwpjYW1wYWduZXMsIGV0IGxlIG1hbGhldXJldXggYXZhaXQgdW5lIHTDqnRlIMOgIGwnYXZlbmFudDogdW5lIHbDqXJpdGFibGUKdMOqdGUgZGUgbWFjYXF1ZSBlbiBydXB0dXJlIGRlIG3DqW5hZ2VyaWUuIExhIG5hdHVyZSBhdmFpdCBvdWJsacOpIGRlIGxlCmRvdGVyIGQndW4gbWVudG9uLCBldCBkZXV4IGxvbmd1ZXMgZGVudHMgamF1bsOidHJlcyBzb3J0YWllbnQgZCd1bgpwZXRpdCB0cm91IGNpcmN1bGFpcmUgcXVpIGx1aSB0ZW5haXQgbGlldSBkZSBib3VjaGUgY29tbWUgZGVzCmTDqWZlbnNlcyBkZSBiw6p0ZSBmw6lyb2NlLiBJbCBuZSBwb3V2YWl0IHBhcyBtw6JjaGVyIHNlcyBhbGltZW50cyBldApjJ8OpdGFpdCB1bmUgY3VyaW9zaXTDqSBxdWUgZGUgbGUgdm9pciBtYW5nZXIuCgpTb24gbGFuZ2FnZSBzZSBjb21wb3NhaXQgZGUgcGhyYXNlcyBpbmNvaMOpcmVudGVzIGV0IGRlIHNvbnMKaW5hcnRpY3Vsw6lzIHF1J2lsIGFjY29tcGFnbmFpdCBkJ3VuZSBwYW50b21pbWUgdHLDqHMgZXhwcmVzc2l2ZS4gRXQgaWwKcGFydmVuYWl0IGFzc2V6IGZhY2lsZW1lbnQgw6Agc2UgZmFpcmUgY29tcHJlbmRyZSwgbcOqbWUgZGUgY2V1eCBxdWkKbCdlbnRlbmRhaWVudCBwb3VyIGxhIHByZW1pw6hyZSBmb2lzLgoKRW4gZMOpcGl0IGRlIGNldHRlIGxhaWRldXIgdnJhaW1lbnQgcmVwb3Vzc2FudGUgZXQgZGUgY2V0dGUgZGlmZmljdWx0w6kKZGUgbGFuZ2FnZSwgTWFjbG91bmUgw6l0YWl0IGFkb3LDqSBwYXIgc2EgbcOocmUgZXQgYWltw6kgZGUgdG91cyBsZXMKdmlsbGFnZW9pcy4KCkMnZXN0IHF1J2lsIMOpdGFpdCBhdXNzaSBib24gcXUnaWwgw6l0YWl0IGxhaWQsIGV0IGlsIGF2YWl0IGRldXggZ3JhbmRzCnlldXggYmxldXMgcXVpIHZvdXMgZml4YWllbnQgY29tbWUgcG91ciB2b3VzIGRpcmU6CgotLUMnZXN0IHZyYWkhIGplIHN1aXMgYmllbiBob3JyaWJsZSDDoCB2b2lyLCBtYWlzLCB0ZWwgcXVlIHZvdXMgbWUKdm95ZXosIGplIHN1aXMgbGUgc2V1bCBzdXBwb3J0IGRlIG5pYSB2aWVpbGxlIG3DqHJlIG1hbGFkZSBldCwgc2kKY2jDqXRpZiBxdWUgamUgc29pcywgaWwgbWUgZmF1dCB0cmF2YWlsbGVyIHBvdXIgbHVpIGRvbm5lciBkdSBwYWluLgoKRXQgcGFzIHVuIGdhbWluLCBtw6ptZSBsZXMgcGx1cyBtw6ljaGFudHMsIGF1cmFpdCBvc8OpIHNlIG1vcXVlciBkZSBzYQpsYWlkZXVyIG91IGFidXNlciBkZSBzYSBmYWlibGVzc2UuCgpFdCBwdWlzLCBvbiBsZSBwcmVuYWl0IGVuIHBpdGnDqSBwYXJjZSBxdWUgbCdvbiBkaXNhaXQgYXUgdmlsbGFnZQpxdSd1bmUgc2F1dmFnZXNzZSBhdmFpdCBqZXTDqSB1biBfc29ydF8gw6AgTWFyaWUgR2FsbGllbiwgcXVlbHF1ZXMKbW9pcyBhdmFudCBsYSBuYWlzc2FuY2UgZGUgTWFjbG91bmUuIENldHRlIHNhdXZhZ2Vzc2Ugw6l0YWl0IHVuZQpmYWlzZXVzZSBkZSBwYW5pZXJzIHF1aSBjb3VyYWl0IGxlcyBjYW1wYWduZXMgZXQgcXVpIHMnZW5pdnJhaXQsIGTDqHMKcXUnZWxsZSBhdmFpdCBwdSBhbWFzc2VyIGFzc2V6IGRlIGdyb3Mgc291cyBwb3VyIGFjaGV0ZXIgdW5lCmJvdXRlaWxsZSBkZSB3aGlza3ksIGV0IGMnw6l0YWl0IGFsb3JzIHVuZSBvcmdpZSBxdWkgcmVzdGFpdCDDoCBqYW1haXMKZ3JhdsOpZSBkYW5zIGxhIG3DqW1vaXJlIGRlIGNldXggcXVpIGVuIMOpdGFpZW50IHTDqW1vaW5zLgoKTGEgbWFsaGV1cmV1c2UgY291cmFpdCBwYXIgbGVzIHJ1ZXMgZW4gcG91c3NhbnQgZGVzIGNyaXMgZGUgYsOqdGUKZmF1dmUgZXQgZW4gcydhcnJhY2hhbnQgbGVzIGNoZXZldXguIElsIGZhdXQgYXZvaXIgdnUgZGVzIHNhdXZhZ2VzCnNvdXMgbCdpbmZsdWVuY2UgZGUgbCdhbGNvb2wgcG91ciBzZSBmYWlyZSB1bmUgaWTDqWUgZGUgY2VzIHNjw6huZXMKdnJhaW1lbnQgaW5mZXJuYWxlcy4gQydlc3QgZGFucyB1bmUgZGUgY2VzIG9jY2FzaW9ucyBxdWUgbGEKc2F1dmFnZXNzZSBhdmFpdCB2b3VsdSBmb3JjZXIgbGEgcG9ydGUgZGUgbGEgbWFpc29ubmV0dGUgZGUgTWFyaWUKR2FsbGllbiBldCBxdSdlbGxlIGF2YWl0IG1hdWRpdCBsYSBwYXV2cmUgZmVtbWUsIGRlbWkgbW9ydGUgZGUgcGV1ciwKcXVpIGF2YWl0IHJlZnVzw6kgZGUgbGEgbGFpc3NlciBlbnRyZSBjaGV6IGVsbGUuCgpFdCBsJ29uIGNyb3lhaXQgZ8OpbsOpcmFsZW1lbnQgYXUgdmlsbGFnZSBxdWUgYyfDqXRhaXQgbGEgbWFsw6lkaWN0aW9uIGRlCmxhIHNhdXZhZ2Vzc2UgcXVpIMOpdGFpdCBsYSBjYXVzZSBkZSBsYSBsYWlkZXVyIGRlIGNlIHBhdXZyZSBNYWNsb3VuZS4KT24gZGlzYWl0IGF1c3NpLCBtYWlzIHNhbnMgbCdhZmZpcm1lciBjYXTDqWdvcmlxdWVtZW50LCBxdSd1biBxdcOqdGV1eApkZSBTYWludC1NaWNoZWwgZGUgWWFtYXNrYSBxdWkgYXZhaXQgbGEgcsOpcHV0YXRpb24gZCfDqnRyZSB1biBwZXUKc29yY2llciwgYXZhaXQgamV0w6kgdW4gYXV0cmUgc29ydCDDoCBNYXJpZSBHYWxsaWVuIHBhcmNlIHF1ZSBsYSBwYXV2cmUKZmVtbWUgbidhdmFpdCBwdSBsdWkgZmFpcmUgbCdhdW3DtG5lLCBhbG9ycyBxdSdlbGxlIMOpdGFpdCBlbGxlLW3Dqm1lCmRhbnMgbGEgcGx1cyBncmFuZGUgbWlzw6hyZSwgcGVuZGFudCBzZXMgcmVsZXZhaWxsZXMsIGFwcsOocyBsYQpuYWlzc2FuY2UgZGUgc29uIGVuZmFudC4KCklJCgpNYWNsb3VuZSBhdmFpdCBncmFuZGkgZW4gdHJhdmFpbGxhbnQsIHNlIHJlbmRhaXQgdXRpbGUgbG9yc3F1J2lsIGxlCnBvdXZhaXQgZXQgdG91am91cnMgcHLDqnQgw6AgcmVuZHJlIHNlcnZpY2UsIMOgIGZhaXJlIHVuZSBjb21taXNzaW9uLApvdSDDoCBwcsOqdGVyIGxhIG1haW4gbG9yc3F1ZSBsJ29jY2FzaW9uIHNlIHByw6lzZW50YWl0LiBJbCBuJ2F2YWl0CmphbWFpcyDDqXTDqSDDoCBsJ8OpY29sZSBldCBjZSBuJ2VzdCBxdWUgdHLDqHMgdGFyZCwgw6AgbCfDomdlIGRlIHRyZWl6ZQpvdSBxdWF0b3J6ZSBhbnMsIHF1ZSBsZSBjdXLDqSBkdSB2aWxsYWdlIGx1aSBhdmFpdCBwZXJtaXMgZGUgZmFpcmUKc2EgcHJlbWnDqHJlIGNvbW11bmlvbi4gQmllbiBxdSdpbCBuZSBmw7t0IHBhcyBjZSBxdWUgbCdvbiBhcHBlbGxlCnVuIHNpbXBsZSBkJ2VzcHJpdCwgaWwgYXZhaXQgcG91c3PDqSB1biBwZXUgw6AgbGEgZGlhYmxlIGV0IHNvbgppbnRlbGxpZ2VuY2UgcXVpIG4nw6l0YWl0IHBhcyB0csOocyB2aXZlIG4nYXZhaXQgamFtYWlzIMOpdMOpIGN1bHRpdsOpZS4KRMOocyBsJ8OiZ2UgZGUgZGl4IGFucywgaWwgYWlkYWl0IGTDqWrDoCBzYSBtw6hyZSDDoCBmYWlyZSBib3VpbGxpciBsYQptYXJtaXRlIGV0IMOgIGFtYXNzZXIgbGEgcHJvdmlzaW9uIGRlIGJvaXMgZGUgY2hhdWZmYWdlIHBvdXIKbCdoaXZlci4KCkMnw6l0YWl0IGfDqW7DqXJhbGVtZW50IHN1ciBsYSBncsOodmUgZHUgU2FpbnQtTGF1cmVudCBxdSdpbCBwYXNzYWl0IGRlcwpoZXVyZXMgZW50acOocmVzIMOgIHJlY3VlaWxsaXIgbGVzIGJvaXMgZmxvdHRhbnRzIHF1aSBkZXNjZW5kYWllbnQgYXZlYwpsZSBjb3VyYW50IHBvdXIgcyfDqWNob3VlciBzdXIgbGEgcml2ZS4KCk1hY2xvdW5lIGF2YWl0IGTDqXZlbG9wcMOpIGRlIGJvbm5lIGhldXJlIHVuIHBlbmNoYW50IHBvdXIgbGUgY29tbWVyY2UKZXQgbGUgYnJvY2FudGFnZSBldCBjZSBmdXQgdW4gZ3JhbmQgam91ciBwb3VyIGx1aSBsb3JzcXUnaWwgcHV0IHNlCnJlbmRyZSDDoCBNb250csOpYWwgcG91ciB5IGFjaGV0ZXIgcXVlbHF1ZXMgYXJ0aWNsZXMgZGUgdmVudGUgZmFjaWxlLApjb21tZSBkdSBmaWwsIGRlcyBhaWd1aWxsZXMsIGRlcyBib3V0b25zLCBxdSdpbCBjb2xwb3J0YWl0IGVuc3VpdGUKZGFucyB1biBwYW5pZXIgYXZlYyBkZXMgYm9uYm9ucyBldCBkZXMgZnJ1aXRzLiBJbCBuJ3kgZXV0IHBsdXMgZGUKbWlzw6hyZSBkYW5zIGxhIHBldGl0ZSBmYW1pbGxlIMOgIGRhdGVyIGRlIGNldHRlIMOpcG9xdWUsIG1haXMgbGUgcGF1dnJlCmdhcsOnb24gYXZhaXQgY29tcHTDqSBzYW5zIGxhIG1hbGFkaWUsIHF1aSBjb21tZW7Dp2Egw6AgcydhdHRhcXVlciDDoCBzb24KcGF1dnJlIGNvcnBzLCBkw6lqw6Agc2kgZmFpYmxlIGV0IHNpIGNydWVsbGVtZW50IMOpcHJvdXbDqS4KCk1haXMgTWFjbG91bmUgw6l0YWl0IGJyYXZlLCBldCBpbCBuJ3kgYXZhaXQgZ3XDqHJlIGRlIHRlbXBzIHF1J29uIG5lCmwnYXBlcsOndXQgc3VyIGxlIHF1YWksIGF1IGTDqWJhcmNhZMOocmUgZGVzIGJhdGVhdXggw6AgdmFwZXVyLCBsZXMgam91cnMKZGUgbWFyY2jDqSwgb3UgYXZhbnQgZXQgYXByw6hzIGxhIGdyYW5kJ21lc3NlLCB0b3VzIGxlcyBkaW1hbmNoZXMgZXQKZsOqdGVzIGRlIGwnYW5uw6llLiBQZW5kYW50IGxlcyBsb25ndWVzIHNvaXLDqWVzIGQnw6l0w6ksIGlsIGZhaXNhaXQgbGEKcMOqY2hlIGRhbnMgbGVzIGVhdXggZHUgZmxldXZlLCBldCBpbCDDqXRhaXQgZGV2ZW51IGQndW5lIGhhYmlsZXTDqSBwZXUKY29tbXVuZSBwb3VyIGNvbmR1aXJlIHVuIGNhbm90LCBzb2l0IMOgIGwnYXZpcm9uIHBlbmRhbnQgbGVzIGpvdXJzIGRlCmNhbG1lLCBzb2l0IMOgIGxhIHZvaWxlIGxvcnNxdWUgbGVzIHZlbnRzIMOpdGFpZW50IGZhdm9yYWJsZXMuIFBlbmRhbnQKbGVzIGdyYW5kZXMgYnJpc2VzIGR1IG5vcmQtZXN0LCBvbiBhcGVyY2V2YWl0IHBhcmZvaXMgTWFjbG91bmUgc2V1bCwKZGFucyBzb24gY2Fub3QsIGxlcyBjaGV2ZXV4IGF1IHZlbnQsIGxvdXZveWFudCBlbiBkZXNjZW5kYW50IGxlCmZsZXV2ZSBvdSBmaWxhbnQgdmVudCBhcnJpw6hyZSB2ZXJzIGxlcyDDrmxlcyBkZSBDb250cmVjb2V1ci4KClBlbmRhbnQgbGEgc2Fpc29uIGRlcyBmcmFpc2VzLCBkZXMgZnJhbWJvaXNlcyBldCBkZXMgX2JsdWV0c18sIGlsCmF2YWl0IG9yZ2FuaXPDqSB1biBwZXRpdCBjb21tZXJjZSBkZSBncm9zIHF1aSBsdWkgcmFwcG9ydGFpdCBkJ2Fzc2V6CmJlYXV4IGLDqW7DqWZpY2VzLiBJbCBhY2hldGFpdCBjZXMgZnJ1aXRzIGRlcyB2aWxsYWdlb2lzIHBvdXIgYWxsZXIgbGVzCnJldmVuZHJlIHN1ciBsZXMgbWFyY2jDqXMgZGUgTW9udHLDqWFsLiBDJ2VzdCBhbG9ycyBxdSdpbCBmaXQgbGEKY29ubmFpc3NhbmNlIGQndW5lIHBhdXZyZSBmaWxsZSBxdWkgbHVpIGFwcG9ydGFpdCBzZXMgX2JsdWV0c18gZGUKbGEgcml2ZSBvcHBvc8OpZSBkdSBmbGV1dmUsIG/DuSBlbGxlIGhhYml0YWl0LCBkYW5zIGxhIGNvbmNlc3Npb24gZGUgbGEKUGV0aXRlLU1pc8OocmUuCgpJSUkKCkxhIHJlbmNvbnRyZSBkZSBjZXR0ZSBmaWxsZSBmdXQgdG91dGUgdW5lIHLDqXbDqWxhdGlvbiBkYW5zIGwnZXhpc3RlbmNlCmR1IHBhdXZyZSBNYWNsb3VuZS4gUG91ciBsYSBwcmVtacOocmUgZm9pcyBpbCBhdmFpdCBvc8OpIGxldmVyIGxlcyB5ZXV4CnN1ciB1bmUgZmVtbWUgZXQgaWwgZW4gZGV2aW50IMOpcGVyZHVtZW50IGFtb3VyZXV4LgoKTGEgamV1bmUgZmlsbGUsIHF1aSBzJ2FwcGVsYWl0IE1hcmllIEpveWVsbGUsIG4nw6l0YWl0IG5pIHJpY2hlIG5pCmJlbGxlLiBDJ8OpdGFpdCB1bmUgcGF1dnJlIG9ycGhlbGluZSBtYWlncmUsIGNow6l0aXZlLCDDqXB1aXPDqWUgcGFyIGxlCnRyYXZhaWwsIHF1J3VuIG9uY2xlIGF2YWl0IHJlY3VlaWxsaWUgcGFyIGNoYXJpdMOpIGV0IHF1ZSBsJ29uIGZhaXNhaXQKdHJhdmFpbGxlciBjb21tZSB1bmUgZXNjbGF2ZSBlbiDDqWNoYW5nZSBkJ3VuZSBtYWlncmUgcGl0YW5jZSBldCBkZQp2w6p0ZW1lbnRzIGRlIHJlYnV0IHF1aSBzdWZmaXNhaWVudCDDoCBwZWluZSBwb3VyIGxhIGNvdXZyaXIgZMOpY2VtbWVudC4KTGEgcGF1dnJldHRlIG4nYXZhaXQgamFtYWlzIHBvcnTDqSBkZSBjaGF1c3N1cmVzIGRlIHNhIHZpZSBldCB1biBwZXRpdApjaMOibGUgbm9pciDDoCBjYXJyZWF1eCByb3VnZXMgc2VydmFpdCDDoCBsdWkgY291dnJpciBsYSB0w6p0ZSBldCBsZXMKw6lwYXVsZXMuCgpMZSBwcmVtaWVyIHTDqW1vaWduYWdlIGQnYWZmZWN0aW9uIHF1ZSBsdWkgZG9ubmEgTWFjbG91bmUgZnV0IGwnYWNoYXQKZCd1bmUgcGFpcmUgZGUgc291bGllcnMgZXQgZCd1bmUgcm9iZSBkJ2luZGllbm5lIMOgIHJhbWFnZXMsIHF1J2lsCmFwcG9ydGEgdW4gam91ciBkZSBNb250csOpYWwgZXQgcXUnaWwgb2Zmcml0IHRpbWlkZW1lbnQgw6AgbGEgcGF1dnJlCmZpbGxlLCBlbiBsdWkgZGlzYW50LCBkYW5zIHNvbiBsYW5nYWdlIHBhcnRpY3VsaWVyOgoKLS1Sb2JlLCBtYW0nc2VsbGUsIHNvdWxpZXJzLCBtYW0nc2VsbGUuIE1hY2xvdW5lIGFjaMOodGUgw6dhIHBvdXIgdm91cy4KVm91cyBwcmVuZHJlLCBoZWluPwoKRXQgTWFyaWUgSm95ZWxsZSBhdmFpdCBhY2NlcHTDqSBzaW1wbGVtZW50IGRldmFudCBsZSByZWdhcmQKZCdpbmV4cHJpbWFibGUgYWZmZWN0aW9uIGRvbnQgbCdhdmFpdCBlbnZlbG9wcMOpZSBNYWNsb3VuZSBlbiBsdWkKb2ZmcmFudCBzb24gY2FkZWF1LgoKQyfDqXRhaXQgbGEgcHJlbWnDqHJlIGZvaXMgcXVlIGxhIHBhdXZyZSBNYXJpY2hldHRlLCBjb21tZSBvbgpsJ2FwcGVsYWl0IHRvdWpvdXJzLCBzZSB2b3lhaXQgbCdvYmpldCBkJ3VuZSBvZmZyYW5kZSBxdWkgbmUKcHJvdmVuYWl0IHBhcyBkJ3VuIHNlbnRpbWVudCBkZSBwaXRpw6kuIEVsbGUgYXZhaXQgY29tcHJpcyBNYWNsb3VuZSwKZXQgc2FucyBzJ29jY3VwZXIgZGUgc2EgbGFpZGV1ciBldCBkZSBzb24gYmFyYWdvdWluYWdlLCBzb24gY29ldXIKYXZhaXQgw6l0w6kgcHJvZm9uZMOpbWVudCB0b3VjaMOpLgoKRXQgw6AgZGF0ZXIgZGUgY2Ugam91ciBNYWNsb3VuZSBldCBNYXJpY2hldHRlIHMnYWltw6hyZW50LCBjb21tZSBvbgpzJ2FpbWUgbG9yc3F1J29uIGEgZGl4LWh1aXQgYW5zLCBvdWJsaWFudCBxdWUgbGEgbmF0dXJlIGF2YWl0IGZhaXQKZCdldXggZGVzIMOqdHJlcyDDoCBwYXJ0IHF1J2lsIG5lIGZhbGxhaXQgbcOqbWUgcGFzIHBlbnNlciDDoCB1bmlyIHBhciBsZQptYXJpYWdlLgoKTWFjbG91bmUgZGFucyBzYSBmcmFuY2hpc2UgZXQgZGFucyBzYSBzaW1wbGljaXTDqSByYWNvbnRhIMOgIHNhIG3DqHJlIGNlCnF1aSBzJ8OpdGFpdCBwYXNzw6ksIGV0IGxhIHZpZWlsbGUgTWFyaWUgR2FsbGllbiB0cm91dmEgdG91dCBuYXR1cmVsCnF1ZSBzb24gZmlscyBlw7t0IGNob2lzaSB1bmUgYm9ubmUgYW1pZSBldCBxdSdpbCBwZW5zw6J0IGF1IG1hcmlhZ2UuCgpUb3V0IGxlIHZpbGxhZ2UgZnV0IGJpZW50w7R0IGRhbnMgbGUgc2VjcmV0LCBjYXIgbGUgZGltYW5jaGUgc3VpdmFudApNYWNsb3VuZSDDqXRhaXQgcGFydGkgZGUgYm9ubmUgaGV1cmUgZGFucyBzb24gY2Fub3QgcG91ciBzZSByZW5kcmUgw6AKbGEgUGV0aXRlLU1pc8OocmUgZGFucyBsZSBidXQgZGUgcHJpZXIgTWFyaWNoZXR0ZSBkZSBsJ2FjY29tcGFnbmVyIMOgCmxhIGdyYW5kJ21lc3NlIMOgIExhbm9yYWllLiBFdCBjZWxsZS1jaSBhdmFpdCBhY2NlcHTDqSBzYW5zIHNlIGZhaXJlCnByaWVyLCB0cm91dmFudCBsYSBkZW1hbmRlIGFic29sdW1lbnQgbmF0dXJlbGxlLCBwdWlzcXUnZWxsZSBhdmFpdAphY2NlcHTDqSBNYWNsb3VuZSBjb21tZSBzb24gY2F2YWxpZXIgZW4gcmVjZXZhbnQgc2VzIGNhZGVhdXguCgpNYXJpY2hldHRlIHNlIGZpdCBiZWxsZSBwb3VyIGwnb2NjYXNpb24uIEVsbGUgbWl0IHNhIHJvYmUgw6AgcmFtYWdlcwpldCBzZXMgc291bGllcnMgZnJhbsOnYWlzOyBpbCBuZSBsdWkgbWFucXVhaXQgcGx1cyBxdSd1biBjaGFwZWF1IMOgCnBsdW1lcyBjb21tZSBlbiBwb3J0YWllbnQgbGVzIGZpbGxlcyBkZSBMYW5vcmFpZSwgcG91ciBlbiBmYWlyZSB1bmUKZGVtb2lzZWxsZSDDoCBsYSBtb2RlLiBTb24gb25jbGUsIHF1aSBsJ2F2YWl0IHJlY3VlaWxsaWUsIMOpdGFpdCB1bgpwYXV2cmUgZGlhYmxlIHF1aSBzZSB0cm91dmFpdCDDoCBsYSB0w6p0ZSBkJ3VuZSBub21icmV1c2UgZmFtaWxsZSBldApxdWkgbmUgZGVtYW5kYWl0IHBhcyBtaWV1eCBxdWUgZGUgcydlbiBkw6liYXJyYXNzZXIgZW4gbGEgbWFyaWFudCBhdQpwcmVtaWVyIHZlbnU7IGV0IGF1dGFudCwgcG91ciBsdWksIHZhbGFpdCBNYWNsb3VuZSBxdSd1biBhdXRyZS4KCklsIGZhdXQgYXZvdWVyIHF1J2lsIHNlIHByb2R1aXNpdCB1bmUgY2VydGFpbmUgc2Vuc2F0aW9uLCBkYW5zIGxlCnZpbGxhZ2UsIGxvcnNxdWUgc3VyIGxlIHRyb2lzacOobWUgY291cCBkZSBsYSBncmFuZCdtZXNzZSBNYWNsb3VuZQphcHBhcnV0IGRvbm5hbnQgbGUgYnJhcyDDoCBNYXJpY2hldHRlLiBUb3V0IGxlIG1vbmRlIGF2YWl0IHRyb3AKZCdhZmZlY3Rpb24gcG91ciBsZSBwYXV2cmUgZ2Fyw6dvbiBwb3VyIHNlIG1vcXVlciBkZSBsdWkgb3V2ZXJ0ZW1lbnQsCm1haXMgb24gc2UgZMOpdG91cm5hIGxhIHTDqnRlIHBvdXIgY2FjaGVyIGRlcyBzb3VyaXJlcyBxdSdvbiBuZSBwb3V2YWl0CnN1cHByaW1lciBlbnRpw6hyZW1lbnQuCgpMZXMgZGV1eCBhbW91cmV1eCBlbnRyw6hyZW50IGRhbnMgbCfDqWdsaXNlIHNhbnMgcGFyYcOudHJlIHMnb2NjdXBlciBkZQpjZXV4IHF1aSBzJ2FycsOqdGFpZW50IHBvdXIgbGVzIHJlZ2FyZGVyLCBldCBhbGzDqHJlbnQgc2UgcGxhY2VyIMOgIGxhCnTDqnRlIGRlIGxhIGdyYW5kZSBhbGzDqWUgY2VudHJhbGUsIHN1ciBkZXMgYmFuY3MgZGUgYm9pcyByw6lzZXJ2w6lzIGF1eApwYXV2cmVzIGRlIGxhIHBhcm9pc3NlLgoKRXQgbMOgLCBzYW5zIHRvdXJuZXIgbGEgdMOqdGUgdW5lIHNldWxlIGZvaXMsIGV0IHNhbnMgcydvY2N1cGVyIGRlCmwnZWZmZXQgcXUnaWxzIHByb2R1aXNhaWVudCwgaWxzIGVudGVuZGlyZW50IGxhIG1lc3NlIGF2ZWMgbGEgcGx1cwpncmFuZGUgcGnDqXTDqS4KCklscyBzb3J0aXJlbnQgZGUgbcOqbWUgcXUnaWxzIMOpdGFpZW50IGVudHLDqXMsIGNvbW1lIHMnaWxzIGV1c3NlbnQgw6l0w6kKc2V1bHMgYXUgbW9uZGUgZXQgaWxzIHNlIHJlbmRpcmVudCB0cmFucXVpbGxlbWVudCDDoCBwYXMgbWVzdXLDqXMsIGNoZXoKTWFyaWUgR2FsbGllbiBvw7kgbGVzIGF0dGVuZGFpdCBsZSBkw65uZXIgZHUgZGltYW5jaGUuCgotLU1hY2xvdW5lIGEgZmFpdCB1bmUgImJsb25kZSIhIE1hY2xvdW5lIHZhIHNlIG1hcmllciEKCi0tTWFjbG91bmUgcXVpIGZyw6lxdWVudGUgbGEgTWFyaWNoZXR0ZSEKCkV0IGxlcyBjb21tZW50YWlyZXMgZCdhbGxlciBsZXVyIHRyYWluIHBhcm1pIGxhIGZvdWxlIHF1aSBzZSByw6l1bml0CnRvdWpvdXJzIMOgIGxhIGZpbiBkZSBsYSBncmFuZCdtZXNzZSwgZGV2YW50IGwnw6lnbGlzZSBwYXJvaXNzaWFsZSwKcG91ciBjYXVzZXIgZGVzIMOpdsOpbmVtZW50cyBkZSBsYSBzZW1haW5lLgoKLS1DJ2VzdCB1biBicmF2ZSBldCBob25uw6p0ZSBnYXLDp29uLCBkaXNhaXQgdW4gcGV1IHRvdXQgbGUgbW9uZGUsIG1haXMKaWwgbid5IGF2YWl0IHBhcyBkZSBib24gc2VucyBwb3VyIHVuIHNpbmdlIGNvbW1lIGx1aSwgZGUgcGVuc2VyIGF1Cm1hcmlhZ2UuCgpDJ8OpdGFpdCBsw6AgbGUgdmVyZGljdCBwb3B1bGFpcmUhCgpMZSBtw6lkZWNpbiBxdWkgw6l0YWl0IGPDqWxpYmF0YWlyZSBldCBxdWkgZMOubmFpdCBjaGV6IGxlIGN1csOpIHRvdXMgbGVzCmRpbWFuY2hlcywgbHVpIHNvdWZmbGEgdW4gbW90IGRlIGxhIGNob3NlIHBlbmRhbnQgbGUgcmVwYXMsIGV0IGlsIGZ1dApjb252ZW51IGVudHJlIGV1eCBxdSdpbCBmYWxsYWl0IGVtcMOqY2hlciBjZSBtYXJpYWdlIMOgIHRvdXQgcHJpeC4gSWxzCnBlbnNhaWVudCBxdWUgY2Ugc2VyYWl0IHVuIGNyaW1lIGRlIHBlcm1ldHRyZSDDoCBNYWNsb3VuZSBtYWxhZGUsCmluZmlybWUsIHJhY2hpdGlxdWUgZXQgZGlmZm9ybWUgY29tbWUgaWwgbCfDqXRhaXQsIGRlIGRldmVuaXIgbGUKcMOocmUgZCd1bmUgcHJvZ8Opbml0dXJlIHF1aSBzZXJhaXQgdm91w6llIGQnYXZhbmNlIMOgIHVuZSBjb25kaXRpb24KZCdpbmbDqXJpb3JpdMOpIGludGVsbGVjdHVlbGxlIGV0IGRlIGTDqWNyw6lwaXR1ZGUgcGh5c2lxdWUuIFJpZW4gbmUKcHJlc3NhaXQgY2VwZW5kYW50IGV0IGlsIHNlcmFpdCB0b3Vqb3VycyB0ZW1wcyBkJ2FycsOqdGVyIGxlIG1hcmlhZ2UKbG9yc3F1J29uIHZpZW5kcmFpdCBtZXR0cmUgbGVzIGJhbnMgw6AgbCfDqWdsaXNlLgoKRXQgcHVpcyEgY2UgbWFyaWFnZTsgw6l0YWl0LWNlIGJpZW4gc8OpcmlldXgsIGFwcsOocyB0b3V0PwoKSVYKCk1hY2xvdW5lLCBxdWkgbmUgY2F1c2FpdCBndcOocmUgcXVlIGxvcnNxdSdpbCB5IMOpdGFpdCBmb3Jjw6kgcGFyIHNlcwpwZXRpdGVzIGFmZmFpcmVzLCBpZ25vcmFpdCB0b3VzIGxlcyBjb21wbG90cyBxdWUgbCdvbiB0cmFtYWl0IGNvbnRyZQpzb24gYm9uaGV1ci4gSWwgdmFxdWFpdCDDoCBzZXMgb2NjdXBhdGlvbnMsIHNlbG9uIHNvbiBoYWJpdHVkZSwgbWFpcwpjaGFxdWUgc29pciwgw6AgbGEgZmF2ZXVyIGRlIGwnb2JzY3VyaXTDqSwgbG9yc3F1ZSB0b3V0IHJlcG9zYWl0IGF1CnZpbGxhZ2UsIGlsIG1vbnRhaXQgZGFucyBzb24gY2Fub3QgZXQgdHJhdmVyc2FpdCDDoCBsYSBQZXRpdGUtTWlzw6hyZSwKcG91ciB5IHJlbmNvbnRyZXIgTWFyaWNoZXR0ZSBxdWkgbCdhdHRlbmRhaXQgc3VyIGxhIGZhbGFpc2UgYWZpbiBkZQpsJ2FwZXJjZXZvaXIgZGUgcGx1cyBsb2luLiBTaSBwYXV2cmUgcXUnaWwgZsO7dCwgaWwgdHJvdXZhaXQgdG91am91cnMKbW95ZW4gZCdhcHBvcnRlciB1biBwZXRpdCBjYWRlYXUgw6Agc2EgYm9ubmUgYW1pZTogdW4gYm91dCBkZSBydWJhbiwKdW4gbW91Y2hvaXIgZGUgY290b24sIHVuIGZydWl0LCB1biBib25ib24gcXUnb24gbHVpIGF2YWl0IGRvbm7DqSBldApxdSdpbCBhdmFpdCBjb25zZXJ2w6ksIHF1ZWxxdWVzIGZsZXVycyBzYXV2YWdlcyBxdSdpbCBhdmFpdCBjdWVpbGxpZXMKZGFucyBsZXMgY2hhbXBzIG91IHN1ciBsZXMgYm9yZHMgZGUgbGEgZ3JhbmRlIHJvdXRlLiBJbCBvZmZyYWl0IGNlbGEKYXZlYyB0b3Vqb3VycyBsZSBtw6ptZToKCi0tQsO0am91IE1hw69jaGV0dGUhCgotLUJvbmpvdXIgTWFjbG91bmUhCgpFdCBjJ8OpdGFpdCBsw6AgdG91dGUgbGV1ciBjb252ZXJzYXRpb24uIElscyBzJ2Fzc2V5YWllbnQgc3VyIGxlIGJvcmQKZHUgY2Fub3QgcXVlIE1hY2xvdW5lIGF2YWl0IHRpcsOpIHN1ciBsYSBncsOodmUgZXQgaWxzIGF0dGVuZGFpZW50IGzDoCwKcXVlbHF1ZWZvaXMgcGVuZGFudCB1bmUgaGV1cmUgZW50acOocmUsIGp1c3F1J2F1IG1vbWVudCBvw7kgdW5lIHZvaXggZGUKZmVtbWUgc2UgZmFpc2FpdCBlbnRlbmRyZSBkZSBsYSBtYWlzb24uCgotLU1hcmljaGV0dGUhIG9oISBNYXJpY2hldHRlIQoKQyfDqXRhaXQgbGEgdGFudGUgcXVpIHByb2NsYW1haXQgbCdoZXVyZSBkZSByZW50cmVyIHBvdXIgc2UgbWV0dHJlIGF1CmxpdC4KCkxlcyBkZXV4IGFtb3VyZXV4IHNlIGRvbm5haWVudCB0cmlzdGVtZW50IGxhIG1haW4gZW4gc2UgcmVnYXJkYW50CmZpeGVtZW50LCBsZXMgeWV1eCBkYW5zIGxlcyB5ZXV4IGV0OgoKLS1Cw7Rzb2kgTWHDr2NoZXR0ZSEKCi0tQm9uc29pciBNYWNsb3VuZSEKCkV0IE1hcmljaGV0dGUgcmVudHJhaXQgYXUgbG9naXMgZXQgTWFjbG91bmUgcmV0b3VybmFpdCDDoCBMYW5vcmFpZS4KCkxlcyBjaG9zZXMgc2UgcGFzc2FpZW50IGFpbnNpIGRlcHVpcyBwbHVzIGQndW4gbW9pcywgbG9yc3F1J3VuIHNvaXIKTWFjbG91bmUgYXJyaXZhIHBsdXMgam95ZXV4IHF1ZSBkJ2hhYml0dWRlLgoKLS1Cw7Rqb3UgTWHDr2NoZXR0ZSEKCi0tQm9uam91ciBNYWNsb3VuZSEKCkV0IGxlIHBhdXZyZSBpbmZpcm1lIHNvcnRpdCBkZSBzb24gZ291c3NldCB1bmUgcGV0aXRlIGJvw650ZSBlbiBjYXJ0b24KYmxhbmMgZCdvw7kgaWwgdGlyYSB1biBqb25jIGQnb3IgYmllbiBtb2Rlc3RlIHF1J2lsIHBhc3NhIGF1IGRvaWd0IGRlCmxhIGpldW5lIGZpbGxlLgoKLS1Ob3VzIGF1dHJlcywgbWFyacOpcyDDoCBTYWludC1NaWNoZWwuIEhlaW4hIE1hw69jaGV0dGUhCgotLU91aSwgTWFjbG91bmUhIHF1YW5kIHR1IHZvdWRyYXMuCgpFdCBsZXMgZGV1eCBwYXV2cmVzIGTDqXNow6lyaXTDqXMgc2UgZG9ubsOocmVudCB1biBiYWlzZXIgYmllbiBjaGFzdGUKcG91ciBzY2VsbGVyIGxldXJzIGZpYW7Dp2FpbGxlcy4KCkV0IGNlIGZ1dCB0b3V0LgoKTGUgbWFyaWFnZSDDqXRhbnQgZMOpY2lkw6kgcG91ciBsYSBTYWludC1NaWNoZWwsIGlsIG4neSBhdmFpdCBwbHVzIHF1J8OgCm1ldHRyZSBsZXMgYmFucyDDoCBsJ8OpZ2xpc2UuIExlcyBwYXJlbnRzIGNvbnNlbnRhaWVudCBhdSBtYXJpYWdlIGV0IGlsCsOpdGFpdCBiaWVuIGludXRpbGUgZGUgdm9pciBsZSBub3RhaXJlIHBvdXIgbGUgY29udHJhdCwgY2FyIGxlcyBkZXV4CsOpcG91eCBjb21tZW5jZXJhaWVudCBsYSB2aWUgY29tbXVuZSBkYW5zIGxhIG1pc8OocmUgZXQgZGFucyBsYQpwYXV2cmV0w6kuIElsIG5lIHBvdXZhaXQgw6p0cmUgcXVlc3Rpb24gZCdow6lyaXRhZ2UsIGRlIGRvdWFpcmUgZXQgZGUKc8OpcGFyYXRpb24gb3UgZGUgY29tbXVuYXV0w6kgZGUgYmllbnMuCgpMZSBsZW5kZW1haW4sIHN1ciBsZXMgcXVhdHJlIGhldXJlcyBkZSByZWxldsOpZSwgTWFjbG91bmUgbWl0IHNlcwpoYWJpdHMgZGVzIGRpbWFuY2hlcyBldCBzZSBkaXJpZ2VhIHZlcnMgbGUgcHJlc2J5dMOocmUgb8O5IGlsIHRyb3V2YSBsZQpjdXLDqSBxdWkgc2UgcHJvbWVuYWl0IGRhbnMgbGVzIGFsbMOpZXMgZGUgc29uIGphcmRpbiwgZW4gcsOpY2l0YW50IHNvbgpicsOpdmlhaXJlLgoKLS1Cb25qb3VyIE1heGltZSEKCkxlIGN1csOpIHNldWwsIGF1IHZpbGxhZ2UsIGwnYXBwZWxhaXQgZGUgc29uIHbDqXJpdGFibGUgcHLDqW5vbS4KCi0tQsO0am91IG1vc2lldXIgY3Vyw6khCgotLUonYXBwcmVuZHMsIE1heGltZSwgcXVlIHR1IGFzIGwnaW50ZW50aW9uIGRlIHRlIG1hcmllci4KCi0tT3VpISBtb3NpZXVyIGN1csOpLgoKLS1BdmVjIE1hcmljaGV0dGUgSm95ZWxsZSBkZSBDb250cmVjb2V1ciEKCi0tT3VpISBtb3NpZXVyIGN1csOpLgoKLS1JbCBuJ3kgZmF1dCBwYXMgcGVuc2VyLCBtb24gcGF1dnJlIE1heGltZS4gVHUgbidhcyBwYXMgbGVzIG1veWVucwpkZSBmYWlyZSB2aXZyZSB1bmUgZmVtbWUuIEV0IHRhIHBhdXZyZSBtw6hyZSwgcXVlIGRldmllbmRyYWl0LWVsbGUKc2FucyB0b2kgcG91ciBsdWkgZG9ubmVyIGR1IHBhaW4hCgpNYWNsb3VuZSwgcXVpIG4nYXZhaXQgamFtYWlzIHNvbmfDqSBxdSdpbCBww7t0IHkgYXZvaXIgZGVzIG9iamVjdGlvbnMKw6Agc29uIG1hcmlhZ2UsIHJlZ2FyZGEgbGUgY3Vyw6kgZCd1biBhaXIgZMOpc2VzcMOpcsOpLCBkZSBjZXQgYWlyIGQndW4KY2hpZW4gZmlkw6hsZSBxdWkgc2Ugdm9pdCBjcnVlbGxlbWVudCBmcmFwcMOpIHBhciBzb24gbWHDrnRyZSwgc2Fucwpjb21wcmVuZHJlIHBvdXJxdW9pIG9uIGxlIG1hbHRyYWl0ZSBhaW5zaS4KCi0tRWggbm9uISBtb24gcGF1dnJlIE1heGltZSwgaWwgbid5IGZhdXQgcGFzIHBlbnNlci4gVHUgZXMgZmFpYmxlLAptYWxhZGlmLiBJbCBmYXV0IHJlbWV0dHJlIGNlbGEgw6AgcGx1cyB0YXJkLCBsb3JzcXVlIHR1IHNlcmFzIGVuIMOiZ2UuCgpNYWNsb3VuZSwgYXR0ZXJyw6ksIG5lIHBvdXZhaXQgcGFzIHLDqXBvbmRyZS4gTGUgcmVzcGVjdCBxdSdpbCBhdmFpdApwb3VyIGxlIGN1csOpIGwnZW4gYXVyYWl0IGVtcMOqY2jDqSwgc2kgdW4gc2FuZ2xvdCBxdSdpbCBuZSBwdXQKY29tcHJpbWVyIGV0IHF1aSBsJ8OpdHJlaWduYWl0IMOgIGxhIGdvcmdlLCBuZSBsJ2V1dCBtaXMgZGFucwpsJ2ltcG9zc2liaWxpdMOpIGRlIHByb25vbmNlciB1bmUgc2V1bGUgcGFyb2xlLgoKVG91dCBjZSBxdSdpbCBjb21wcmVuYWl0IGMnZXN0IHF1J29uIGFsbGFpdCBsJ2VtcMOqY2hlciBkJ8OpcG91c2VyCk1hcmljaGV0dGUgZXQgZGFucyBzYSBuYcOvdmUgY3LDqWR1bGl0w6kgaWwgY29uc2lkw6lyYWl0IGwnYXJyw6p0IGNvbW1lCmZhdGFsLiBJbCBqZXRhIHVuIGxvbmcgcmVnYXJkIGRlIHJlcHJvY2hlIHN1ciBjZWx1aSBxdWkgc2FjcmlmaWFpdAphaW5zaSBzb24gYm9uaGV1ciwgZXQsIHNhbnMgc29uZ2VyIMOgIGRpc2N1dGVyIGxlIGp1Z2VtZW50IHF1aSBsZQpmcmFwcGFpdCBzaSBjcnVlbGxlbWVudCwgaWwgcGFydGl0IGVuIGNvdXJhbnQgdmVycyBsYSBncsOodmUgcXUnaWwKc3Vpdml0LCBwb3VyIHJlbnRyZXIgw6AgbGEgbWFpc29uLCBhZmluIGQnw6ljaGFwcGVyIMOgIGxhIGN1cmlvc2l0w6kgZGVzCnZpbGxhZ2VvaXMgcXVpIGwnYXVyYWllbnQgdnUgcGxldXJlci4gSWwgc2UgamV0YSBkYW5zIGxlcyBicmFzIGRlIHNhCm3DqHJlIHF1aSBuZSBjb21wcmVuYWl0IHJpZW4gw6Agc2EgcGVpbmUuIExlIHBhdXZyZSBpbmZpcm1lIHNhbmdsb3RhCmFpbnNpIHBlbmRhbnQgdW5lIGhldXJlIGV0IGF1eCBxdWVzdGlvbnMgcsOpaXTDqXLDqWVzIGRlIHNhIG3DqHJlIG5lIHB1dApxdWUgcsOpcG9uZHJlOgoKLS1Nb3NpZXVyIGN1csOpIHZldXQgcGFzIG1vaSBtYXJpZXIgTWHDr2NoZXR0ZS4gTW9pIG1vdXJpciwgbWFtYW4hCgpFdCBjJ2VzdCBlbiB2YWluIHF1ZSBsYSBwYXV2cmUgZmVtbWUsIGRhbnMgc29uIGxhbmdhZ2UgYmFyb3F1ZSwgdGVudGEKZGUgbGUgY29uc29sZXIuIEVsbGUgaXJhaXQgZWxsZS1tw6ptZSB2b2lyIGxlIGN1csOpIGV0IGx1aSBleHBsaXF1ZXJhaXQKbGEgY2hvc2UuIEVsbGUgbmUgdm95YWl0IHBhcyBwb3VycXVvaSBvbiB2b3VsYWl0IGVtcMOqY2hlciBzb24KTWFjbG91bmUgZCfDqXBvdXNlciBjZWxsZSBxdSdpbCBhaW1haXQuCgpWCgpNYWlzIE1hY2xvdW5lIMOpdGFpdCBpbmNvbnNvbGFibGUuIElsIG5lIHZvdWx1dCByaWVuIG1hbmdlciBhdSByZXBhcwpkdSBzb2lyIGV0LCBhdXNzaXTDtHQgbCdvYnNjdXJpdMOpIHZlbnVlLCBpbCBwcml0IHNvbiBhdmlyb24gZXQgc2UKZGlyaWdlYSB2ZXJzIGxhIGdyw6h2ZSwgZGFucyBsJ2ludGVudGlvbiBkZSB0cmF2ZXJzZXIgw6AgbGEKUGV0aXRlLU1pc8OocmUgcG91ciB5IHZvaXIgTWFyaWNoZXR0ZS4KClNhIG3DqHJlIHRlbnRhIGRlIGxlIGRpc3N1YWRlciBjYXIgbGUgY2llbCDDqXRhaXQgbG91cmQsIGwnYWlyIMOpdGFpdApmcm9pZCBldCBkZSBncm9zIG51YWdlcyByb3VsYWllbnQgw6AgbCdob3Jpem9uLiBPbiBhbGxhaXQgYXZvaXIgZGUgbGEKcGx1aWUgZXQgcGV1dC3DqnRyZSBkdSBncm9zIHZlbnQuIE1haXMgTWFjbG91bmUgbidlbnRlbmRpdCBwb2ludCwgb3UKZml0IHNlbWJsYW50IGRlIG5lIHBhcyBjb21wcmVuZHJlIGxlcyBvYmplY3Rpb25zIGRlIHNhIG3DqHJlLiBJbApsJ2VtYnJhc3NhIHRlbmRyZW1lbnQgZW4gbGEgc2VycmFudCBkYW5zIHNlcyBicmFzIGV0LCBzYXV0YW50IGRhbnMKc29uIGNhbm90LCBpbCBkaXNwYXJ1dCBkYW5zIGxhIG51aXQgc29tYnJlLgoKTWFyaWNoZXR0ZSBsJ2F0dGVuZGFpdCBzdXIgbGEgcml2ZSDDoCBsJ2VuZHJvaXQgb3JkaW5haXJlLiBMJ29ic2N1cml0w6kKbCdlbXDDqmNoYSBkZSByZW1hcnF1ZXIgbGEgZmlndXJlIGJvdWxldmVyc8OpZSBkZSBzb24gYW1pIGV0IGVsbGUKcydhdmFuw6dhIHZlcnMgbHVpIGF2ZWMgbGEgc2FsdXRhdGlvbiBhY2NvdXR1bcOpZToKCi0tQm9uam91ciBNYWNsb3VuZSEKCi0tQsO0am91IE1hw69jaGV0dGUhCgpFdCBsYSBwcmVuYW50IGJydXNxdWVtZW50IGRhbnMgc2VzIGJyYXMsIGlsIGxhIHNlcnJhIHZpb2xlbW1lbnQKY29udHJlIHNhIHBvaXRyaW5lLCBlbiBiYWxidXRpYW50IGRlcyBwaHJhc2VzIGluY29ow6lyZW50ZXMsCmVudHJlY291cMOpZXMgZGUgc2FuZ2xvdHMgZMOpY2hpcmFudHM6CgotLVR1IHNhaXMgTWHDr2NoZXR0ZS4uLiBNb3NpZXUgY3Vyw6kgdmV1dCBwYXMgbm91cyBhdXRyZXMgbWFyaWVyLi4uIHRvCnBhdXZyZSwgbm91cyBhdXRyZXMuLi4gdG8gbGFpZCwgbW9pLi4uIHRvIGxhaWQuLi4gdG8gbGFpZCwgcG91cgptYXJpZXIgdG9pLi4uIG1vaSB2ZXV4IHBsdXMgdml2cmUuLi4gbW9pIHZldXggbW91cmlyLgoKRXQgbGEgcGF1dnJlIE1hcmljaGV0dGUsIGNvbXByZW5hbnQgbGUgbWFsaGV1ciB0ZXJyaWJsZSBxdWkgbGVzCmZyYXBwYWl0LCBtw6psYSBzZXMgcGxldXJzIGF1eCBwbGFpbnRlcyBldCBhdXggc2FuZ2xvdHMgZHUgbWFsaGV1cmV1eApNYWNsb3VuZS4KCkV0IGlscyBzZSB0ZW5haWVudCBlbWJyYXNzw6lzIGRhbnMgbGEgbnVpdCBub2lyZSwgc2FucyBzJ29jY3VwZXIgZGUgbGEKcGx1aWUgcXVpIGNvbW1lbsOnYWl0IMOgIHRvbWJlciDDoCB0b3JyZW50cyBldCBkdSB2ZW50IGZyb2lkIGR1IG5vcmQgcXVpCmfDqW1pc3NhaXQgZGFucyBsZXMgZ3JhbmRzIHBldXBsaWVycyBxdWkgYm9yZGVudCBsYSBjw7R0ZS4KCkRlcyBoZXVyZXMgZW50acOocmVzIHNlIHBhc3PDqHJlbnQuIExhIHBsdWllIHRvbWJhaXQgdG91am91cnM7IGxlCmZsZXV2ZSBhZ2l0w6kgcGFyIGxhIHRlbXDDqnRlIMOpdGFpdCBjb3V2ZXJ0IGQnw6ljdW1lIGV0IGxlcyB2YWd1ZXMKZMOpZmVybGFpZW50IHN1ciBsYSBncsOodmUgZW4gdmVuYW50IGNvdXZyaXIsIHBhciBpbnRlcnZhbGxlLCBsZXMgcGllZHMKZGVzIGFtYW50cyBxdWkgcGxldXJhaWVudCBldCBxdWkgYmFsYnV0aWFpZW50IGRlcyBsYW1lbnRhdGlvbnMKcGxhaW50aXZlcyBlbiBzZSB0ZW5hbnQgZW1icmFzc8Opcy4KCkxlcyBwYXV2cmVzIGVuZmFudHMgw6l0YWllbnQgdHJlbXDDqXMgcGFyIGxhIHBsdWllIGZyb2lkZSwgbWFpcyBpbHMKb3VibGlhaWVudCB0b3V0IGRhbnMgbGV1ciBkw6lzZXNwb2lyLiBJbHMgbidhdmFpZW50IG5pIGwnaW50ZWxsaWdlbmNlCmRlIGRpc2N1dGVyIGxhIHNpdHVhdGlvbiwgbmkgbGUgY291cmFnZSBkZSBzZWNvdWVyIGxhIHRvcnBldXIgcXVpIGxlcwplbnZhaGlzc2FpdC4KCklscyBwYXNzw6hyZW50IGFpbnNpIGxhIG51aXQgZXQgY2Ugbidlc3QgcXUnYXV4IHByZW1pw6hyZXMgbHVldXJzIGR1CmpvdXIgcXUnaWxzIHNlIHPDqXBhcsOocmVudCBkYW5zIHVuZSDDqXRyZWludGUgY29udnVsc2l2ZS4gSWxzCmdyZWxvdHRhaWVudCBlbiBzJ2VtYnJhc3NhbnQsIGNhciBsZXMgcGF1dnJlcyBoYWlsbG9ucyBxdWkgbGVzCmNvdXZyYWllbnQgbGVzIHByb3TDqWdlYWllbnQgw6AgcGVpbmUgY29udHJlIGxhIGJpc2UgZHUgbm9yZCBxdWkKc291ZmZsYWl0IHRvdWpvdXJzIGVuIHRlbXDDqnRlLgoKw4l0YWl0LWNlIHBhciBwcmVzc2VudGltZW50IG91IHNpbXBsZW1lbnQgcGFyIGTDqXNlc3BvaXIgcXUnaWxzIHNlCmRpcmVudDoKCi0tQWRpZXUsIE1hY2xvdW5lIQoKLS1BZGlldSwgTWHDr2NoZXR0ZSEKCkV0IGxhIHBhdXZyZXR0ZSwgdHJlbXDDqWUgZXQgdHJhbnNpZSBqdXNxdSfDoCBsYSBtb8OrbGxlLCBjbGFxdWFudCBkZXMKZGVudHMsIHJlbnRyYSBjaGV6IHNvbiBvbmNsZSBvw7kgbCdvbiBuZSBzJ8OpdGFpdCBwYXMgYXBlcsOndSBkZSBzb24KYWJzZW5jZSwgdGFuZGlzIHF1ZSBNYWNsb3VuZSBsYW7Dp2FpdCBzb24gY2Fub3QgZGFucyBsZXMgcm91bGlucyBldCBzZQpkaXJpZ2VhaXQgdmVycyBMYW5vcmFpZS4gSWwgYXZhaXQgdmVudCBjb250cmFpcmUgZXQgaWwgZmFsbGFpdCB0b3V0ZQpzb24gaGFiaWxldMOpIHBvdXIgZW1ww6pjaGVyIGxhIGZyw6psZSBlbWJhcmNhdGlvbiBkJ8OqdHJlIHN1Ym1lcmfDqWUgZGFucwpsZXMgdmFndWVzLgoKSWwgZW4gZXV0IGJpZW4gcG91ciBkZXV4IGhldXJlcyBkJ3VuIHRyYXZhaWwgaW5jZXNzYW50IGF2YW50CmQnYXR0ZWluZHJlIGxhIHJpdmUgb3Bwb3PDqWUuCgpTYSBtw6hyZSBhdmFpdCBwYXNzw6kgbGEgbnVpdCBibGFuY2hlIMOgIGwnYXR0ZW5kcmUsIGRhbnMgdW5lIGlucXVpw6l0dWRlCm1vcnRlbGxlLiBNYWNsb3VuZSBzZSBtaXQgYXUgbGl0IHRvdXQgw6lwdWlzw6ksIGdyZWxvdHRhbnQsIGxhIGZpZ3VyZQplbmx1bWluw6llIHBhciBsYSBmacOodnJlOyBldCB0b3V0IGNlIHF1ZSBwdXQgZmFpcmUgbGEgcGF1dnJlIE1hcmllCkdhbGxpZW4gcG91ciByw6ljaGF1ZmZlciBzb24gZW5mYW50IGZ1dCBpbnV0aWxlLgoKTGUgZG9jdGV1ciwgYXBwZWzDqSB2ZXJzIGxlcyBuZXVmIGhldXJlcyBkdSBtYXRpbiwgZMOpY2xhcmEgcXUnaWwKc291ZmZyYWl0IGQndW5lIHBsZXVyw6lzaWUgbW9ydGVsbGUgZXQgcXUnaWwgbCdhbGxhaXQgYXBwZWxlciBsZQpwcsOqdHJlIGF1IHBsdXMgdMO0dC4KCkxlIGJvbiBjdXLDqSBhcHBvcnRhIGxlIHZpYXRpcXVlIGF1IG1vcmlib25kIHF1aSBnw6ltaXNzYWl0IGRhbnMgbGUKZMOpbGlyZSBldCBxdWkgYmFsYnV0aWFpdCBkZXMgcGFyb2xlcyBpbmNvbXByw6loZW5zaWJsZXMuIE1hY2xvdW5lCnJlY29ubnV0IGNlcGVuZGFudCBsZSBwcsOqdHJlIHF1aSBwcmlhaXQgw6Agc2VzIGPDtHTDqXMgZXQgaWwgZXhwaXJhCmVuIGpldGFudCBzdXIgbHVpIHVuIHJlZ2FyZCBkZSBkb3V4IHJlcHJvY2hlIGV0IGQnaW5leHByaW1hYmxlCmTDqXNlc3DDqXJhbmNlIGV0IGVuIG11cm11cmFudCBsZSBub20gZGUgTWFyaWNoZXR0ZS4KClZJCgpVbiBtb2lzIHBsdXMgdGFyZCwgw6AgbGEgU2FpbnQtTWljaGVsLCBsZSBjb3JiaWxsYXJkIGRlcyBwYXV2cmVzCmNvbmR1aXNhaXQgYXUgY2ltZXRpw6hyZSBkZSBDb250cmVjb2V1ciBNYXJpY2hldHRlIEpveWVsbGUsIG1vcnRlIGRlCnBodGlzaWUgZ2Fsb3BhbnRlIGNoZXogc29uIG9uY2xlIGRlIGxhIFBldGl0ZS1NaXPDqHJlLgoKQ2VzIGRldXggcGF1dnJlcyBkw6lzaMOpcml0w6lzIGRlIGxhIHZpZSwgZHUgYm9uaGV1ciBldCBkZSBsJ2Ftb3VyCm4nYXZhaWVudCBtw6ptZSBwYXMgZXUgbGUgdHJpc3RlIHByaXZpbMOoZ2UgZGUgc2UgdHJvdXZlciByw6l1bmlzIGRhbnMKbGEgbW9ydCwgc291cyBsZSBtw6ptZSB0ZXJ0cmUsIGRhbnMgdW4gY29pbiBvYnNjdXIgZHUgbcOqbWUgY2ltZXRpw6hyZS4KCgoKTEUgUMOIUkUgTE9VSVNPTgoKSQoKQyfDqXRhaXQgdW4gZ3JhbmQgdmlldXggc2VjLCBkcm9pdCBjb21tZSB1bmUgZmzDqGNoZSwgY29tbWUgb24gZGl0IGF1CnBheXMsIGF1IHRlaW50IGJhc2Fuw6ksIGV0IGxhIHTDqnRlIGV0IGxhIGZpZ3VyZSBjb3V2ZXJ0ZXMgZCd1bmUKw6lwYWlzc2UgY2hldmVsdXJlIGV0IGQndW5lIGxvbmd1ZSBiYXJiZSBwb2l2cmUgZXQgc2VsLgoKVG91cyBsZXMgdmlsbGFnZW9pcyBjb25uYWlzc2FpZW50IGxlIHDDqHJlIExvdWlzb24sIGV0IHNhIHLDqXB1dGF0aW9uCnMnw6l0ZW5kYWl0IG3Dqm1lIGF1eCBwYXJvaXNzZXMgdm9pc2luZXM7IHNvbiBtw6l0aWVyIGRlIGNhbm90aWVyIGV0IGRlCnBhc3NldXIgbGUgbWV0dGFpdCBlbiByZWxhdGlvbnMgYXZlYyB0b3VzIGxlcyDDqXRyYW5nZXJzIHF1aSB2b3VsYWllbnQKdHJhdmVyc2VyIGxlIFNhaW50LUxhdXJlbnQsIGxhcmdlIGVuIGNldCBlbmRyb2l0IGQndW5lIGJvbm5lIHBldGl0ZQpsaWV1ZS4KCk9uIGwnYXZhaXQgc3Vybm9tbcOpIGxlIF9HcmFuZCBUcm9uY18sIGV0IGMnw6l0YWl0IGfDqW7DqXJhbGVtZW50IHBhcgpjZSBzb2JyaXF1ZXQgY29jYXNzZSBxdSdvbiBsZSBkw6lzaWduYWl0IGxvcnNxdSdvbiBnbG9zYWl0IHN1ciBzb24KY29tcHRlLiBQb3VycXVvaSBsZSBfR3JhbmQgVHJvbmM/XyBNeXN0w6hyZSEgY2FyIGxlIHDDqHJlIExvdWlzb24KbidhdmFpdCByaWVuIHBvdXIgcmFwcGVsZXIgY2V0dGUgdm9pZSBmZXJyw6llIHF1aSBwcm92b3F1YWl0IGRlIHNpCmFjcmltb25pZXVzZXMgZGlzY3Vzc2lvbnMgZGFucyBsZXMgcsOpdW5pb25zIHBvbGl0aXF1ZXMgZGUgbCfDqXBvcXVlLgpRdWVscXVlcy11bnMgZGlzYWllbnQgcXVlIGxlIG5vbSBwcm92ZW5haXQgZGUgbGEgbG9uZ3VldXIgZGUgc29uCmNhbm90IGNyZXVzw6kgdG91dCBkJ3VuZSBwacOoY2UgZGFucyB1biB0cm9uYyBkJ2FyYnJlIGdpZ2FudGVzcXVlLgoKU2kgdG91dCBsZSBtb25kZSBhdSB2aWxsYWdlIGNvbm5haXNzYWl0IGxlIF9HcmFuZCBUcm9uY18sIHBlcnNvbm5lCm5lIHBvdXZhaXQgZW4gZGlyZSBhdXRhbnQgZGUgc29uIGhpc3RvaXJlLgoKSWwgw6l0YWl0IGFycml2w6kgw6AgTC4uLi4sIGlsIHkgYXZhaXQgYmllbiBsb25ndGVtcHMtLWxlcyBhbmNpZW5zCmRpc2FpZW50IHF1J2lsIHkgYXZhaXQgYXUgbW9pbnMgdmluZ3QtY2lucSBhbnMtLXNhbnMgdGFtYm91ciBuaQp0cm9tcGV0dGUuIElsIGF2YWl0IGFjaGV0w6kgc3VyIGxlcyBib3JkcyBkdSBTYWludC1MYXVyZW50LCB0b3V0IHByw6hzCmRlIGxhIGdyw6h2ZSBldCDDoCBxdWVscXVlcyBhcnBlbnRzIGRlIGwnw6lnbGlzZSwgdW4gcGV0aXQgY29pbiBkZSB0ZXJyZQpncmFuZCBjb21tZSBsYSBtYWluLCBvw7kgaWwgYXZhaXQgY29uc3RydWl0IHVuZSBtaXPDqXJhYmxlIGNhaHV0ZSBzdXIKbGVzIHJ1aW5lcyBkJ3VuZSBjYWJpbmUgZGUgYmF0ZWF1IHF1J2lsIGF2YWl0IHRyb3V2w6llLCB1biBiZWF1IG1hdGluLArDqWNob3XDqWUgc3VyIHVuZSBiYXR0dXJlIHZvaXNpbmUuCgpJbCBnYWduYWl0IHDDqW5pYmxlbWVudCBzYSB2aWUgw6AgdHJhdmVyc2VyIGxlcyB2b3lhZ2V1cnMgZCd1bmUgcml2ZSDDoApsJ2F1dHJlIGR1IFNhaW50LUxhdXJlbnQgZXQgw6AgZmFpcmUgbGEgcMOqY2hlIGRlcHVpcyBsYSBkw6liw6JjbGUgZGVzCmdsYWNlcyBqdXNxdSdhdXggZGVybmllcnMgam91cnMgZCdhdXRvbW5lLiBJbCDDqXRhaXQgY2VydGFpbiBkZQpwcmVuZHJlIGxhIHByZW1pw6hyZSBhbmd1aWxsZSwgbGUgcHJlbWllciBkb3LDqSwgbGUgcHJlbWllciBhY2hpZ2FuCmV0IGxhIHByZW1pw6hyZSBhbG9zZSBkZSBsYSBzYWlzb24uIElsIGZhaXNhaXQgYXVzc2kgbGEgY2hhc3NlIMOgCmwnb3V0YXJkZSwgYXUgY2FuYXJkLCBhdSBwbHV2aWVyLCDDoCBsJ2Fsb3VldHRlIGV0IMOgIGxhIGLDqWNhc3NlIGF2ZWMKdW4gbG9uZyBmdXNpbCDDoCBwaWVycmUgcXVpIHBhcmFpc3NhaXQgZGF0ZXIgZHUgcsOpZ2ltZSBmcmFuw6dhaXMuCgpPbiBuZSBsZSByZW5jb250cmFpdCBqYW1haXMgc2FucyBxdSdpbCBlw7t0LCBzb2l0IHNvbiBhdmlyb24sIHNvaXQgc29uCmZ1c2lsLCBzb2l0IHNhIGNhbm5lIMOgIHDDqmNoZSBzdXIgbCfDqXBhdWxlIGV0IGlsIGFsbGFpdCB0cmFucXVpbGxlbWVudApzb24gY2hlbWluLCByw6lwb25kYW50IGFtaWNhbGVtZW50IGQndW4gc2lnbmUgZGUgdMOqdGUgYXV4IHNhbHV0YXRpb25zCmFtaWNhbGVzIGRlIGxhIHBsdXBhcnQgZXQgYXV4IHRpbWlkZXMgY291cHMgZGUgY2hhcGVhdXggZGVzIGVuZmFudHMKcXVpIGxlIGNvbnNpZMOpcmFpZW50IGJpZW4gdG91cyBjb21tZSB1biBjcm9xdWVtaXRhaW5lIHF1J2lsIGZhbGxhaXQKY3JhaW5kcmUgZXQgw6l2aXRlci4KClNpIGwnb24gaWdub3JhaXQgc2EgdsOpcml0YWJsZSBoaXN0b2lyZSwgb24gbmUgcydlbiDDqXRhaXQgcGFzIG1vaW5zCmZhaXQgdW4gZGV2b2lyIHJlbGlnaWV1eCBkZSBsdWkgZW4gYnJvZGVyIHVuZSwgcGx1dMO0dCBtYXV2YWlzZSBxdWUKYm9ubmUsIGNhciBsZSBww6hyZSBMb3Vpc29uIGFpbWFpdCBldCBwcmF0aXF1YWl0IHRyb3AgbGEgc29saXR1ZGUKcG91ciDDqnRyZSBkZXZlbnUgcG9wdWxhaXJlIHBhcm1pIGxlcyB2aWxsYWdlb2lzLiBJbCBzZSBjb250ZW50YWl0CmfDqW7DqXJhbGVtZW50IGQnYWxsZXIgb2ZmcmlyIHNhIHDDqmNoZSBvdSBzYSBjaGFzc2Ugw6Agc2VzIGNsaWVudHMKb3JkaW5haXJlczogbGUgY3Vyw6ksIGxlIGRvY3RldXIsIGxlIG5vdGFpcmUgZXQgbGUgbWFyY2hhbmQgZHUKdmlsbGFnZSwgZXQgc2kgbGUgcG9pc3NvbiBvdSBsZSBnaWJpZXIgw6l0YWl0IGV4Y2VwdGlvbm5lbGxlbWVudAphYm9uZGFudCwgaWwgYWxsYWl0IMOpY291bGVyIGxlIHN1cnBsdXMgc3VyIGxlcyBtYXJjaMOpcyBkZSBKb2xpZXR0ZSwKZGUgU29yZWwgZXQgZGUgQmVydGhpZXIuCgpTaSBvbiBzZSBwZXJtZXR0YWl0IHBhcmZvaXMgZGUgZ2xvc2VyIHN1ciBzb24gY29tcHRlLCBvbiBuZSBwb3V2YWl0CmNlcGVuZGFudCBwYXMgbCdhY2N1c2VyIGQnYXVjdW4gbcOpZmFpdCwgY2FyIHNhIHLDqXB1dGF0aW9uIGQnaW50w6lncml0w6kKw6l0YWl0IGNvbm51ZSDDoCBkaXggbGlldWVzIMOgIGxhIHJvbmRlLiBJbCBhdmFpdCBtw6ptZSByaXNxdcOpIHNhIHZpZSDDoApwbHVzaWV1cnMgcmVwcmlzZXMgcG91ciBzYXV2ZXIgZGVzIGltcHJ1ZGVudHMgb3UgZGVzIG1hbGhldXJldXggcXVpCmF2YWllbnQgZmFpbGxpIHDDqXJpciBzdXIgbGVzIGVhdXggZHUgU2FpbnQtTGF1cmVudCBldCBpbCBzJ8OpdGFpdApub3RhbW1lbnQgY29uZHVpdCBhdmVjIGxhIHBsdXMgZ3JhbmRlIGJyYXZvdXJlIHBlbmRhbnQgdW5lIHRlbXDDqnRlCmRlIHNlcm91ZXQgcXVpIGF2YWl0IGpldMOpIHVuIGdyYW5kIG5vbWJyZSBkZSBiYXRlYXV4IMOgIGxhIGPDtHRlLCBlbgp2b2xhbnQgw6AgbGEgcmVzY291c3NlIGRlcyBuYXVmcmFnw6lzIGF2ZWMgc29uIGdyYW5kIGNhbm90LgoKTS4gbGUgY3Vyw6kgYWZmaXJtYWl0IHF1ZSBsZSBww6hyZSBMb3Vpc29uIMOpdGFpdCB1biBicmF2ZSBob21tZSwgcXVpCnMnYWNxdWl0dGFpdCBhdmVjIGxhIHBsdXMgZ3JhbmRlIHBvbmN0dWFsaXTDqSBkZSBzZXMgZGV2b2lycwpyZWxpZ2lldXguIFRvdWpvdXJzIHByw6p0IMOgIHJlbmRyZSB1biBzZXJ2aWNlIHF1J29uIGx1aSBkZW1hbmRhaXQsIGlsCnNlIGZhaXNhaXQgdG91dGVmb2lzIHVuIGRldm9pciBkZSBuZSBqYW1haXMgcmllbiBkZW1hbmRlciBsdWktbcOqbWUgZXQKYyfDqXRhaXQgbMOgIHByb2JhYmxlbWVudCBjZSBxdSdvbiBuZSBsdWkgcGFyZG9ubmFpdCBwYXMuIExlIG1vbmRlIGVzdApzaSBkcsO0bGVtZW50IGV0IHNpIGNhcHJpY2lldXNlbWVudCDDqWdvw69zdGUuCgpDaGFxdWUgc29pciwgw6AgbGEgYnJ1bmFudGUgZGVzIGxvbmdzIGpvdXJzIGQnw6l0w6ksIGxlIHZpZWlsbGFyZCBhbGxhaXQKbW91aWxsZXIgc29uIGNhbm90IMOgIGRldXggb3UgdHJvaXMgZW5jw6JibHVyZXMgZGUgbGEgcml2ZSwgZGFucyB1bgplbmRyb2l0IG/DuSBpbCB0ZW5kYWl0IHNvbiBfdmFydmVhdV8gb3Ugc2VzIGxpZ25lcyBkb3JtYW50ZXMuIEFzc2lzCmF1IG1pbGlldSBkZSBzb24gZW1iYXJjYXRpb24sIGlsIHJlc3RhaXQgbMOgIGRhbnMgbGEgcGx1cyBwYXJmYWl0ZQppbW1vYmlsaXTDqSBqdXNxdSfDoCB1bmUgaGV1cmUgYXZhbmPDqWUgZGUgbGEgbnVpdC4gU2Egc2lsaG91ZXR0ZSBzZQpkw6ljb3VwYWl0IGQnYWJvcmQsIG5ldHRlIGV0IHByw6ljaXNlIHN1ciBsZSBtaXJvaXIgZHUgZmxldXZlIGVuZG9ybWksCm1haXMgcHJlbmFpdCBiaWVudMO0dCBkZXMgbGlnbmVzIGluZMOpY2lzZXMgZCd1biB0YWJsZWF1IGRlIE1pbGxldCwKZGFucyBsJ29ic2N1cml0w6ksIGFsb3JzIHF1ZSBsJ29uIG4nZW50ZW5kYWl0IHBsdXMgcXVlIGxlIG11cm11cmUgZGVzCnBldGl0ZXMgdmFndWVzIHBhcmVzc2V1c2VzIHF1aSB2ZW5haWVudCBjYXJlc3NlciBsZSBzYWJsZSBhcmdlbnTDqSBkZQpsYSBncsOodmUuCgpMYSBmcmF5ZXVyIGludm9sb250YWlyZSBxdSdpbnNwaXJhaXQgbGUgcMOocmUgTG91aXNvbiBuJ2V4aXN0YWl0IHBhcwpzZXVsZW1lbnQgY2hleiBsZXMgZW5mYW50cywgbWFpcyBwbHVzIGQndW5lIGZpbGxldHRlIHN1cGVyc3RpdGlldXNlLAplbiBjYXVzYW50IGF2ZWMgc29uIGFtb3VyZXV4LCBzb3VzIGxlcyBncmFuZHMgcGV1cGxpZXJzIHF1aSBib3JkZW50CmxhIGPDtHRlLCBhdmFpdCBzZXJyw6kgY29udnVsc2l2ZW1lbnQgbGUgYnJhcyBkZSBzb24gY2F2YWxpZXIgZW4gdm95YW50CmF1IGxhcmdlIHMnZXN0b21wZXIgbGUgY2Fub3QgZHUgdmlldXggcMOqY2hldXIgZGFucyBsZXMgZGVybmnDqHJlcwpsdWV1cnMgY3LDqXB1c2N1bGFpcmVzLgoKQnJlZiwgbGUgcGF1dnJlIHZpZXV4IMOpdGFpdCBwbHV0w7R0IGNyYWludCBxdSdhaW3DqSBhdSB2aWxsYWdlLCBldCBsZXMKZ2FtaW5zIHRyb3R0aW5haWVudCBpbnZvbG9udGFpcmVtZW50IGxvcnNxdSdpbHMgYXBlcmNldmFpZW50IGF1IGxvaW4Kc2EgZmlndXJlIHRhY2l0dXJuZS4KCklJCgpJbCB5IGF2YWl0IMOgIEwuLi4gdW4gbWF1dmFpcyBnYXJuZW1lbnQsIGNvbW1lIGlsIHMnZW4gdHJvdXZlCmRhbnMgdG91cyBsZXMgdmlsbGFnZXMgZHUgbW9uZGUsIGV0IGNlIGdhbWluIGTDqXRlc3RhaXQgdG91dApwYXJ0aWN1bGnDqHJlbWVudCBsZSBww6hyZSBMb3Vpc29uIGRvbnQgaWwgYXZhaXQgY2VwZW5kYW50IHVuZSBwZXVyCnRlcnJpYmxlLiBMZSB2aWV1eCBww6pjaGV1ciBhdmFpdCBhdHRyYXDDqSBub3RyZSBwb2xpc3NvbiB1biBqb3VyIHF1ZQpjZWx1aS1jaSDDqXRhaXQgZSB0cmFpbiBkZSBiYXR0cmUgY3J1ZWxsZW1lbnQgdW4gdmlldXggY2hpZW4gYmFyYmV0CnF1J2lsIGF2YWl0IGludXRpbGVtZW50IHRlbnTDqSBkZSBub3llci4gTGUgdmllaWxsYXJkIGF2YWl0IHRvdXQKc2ltcGxlbWVudCB0aXLDqSBsZXMgb3JlaWxsZXMgZHUgZ2FtaW4gZW4gbGUgbWVuYcOnYW50IGQgZmFpcmUKY29ubmHDrnRyZSBzYSBjb25kdWl0ZSDDoCBzZXMgcGFyZW50cy4KCk9yLCBsZSBww6hyZSBkdSBnYW1pbiBlbiBxdWVzdGlvbiDDqXRhaXQgdW4gbWF1dmFpcyBjb3VjaGV1ciBub21tw6kKUml2ZXQsIHF1aSBjaGVyY2hhaXQgcGx1dMO0dCBxdSdpbCBuJ8Opdml0YWl0IHVuZSBxdWVyZWxsZSwgZXQsIHVuCm1hdGluIHF1ZSBsZSBww6hyZSBMb3Vpc29uIHLDqXBhcmFpdCB0cmFucXVpbGxlbWVudCBzZXMgZmlsZXRzIGRldmFudApzYSBjYWJhbmUsIGlsIHMnZW50ZW5kaXQgYXBvc3Ryb3BoZXI6CgotLUVoISBkaXRlcyBkb25jLCB2b3VzIGzDoCwgbGUgX0dyYW5kIFRyb25jXyEgcXVpIGVzdC1jZSBxdWkgdm91cyBhCnBlcm1pcyBkZSBtZXR0cmUgbGEgbWFpbiBzdXIgbW9uIGdhcsOnb24/CgpWb3RyZSBnYXLDp29uIGJhdHRhaXQgY3J1ZWxsZW1lbnQgdW4gY2hpZW4gcXUnaWwgbidhdmFpdCBwdSBub3llciwgZXQKaidhaSBjcnUgdm91cyByZW5kcmUgc2VydmljZSBlbiBsJ2VtcMOqY2hhbnQgZGUgbWFydHlyaXNlciB1biBwYXV2cmUKYW5pbWFsIHF1aSBuZSBzZSBkw6lmZW5kYWl0IG3Dqm1lIHBhcy4KCi0tw4dhIG4nw6l0YWl0IHBhcyBkZSB2b3MgYWZmYWlyZXMsIHLDqXBvbmRpdCBSaXZldCwgZXQgamUgbmUgc2FpcyBwYXMKY2UgcXVpIG1lIHJldGllbnQgZGUgdm91cyBmYWlyZSBwYXllciB0b3V0IGRlIHN1aXRlIGxlcyB0YXBlcyBxdWUKdm91cyBhdmV6IGRvbm7DqWVzIMOgIG1vbiBmaWxzLgoKRXQgbCdob21tZSDDqWxldmFpdCBsYSB2b2l4IGQndW4gdG9uIG1lbmHDp2FudCwgZXQgcXVlbHF1ZXMgY3VyaWV1eApzJ8OpdGFpZW50IGTDqWrDoCByw6l1bmlzIHBvdXIgc2F2b2lyIGNlIGRvbnQgaWwgcydhZ2lzc2FpdC4KCi0tUGFyZG9uLCBtb24gYW1pLCByw6lwb25kaXQgbGUgdmllaWxsYXJkIHRyYW5xdWlsbGVtZW50LiBDZSBxdWUgaidhaQpmYWl0LCBqZSBsJ2FpIGZhaXQgcG91ciBiaWVuIGZhaXJlLCBldCB2b3VzIHNhdmV6IGRlIHBsdXMgcXVlIGplIG4nYWkKZmFpdCBhdWN1biBtYWwgw6Agdm90cmUgZW5mYW50LgoKLS3Dh2EgbmUgZmFpdCByaWVuLiBWb3VzIG4nYXZpZXogcGFzIGxlIGRyb2l0IGRlIGxlIHRvdWNoZXIsIGV0IGlsCnMnYXZhbsOnYSBsYSBtYWluIGhhdXRlIHN1ciBsZSB2aWV1eCBww6pjaGV1ciBxdWkgY29udGludWFpdAp0cmFucXVpbGxlbWVudCDDoCByZWZhaXJlIGxlcyBtYWlsbGVzIGRlIHNvbiBmaWxldC4gTGUgdmllaWxsYXJkIGxldmEKbGVzIHlldXgsIGFsb3JzIHF1J2lsIMOpdGFpdCB0cm9wIHRhcmQgcG91ciBwYXJlciB1biBjb3VwIGRlIHBvaW5nIHF1aQpsJ2F0dGVpZ25pdCBlbiBwbGVpbmUgZmlndXJlLCBzYW5zIGx1aSBmYWlyZSBjZXBlbmRhbnQgZ3JhbmQgbWFsLgoKSWwgZmFsbHV0IHZvaXIgbGEgdHJhbnNmb3JtYXRpb24gcXVpIHMnb3DDqXJhIGRhbnMgdG91dGUgbGEKcGh5c2lvbm9taWUgZHUgcMOocmUgTG91aXNvbiDDoCBjZXQgYWZmcm9udCBicnV0YWwuIElsIHNlIHJlZHJlc3NhIGRlCnRvdXRlIHNhIGhhdXRldXIsIHJlamV0YSB2aW9sZW1tZW50IGxlIGZpbGV0IHF1J2lsIHRlbmFpdCBkZXMgZGV1eAptYWlucywgZXQgYm9uZGl0IGNvbW1lIHVuZSBwYW50aMOocmUgc3VyIGwnYXVkYWNpZXV4IHF1aSB2ZW5haXQgZGUgbGUKZnJhcHBlciBzYW5zIHByb3ZvY2F0aW9uLgoKU2VzIHlldXggbGFuw6dhaWVudCBkZXMgw6ljbGFpcnMgZGUgY29sw6hyZSwgZXQgYXZhbnQgcXUnb24gZcO7dCBwdSBsJ2VuCmVtcMOqY2hlciwgaWwgYXZhaXQgc2Fpc2kgc29uIGFkdmVyc2FpcmUgcGFyIGxlcyBmbGFuY3MgZXQsIGxlCnNvdWxldmFudCBjb21tZSBpbCBhdXJhaXQgZmFpdCBkJ3VuIGVuZmFudCBhdS1kZXNzdXMgZGUgc2EgdMOqdGUsIGV0IMOgCmxhIGxvbmd1ZXVyIGRlIHNlcyBsb25ncyBicmFzLCBpbCBsZSBsYW7Dp2EgYXZlYyB1bmUgdmlvbGVuY2UgaW5vdcOvZQpzdXIgbGUgc2FibGUgZGUgbGEgZ3LDqHZlLCBlbiBwb3Vzc2FudCB1biBtdWdpc3NlbWVudCBkZSBiw6p0ZSBmYXV2ZS4KCkxlIHBhdXZyZSBkaWFibGUsIHF1aSBhdmFpdCBwZW5zw6kgcydhdHRhcXVlciDDoCB1biB2aWVpbGxhcmQgaW1wb3RlbnQsCnZlbmFpdCBkZSByw6l2ZWlsbGVyIGxhIGNvbMOocmUgZXQgbGEgcHVpc3NhbmNlIGQndW4gaGVyY3VsZS4gSWwgdG9tYmEKc2FucyBjb25uYWlzc2FuY2UsIGluY2FwYWJsZSBkZSBzZSByZWxldmVyIG91IGRlIGZhaXJlIGxlIG1vaW5kcmUKbW91dmVtZW50LgoKTGUgcMOocmUgTG91aXNvbiBsZSBjb25zaWTDqXJhIHBlbmRhbnQgdW4gaW5zdGFudCwgdW4gc2V1bCwgZXQsIHNlCnByw6ljaXBpdGFudCBzdXIgbHVpLCBsZSByYW1hc3NhIGRlIG5vdXZlYXUsIGVuIHMnYXZhbsOnYW50IHZlcnMgbGVzCmVhdXggZHUgZmxldXZlLCBsZSB0aW50IHVuIGluc3RhbnQgc3VzcGVuZHUgZW4gbCdhaXIgZXQgbGUgcmVqZXRhCmF2ZWMgZm9yY2Ugc3VyIGxlIHNhYmxlIG1vdWlsbMOpIGV0IGR1cmNpIHBhciBsZXMgdmFndWVzLiBMYSB2aWN0aW1lCsOpdGFpdCBkw6lqw6Agw6AgZGVtaSBtb3J0ZSBldCBzJ8OpY3Jhc2EgYXZlYyB1biBicnVpdCBtYXQsIGNvbW1lIGNlbHVpCmQndW4gc2FjIGRlIGdyYWluIHF1J29uIGxhaXNzZSB0b21iZXIgcGFyIHRlcnJlLgoKTGVzIHNwZWN0YXRldXJzLCBxdWkgZGV2ZW5haWVudCBub21icmV1eCwgbidvc2FpZW50IHBhcyBpbnRlcnZlbmlyIGV0CnJlZ2FyZGFpZW50IHRpbWlkZW1lbnQgY2V0dGUgc2PDqG5lIHRyYWdpcXVlLgoKQXZhbnQgbcOqbWUgcXUnb24gZcO7dCBwdSBmYWlyZSB1biBwYXMgcG91ciBsJ2FycsOqdGVyLCBsZSB2aWV1eCBww6pjaGV1cgpzJ8OpdGFpdCBlbmNvcmUgcHLDqWNpcGl0w6kgc3VyIFJpdmV0IGV0LCBjZXR0ZSBmb2lzLCBsZSB0ZW5hbnQgYXUgYm91dApkZSBzZXMgYnJhcywgaWwgw6l0YWl0IGVudHLDqSBkYW5zIGwnZWF1LCBlbiBjb3VyYW50LCBkYW5zIGwnaW50ZW50aW9uCsOpdmlkZW50ZSBkZSBsZSBub3llci4KClVuZSBjbGFtZXVyIHMnw6lsZXZhIHBhcm1pIGxhIGZvdWxlOgoKLS1JbCB2YSBsZSBub3llciEgaWwgdmEgbGUgbm95ZXIhCgpFdCwgZW4gZWZmZXQsIGxlIHDDqHJlIExvdWlzb24gYXZhbsOnYWl0IHRvdWpvdXJzIGRhbnMgbGVzIGVhdXggcXVpIGx1aQptb250YWllbnQgZMOpasOgIGp1c3F1J8OgIGxhIHRhaWxsZS4gSWwgbidhbGxhaXQgcGx1cyBzaSB2aXRlLCBtYWlzIGlsCmNvbnRpbnVhIHRvdWpvdXJzIGp1c3F1J8OgIGNlIHF1J2lsIGVuIGXDu3QganVzcXUnYXV4IGFpc3NlbGxlczsKYWxvcnMsIGJhbGFuw6dhbnQgbGUgcGF1dnJlIFJpdmV0IGRldXggb3UgdHJvaXMgZm9pcyBhdS1kZXNzdXMgZGUgc2EKdMOqdGUsIGlsIGxlIHBsb25nZWEgZGFucyBsZSBmbGV1dmUsIMOgIHVuZSBwcm9mb25kZXVyIG/DuSBpbCBhdXJhaXQKZmFsbHUgw6p0cmUgYm9uIG5hZ2V1ciBwb3VyIHBvdXZvaXIgcmVnYWduZXIgbGEgcml2ZS4KCkxlIHZpZWlsbGFyZCBwYXJ1dCBlbnN1aXRlIGjDqXNpdGVyIHVuIGluc3RhbnQsIGNvbW1lIHBvdXIgYmllbgpzJ2Fzc3VyZXIgcXVlIHNhIHZpY3RpbWUgw6l0YWl0IGRpc3BhcnVlIHNvdXMgbGVzIGVhdXgsIHB1aXMgaWwKcmVnYWduYSBsZSByaXZhZ2Ugw6AgcGFzIG1lc3Vyw6lzIGV0IGFsbGEgcydlbmZlcm1lciBkYW5zIHNhIG1pc8OpcmFibGUKY2FiYW5lLCBzYW5zIHF1J2F1Y3VuIGRlcyBjdXJpZXV4IHF1aSBzZSB0cm91dmFpZW50IHN1ciBzb24gcGFzc2FnZQplw7t0IG9zw6kgbGV2ZXIgbGEgbWFpbiBvdSBtw6ptZSBvdXZyaXIgbGEgYm91Y2hlIHBvdXIgZGVtYW5kZXIgZ3LDomNlCnBvdXIgbGEgdmllIGR1IG1hbGhldXJldXggUml2ZXQuCgpEw6hzIHF1ZSBsZSBww6hyZSBMb3Vpc29uIGV1dCBkaXNwYXJ1LCB0b3VzIHNlIHByw6ljaXBpdMOocmVudCBjZXBlbmRhbnQKdmVycyBsZXMgY2Fub3RzIHF1aSBzZSB0cm91dmFpZW50IGzDoCwgcG91ciB2b2xlciBhdSBzZWNvdXJzIGR1IG5vecOpCnF1aSBuJ2F2YWl0IHBhcyBlbmNvcmUgcmVwYXJ1IMOgIGxhIHN1cmZhY2UuIE1haXMgbCfDqW1vdGlvbiBkdSBtb21lbnQKZW1ww6pjaGFpdCBwbHV0w7R0IHF1J2VsbGUgbidhY2PDqWzDqXJhaXQgbGVzIG1vdXZlbWVudHMgZGUgY2VzIGhvbW1lcyBkZQpib25uZSB2b2xvbnTDqSwgZXQgbGUgcGF1dnJlIFJpdmV0IGF1cmFpdCBjZXJ0YWluZW1lbnQgcGVyZHUgbGEgdmllIHNpCmRlcyBzYXV2ZXRldXJzIGluYXR0ZW5kdXMgbifDqXRhaWVudCB2ZW51cyDDoCBsYSByZXNjb3Vzc2UuCgpVbmUgX2NhZ2VfIGRlc2NlbmRhaXQgYXUgbGFyZ2UgYXZlYyBsZSBjb3VyYW50IGV0IHVuIGNhbm90IGQnw6ljb3JjZQpjb250ZW5hbnQgZGV1eCBob21tZXMgcydlbiDDqXRhaXQgZMOpdGFjaMOpLiBJbCBuJ8OpdGFpdCBwbHVzIHF1J8OgIGRldXgKb3UgdHJvaXMgYXJwZW50cyBkdSByaXZhZ2UgbG9yc3F1ZSBsZSBww6hyZSBMb3Vpc29uIHMnw6l0YWl0IGF2YW5jw6kKZGFucyBsZSBmbGV1dmUgcG91ciB5IHByw6ljaXBpdGVyIHNvbiBhZ3Jlc3NldXIuIExlcyBkZXV4IGhvbW1lcyBkdQpjYW5vdCBhdmFpZW50IHN1aXZpIHRvdXRlcyBsZXMgcMOpcmlww6l0aWVzIGR1IGRyYW1lLCBldCwgYXUgbW9tZW50IG/DuQpsZSBjb3JwcyBkdSBwYXV2cmUgUml2ZXQgcmVwYXJhaXNzYWl0IHN1ciBsJ2VhdSBhcHLDqHMgcXVlbHF1ZXMKbWludXRlcyBkJ2ltbWVyc2lvbiwgaWxzIHB1cmVudCBsZSBzYWlzaXIgcGFyIHNlcyBoYWJpdHMgZXQgbGUKZMOpcG9zZXIgZGFucyBsZXVyIGVtYmFyY2F0aW9uLCBhdXggYXBwbGF1ZGlzc2VtZW50cyBkZSBsYSBmb3VsZSBxdWkKZ3Jvc3Npc3NhaXQgdG91am91cnMgc3VyIGxhIHJpdmUuCgpEZXV4IGNvdXBzIGQnYXZpcm9uIHZpZ291cmV1c2VtZW50IGRvbm7DqXMgcGFyIGxlcyBkZXV4IHZveWFnZXVycwpmaXJlbnQgYXR0ZXJyaXIgbGUgY2Fub3QgZXQgbCdvbiBkw6liYXJxdWEgbGUgY29ycHMgaW5hbmltw6kgZHUgcGF1dnJlClJpdmV0IHBvdXIgbGUgZMOpcG9zZXIgc3VyIGxhIGdyw6h2ZSBlbiBhdHRlbmRhbnQgbCdhcnJpdsOpZSBkdSBjdXLDqSBldApkdSBtw6lkZWNpbiBxdSdvbiBhdmFpdCBlbnZvecOpIGNoZXJjaGVyLgoKQ2UgbifDqXRhaXQgcGFzIHRyb3AgdMO0dCwgY2FyIGwnYXNwaHl4aWUgw6l0YWl0IHByZXNxdWUgY29tcGzDqHRlLCBldCBpbApmYWxsdXQgcmVjb3VyaXIgw6AgdG91cyBsZXMgbW95ZW5zIHF1ZSBwcmVzY3JpdCBsYSBzY2llbmNlIHBvdXIgbGVzCnNlY291cnMgYXV4IG5vecOpcyBhZmluIGRlIHJhbWVuZXIgdW4gc2lnbmUgZGUgdmllIGNoZXogbGUgbWFsaGV1cmV1eApSaXZldCBkb250IGxhIGZlbW1lIGV0IGxlcyBlbmZhbnRzIMOpdGFpZW50IGFjY291cnVzIHN1ciBsZXMgbGlldXggZXQKcmVtcGxpc3NhaWVudCBsJ2FpciBkZSBsZXVycyBsYW1lbnRhdGlvbnMgZXQgZGUgbGV1cnMgY3JpcyBkZQpkw6lzZXNwb2lyLgoKTGUgY3Vyw6kgYXZhaXQgcHJpcyBsYSBwcsOpY2F1dGlvbiBkZSBkb25uZXIgbCdhYnNvbHV0aW9uIF9pbgphcnRpY3VsbyBtb3J0aXNfLCBtYWlzIGwnaG9tbWUgZGUgc2NpZW5jZSBkw6ljbGFyYSBhdmFudCBsb25ndGVtcHMKcXUnaWwgeSBhdmFpdCBsaWV1IGQnZXNww6lyZXIgZXQgbCdvbiB0cmFuc3BvcnRhIGxlIG1vcmlib25kIGNoZXogbHVpLApvw7kgaWwgcmXDp3V0IGxhIHZpc2l0ZSBldCBsZXMgc29pbnMgZW1wcmVzc8OpcyBkZSB0b3V0ZXMgbGVzIGNvbW3DqHJlcwpkdSB2aWxsYWdlLgoKSUlJCgpTJ2lsIMOpdGFpdCB2cmFpIHF1ZSBsZSBww6hyZSBMb3Vpc29uIGpvdWlzc2FpdCBkZSBsYSByw6lwdXRhdGlvbiBkJ3VuCmhvbW1lIHBhaXNpYmxlIGV0IGlub2ZmZW5zaWYgZXQgcXVlIFJpdmV0LCBhdSBjb250cmFpcmUsIHBhc3NhaXQgcG91cgp1biBob21tZSBncmluY2hldXggZXQgcXVlcmVsbGV1ciwgdW5lIHZlbmdlYW5jZSBhdXNzaSB0ZXJyaWJsZSBwb3VyCnVuIHNpbXBsZSBjb3VwIGRlIHBvaW5nIG5lIHBvdXZhaXQgbWFucXVlciwgbsOpYW5tb2lucywgZGUgcHJvZHVpcmUKdW5lIMOpbW90aW9uIGfDqW7DqXJhbGUgY2hleiB0b3VzIGxlcyBoYWJpdGFudHMgZGUgTC4uLgoKTGUgY3Vyw6ksIGxlIG5vdGFpcmUsIGxlIG3DqWRlY2luIGV0IGxlcyBhdXRyZXMgbm90YWJsZXMgZGUgbCdlbmRyb2l0CnNlIHLDqXVuaXJlbnQgbGUgbcOqbWUgc29pciBjaGV6IGxlIGNhcGl0YWluZSBkZSBtaWxpY2UsIHF1aSDDqXRhaXQgZW4KbcOqbWUgdGVtcHMgbGUgbWFnaXN0cmF0IGRlIGxhIHBhcm9pc3NlLCBwb3VyIGTDqWxpYsOpcmVyIHN1ciBjZSBxdSdpbApjb252ZW5haXQgZGUgZmFpcmUgZGFucyBkZXMgY2lyY29uc3RhbmNlcyBhdXNzaSBncmF2ZXMuCgpJbCBmdXQgZMOpY2lkw6kgZGUgdGVuaXIgdW5lIGVucXXDqnRlIGTDqHMgbGUgbGVuZGVtYWluIG1hdGluIGV0CmQnYXBwZWxlciBsZSBww6hyZSBMb3Vpc29uIMOgIGNvbXBhcmHDrnRyZSBkZXZhbnQgbGUgbWFnaXN0cmF0LCBlbgphdHRlbmRhbnQgcXVlIGxlIG3DqWRlY2luIHDDu3Qgc2UgcHJvbm9uY2VyIGQndW5lIG1hbmnDqHJlIGTDqWZpbml0aXZlCnN1ciBsJ8OpdGF0IGR1IG1hbGFkZSBxdWkgcGFyYWlzc2FpdCBzJ2Ftw6lsaW9yZXIgYXNzZXogc2Vuc2libGVtZW50LApjZXBlbmRhbnQsIHBvdXIgw6ljYXJ0ZXIgdG91dGUgaWTDqWUgZGUgbW9ydCBwcm9jaGFpbmUgb3UgbcOqbWUKcHJvYmFibGUuCgpMZSBiYWlsbGkgZHUgdmlsbGFnZSBmdXQgY2hhcmfDqSBkJ2FsbGVyIHByw6l2ZW5pciBsZSB2aWV1eCBww6pjaGV1cgpkJ2F2b2lyIMOgIHNlIHByw6lzZW50ZXIgbGUgbGVuZGVtYWluIG1hdGluIMOgIG5ldWYgaGV1cmVzLCDDoCBsYSBzYWxsZQpwdWJsaXF1ZSBkdSB2aWxsYWdlLCBvw7kgc2UgdGllbmRyYWl0IGwnZW5xdcOqdGUgcHLDqWxpbWluYWlyZSBldCBjZXR0ZQpub3V2ZWxsZSwgamV0w6llIGVuIHDDonR1cmUgYXV4IGJvbm5lcyBmZW1tZXMsIGV1dCBiaWVudMO0dCBmYWl0IGxlIHRvdXIKZHUgZm9ydCwgY29tbWUgb24gZGl0IGVuY29yZSBkYW5zIG5vcyBjYW1wYWduZXMuCgpMZSBww6hyZSBMb3Vpc29uIG4nYXZhaXQgcGFzIHJlcGFydSBkZXB1aXMgcXUnaWwgcyfDqXRhaXQgcmVuZmVybcOpIGRhbnMKc2EgY2FiYW5lLiBBdXNzaSBuJ8OpdGFpdC1jZSBwYXMgc2FucyB1biBzZW50aW1lbnQgZGUgdGVycmV1ciBxdWUgbGUKYmFpbGxpIHMnw6l0YWl0IGFwcHJvY2jDqSBwb3VyIGZyYXBwZXIgw6Agc2EgcG9ydGUsIGFmaW4gZGUgbHVpCmNvbW11bmlxdWVyIGxlcyBvcmRyZXMgZHUgbWFnaXN0cmF0LgoKLS1Nb25zaWV1ciBMb3Vpc29uISBtb25zaWV1ciBMb3Vpc29uISBmaXQtaWwsIGQndW5lIHZvaXggYmFzc2UgZXQKdHJlbWJsYW50ZS4KCk1haXMgw6Agc2EgZ3JhbmRlIHN1cnByaXNlIGxhIHBvcnRlIHMnb3V2cml0IGltbcOpZGlhdGVtZW50IGV0IGxlCnZpZWlsbGFyZCBzJ2F2YW7Dp2EgdHJhbnF1aWxsZW1lbnQ6CgotLVF1J3kgYS10LWlsIMOgIHZvdHJlIHNlcnZpY2UsIEplYW4tVGhvbWFzPwoKLS1Nb25zaWV1ciBsZSBtYWdpc3RyYXQgbSdhIGRpdCBkZSB2b3VzIGluZm9ybWVyIHF1J2lsIGTDqXNpcmFpdCB2b3VzCnZvaXIsIGRlbWFpbiBtYXRpbiwgw6AgbGEgc2FsbGUgcHVibGlxdWUgcG91ci4uLiBwb3VyLi4uCgotLVRyw6hzIGJpZW4sIEplYW4tVGhvbWFzLCBkaXRlcyDDoCBNLiBsZSBtYWdpc3RyYXQgcXVlIGplIHNlcmFpIGzDoCDDoApsJ2hldXJlIHZvdWx1ZS4KCkV0IGlsIHJlZmVybWEgdHJhbnF1aWxsZW1lbnQgbGEgcG9ydGUsIGNvbW1lIHNpIHJpZW4gZCdleHRyYW9yZGluYWlyZQpuJ8OpdGFpdCBhcnJpdsOpIGV0IGNvbW1lIHMnaWwgYXZhaXQgcsOpcG9uZHUgw6AgdW4gY2xpZW50IHF1aSBsdWkgYXVyYWl0CmRlbWFuZMOpIHVuZSBicm9jaMOpZSBkJ2FuZ3VpbGxlcyBvdSBkZSBfY3JhcGV0c18uCgpJVgoKTGUgbGVuZGVtYWluLCDDoCBsJ2hldXJlIGRpdGUsIGxhIHNhbGxlIHB1YmxpcXVlIMOpdGFpdCBjb21ibGUgZXQgbGUKbcOpZGVjaW4gYW5ub27Dp2EgdG91dCBkJ2Fib3JkIHF1ZSBSaXZldCBjb250aW51YWl0IMOgIHByZW5kcmUgZHUgbWlldXguClVuIHNvdXBpciBkZSBzb3VsYWdlbWVudCBzJ8OpY2hhcHBhIGRlIHRvdXRlcyBsZXMgcG9pdHJpbmVzIGV0CmwnZW5xdcOqdGUgY29tbWVuw6dhLgoKTGUgcMOocmUgTG91aXNvbiBhdmFpdCDDqXTDqSBwb25jdHVlbCDDoCBsJ29yZHJlIGR1IG1hZ2lzdHJhdCwgbWFpcyBpbCBzZQp0ZW5haXQgYXNzaXMsIHNldWwsIGRhbnMgdW4gY29pbiwgcGxpw6kgZW4gZGV1eCwgbGVzIGNvdWRlcyBzdXIgbGVzCmdlbm91eCwgZXQgbGEgdMOqdGUgZGFucyBsZXMgZGV1eCBtYWlucy4KCsOAIGwnYXBwZWwgZHUgbWFnaXN0cmF0IHF1aSBsdWkgZGVtYW5kYSBkZSByYWNvbnRlciBsZXMgw6l2w6luZW1lbnRzIGRlCmxhIHZlaWxsZSwgdG91dCBlbiBsdWkgZGlzYW50IHF1J2lsIG4nw6l0YWl0IHBhcyBmb3Jjw6kgZGUKcydpbmNyaW1pbmVyLCBpbCBzZSBsZXZhIHRyYW5xdWlsbGVtZW50IGV0IHLDqWNpdGEsIGxlcyB5ZXV4IGJhaXNzw6lzLApldCBkJ3VuZSB2b2l4IG5hdnJhbnRlIGRlIHJlZ3JldCBldCBkZSBob250ZSwgdG91dCBjZSBxdWkgcyfDqXRhaXQKcGFzc8OpLCBzYW5zIGVuIG91YmxpZXIgbGUgbW9pbmRyZSBpbmNpZGVudC4gSWwgdGVybWluYSBwYXIgY2VzIG1vdHM6CgotLUplIG1lIHN1aXMgbGFpc3PDqSBlbXBvcnRlciBwYXIgdW4gYWNjw6hzIGRlIGNvbMOocmUgaW5zdXJtb250YWJsZSBldApqZSBtZSBzdWlzIGNvbXBvcnTDqSBjb21tZSB1bmUgYnJ1dGUgZXQgbm9uIGNvbW1lIHVuIGNocsOpdGllbi4gSmUgdm91cwplbiBkZW1hbmRlIHBhcmRvbiwgTS4gbGUgbWFnaXN0cmF0LCBqJ2VuIGRlbWFuZGUgcGFyZG9uIMOgIFJpdmV0IGV0IMOgCnNhIGZhbWlsbGUgZXQgaidlbiBkZW1hbmRlIHBhcmRvbiDDoCBNTS4gbGVzIGhhYml0YW50cyBkdSB2aWxsYWdlIHF1aQpvbnQgw6l0w6kgdMOpbW9pbnMgZHUgZ3JhbmQgc2NhbmRhbGUgcXVlIGonYWkgY2F1c8OpIHBhciBtYSBjb2zDqHJlIGV0IHBhcgptYSBicnV0YWxpdMOpLiBKZSByZW1lcmNpZSBEaWV1IGQnYXZvaXIgw6lwYXJnbsOpIGxhIHZpZSBkZSBSaXZldCwgZXQgamUKc3VpcyBwcsOqdCDDoCBzdWJpciBsZSBjaMOidGltZW50IHF1ZSBqJ2FpIG3DqXJpdMOpLAoKLS1IZXVyZXVzZW1lbnQgcG91ciB2b3VzLCBww6hyZSBMb3Vpc29uLCByw6lwb25kaXQgbGUgbWFnaXN0cmF0LCBxdWUgbGEKdmllIGRlIFJpdmV0IG4nZXN0IHBhcyBlbiBkYW5nZXIsIGNhciBpbCBtJ2F1cmFpdCBmYWxsdSB2b3VzIGVudm95ZXIKZW4gcHJpc29uLiBJbCBmYXV0IGNlcGVuZGFudCBxdWUgdm90cmUgZMOpcG9zaXRpb24gc29pdCBjb3Jyb2JvcsOpZSBldApqZSBkZW1hbmRlIGF1eCB2b3lhZ2V1cnMgcXVpIG9udCBzYXV2w6kgUml2ZXQgZGUgcmFjb250ZXIgY2UgcXUnaWxzCm9udCB2dSwgY2UgcXUnaWxzIG9udCBmYWl0IGV0IGNlIHF1aSBzJ2VzdCBwYXNzw6kgw6AgbGV1ciBjb25uYWlzc2FuY2UsCnBlbmRhbnQgbCdhZmZhaXJlIGQnaGllci4KCkxlIHBsdXMgw6Jnw6kgZGVzIHZveWFnZXVycywgcXVpIMOpdGFpdCB1biBlbmZhbnQgZGUgbGEgcGFyb2lzc2UKcmV2ZW5hbnQgZGUgcGFzc2VyIGwnaGl2ZXIgZGFucyBsZXMgY2hhbnRpZXJzIGRlIGxhIEdhdGluZWF1LCByYWNvbnRhCnNpbXBsZW1lbnQgbGVzIGZhaXRzIGR1IHNhdXZldGFnZSBldCBjb3Jyb2JvcmEgbGEgZMOpcG9zaXRpb24gZHUgcMOocmUKTG91aXNvbi4gU29uIGNvbXBhZ25vbiwgcXVpIMOpdGFpdCBhdXNzaSB1biBob21tZSBkZSBsYSBzb2l4YW50YWluZSwKcydhdmFuw6dhaXQgcG91ciByYWNvbnRlciBzb24gaGlzdG9pcmUsIGxvcnNxdSdpbCBzZSB0cm91dmEgZmFjZSDDoApmYWNlIGF2ZWMgbCdhY2N1c8OpIHF1J2lsIG4nYXZhaXQgcGFzIGVuY29yZSB2dS4gSWwgbGUgcmVnYXJkYSBiaWVuIGVuCmZhY2UsIGjDqXNpdGEgdW4gaW5zdGFudCwgcHVpcyBkJ3VuZSB2b2l4IG/DuSBzZSBtw6psYWllbnQgbGEgY3JhaW50ZSBldApsJ8OpdG9ubmVtZW50OgoKLS1Mb3VpcyBWYW5lbGV0IQoKTGUgcMOocmUgTG91aXNvbiBsZXZhIGxhIHTDqnRlIGRhbnMgdW4gbW91dmVtZW50IGludm9sb250YWlyZSBkZQp0ZXJyZXVyIGV0IHJlZ2FyZGEgbCdob21tZSBxdWkgdmVuYWl0IGRlIHByb25vbmNlciBjZSBub20sIGluY29ubnUKZGFucyBsYSBwYXJvaXNzZSBkZSBMLi4uCgpMZXMgcmVnYXJkcyBkZXMgZGV1eCBob21tZXMgcydlbnRyZWNyb2lzw6hyZW50IGNvbW1lIGRldXggbGFtZXMKZCdhY2llciBxdWkgc2UgY2hvcXVlbnQgZGFucyB1biBiYXR0ZW1lbnQgZCfDqXDDqWUgcHLDqWxpbWluYWlyZSwgcHVpcwpzJ2FiYWlzc8OocmVudCBhdXNzaXTDtHQ7IGV0IGxlIHZpZWlsIF9ob21tZSBkZSBjYWdlc18gcmFjb250YSBsZQpzYXV2ZXRhZ2UgYXVxdWVsIGlsIGF2YWl0IHByaXMgcGFydCBldCBsZSBkcmFtZSBkb250IGlsIGF2YWl0IMOpdMOpCnTDqW1vaW4sIHNhbnMgZmFpcmUgYXVjdW5lIGFsbHVzaW9uIMOgIGNlIG5vbSBxdSdpbCB2ZW5haXQgZGUgamV0ZXIgZW4KcMOidHVyZSDDoCBsYSBjdXJpb3NpdMOpIHB1YmxpcXVlLgoKSWwgw6l0YWl0IMOpdmlkZW50IHF1J2VuIGTDqXBpdCBkZXMgcMOpbmlibGVzIMOpdsOpbmVtZW50cyBkZSBsYSB2ZWlsbGUsCmxlcyBzeW1wYXRoaWVzIGRlIGwnYXVkaXRvaXJlIHNlIHBvcnRhaWVudCB2ZXJzIGxlIHDDqHJlIExvdWlzb24sIGV0CnBlcnNvbm5lIG5lIGZpdCB0cm9wIGF0dGVudGlvbiwgc2kgY2Ugbidlc3QgbGUgbWFnaXN0cmF0LCDDoCBsJ19hCnBhcnRlXyBxdWkgdmVuYWl0IGRlIHNlIHByb2R1aXJlIGVudHJlIGxlIHTDqW1vaW4gZXQgbCdhY2N1c8OpLgpEJ2FpbGxldXJzLCBvbiBlc3QgbmF0dXJlbGxlbWVudCBwb3J0w6kgw6AgbCdpbmR1bGdlbmNlIGNoZXogbm9zCmhhYml0YW50cyBkZSBsYSBjYW1wYWduZSwgZXQgbCdlbnF1w6p0ZSBmdXQgcHJvbXB0ZW1lbnQgdGVybWluw6llIHBhcgpsZSBtYWdpc3RyYXQsIHF1aSBlbmpvaWduaXQgc2ltcGxlbWVudCBhdSB2aWV1eCBww6pjaGV1ciBkZSByZXRvdXJuZXIKY2hleiBsdWksIGRlIHZhcXVlciDDoCBzZXMgb2NjdXBhdGlvbnMgZXQgZGUgc2UgdGVuaXIgw6AgbGEgZGlzcG9zaXRpb24KZGUgbGEganVzdGljZS4KCkxhIGZvdWxlIHNlIGRpc3BlcnNhIGxlbnRlbWVudCBldCBsZSBww6hyZSBMb3Vpc29uIHJldG91cm5hIHMnZW5mZXJtZXIKZGFucyBzYSBjYWh1dGUgcG91ciDDqWNoYXBwZXIgYXV4IHJldGFyZHMgY3VyaWV1eCBxdWkgbCdvYnPDqWRhaWVudC4KCkxlIG1hZ2lzdHJhdCwgYXZhbnQgZGUgcyfDqWxvaWduZXIsIHMnYXBwcm9jaGEgZHUgZGVybmllciB0w6ltb2luIGV0Cmx1aSBpbnRpbWEgbCdvcmRyZSBkZSB2ZW5pciBsZSB2b2lyIGNoZXogbHVpLCBsZSBzb2lyIG3Dqm1lLCDDoCBodWl0CmhldXJlcy4gSWwgdm91bGFpdCBsdWkgY2F1c2VyLgoKVgoKRmlkw6hsZSBhdSByZW5kZXotdm91cyBxdWkgbHVpIGF2YWl0IMOpdMOpIGltcG9zw6ksIGxlIHZpZXV4IHZveWFnZXVyIHNlCnRyb3V2YSwgw6AgbCdoZXVyZSBkaXRlLCBlbiBwcsOpc2VuY2UgZHUganVnZSwgZHUgY3Vyw6kgZXQgZHUgbm90YWlyZQpxdWkgcyfDqXRhaWVudCByw6l1bmlzIHBvdXIgbGEgY2lyY29uc3RhbmNlLgoKSWwgc2UgZG91dGFpdCBiaWVuIHVuIHBldSBkZSBsYSByYWlzb24gcXVpIGF2YWl0IHByb3ZvcXXDqSBzYQpjb252b2NhdGlvbiBkZXZhbnQgY2UgdHJpYnVuYWwgZCd1biBub3V2ZWF1IGdlbnJlLiBBdXNzaSBuZSBmdXQtaWwKcGFzIHByaXMgcGFyIHN1cnByaXNlIGxvcnNxdSdvbiBsdWkgZGVtYW5kYSDDoCBicsO7bGUtcG91cnBvaW50OgoKLS1Wb3VzIGNvbm5haXNzZXogbGUgcMOocmUgTG91aXNvbiBkZXB1aXMgbG9uZ3RlbXBzIGV0IHZvdXMgbHVpIGF2ZXoKZG9ubsOpIGxlIG5vbSBkZSBMb3VpcyBWYW5lbGV0LCBjZSBtYXRpbiwgw6AgbCdhdWRpZW5jZS4KCi0tQydlc3QgdnJhaSwgbW9uc2lldXIgbGUganVnZSwgcsOpcG9uZGl0IGxlIHZveWFnZXVyIHNhbnMgaMOpc2l0ZXIuCgpEaXRlcy1ub3VzIGFsb3JzLCBvw7ksIHF1YW5kIGV0IGNvbW1lbnQgdm91cyBhdmV6IGZhaXQgc2EKY29ubmFpc3NhbmNlPwoKLS1PaCEgaWwgeSBhIGxvbmd0ZW1wcywgYmllbiBsb25ndGVtcHMuIEMnw6l0YWl0IGF1IHRlbXBzIGRlIG1vbgpwcmVtaWVyIHZveWFnZSDDoCBsYSBHYXRpbmVhdS4gTm91cyBmYWlzaW9ucyBjaGFudGllciBwb3VyIGxlcyBHaWxtb3VyCmV0IExvdWlzIFZhbmVsZXQgZXQgbW9pIG5vdXMgYsO7Y2hpb25zIGRhbnMgbGUgbcOqbWUgY2FtcC4gQyfDqXRhaXQgdW4KYm9uIHRyYXZhaWxsYW50LCB1biBib24gw6lxdWFyaXNzZXVyIGV0IHVuIGJvbiBnYXLDp29uLiBUb3V0IGxlIG1vbmRlCmFpbWFpdCBzdXJ0b3V0IMOgIGx1aSBlbnRlbmRyZSByYWNvbnRlciBkZXMgaGlzdG9pcmVzLCBsZSBzb2lyLCBhdXRvdXIKZGUgbGEgY2FtYnVzZS4gVW4gam91ciwgdW5lIGVzY291YWRlIGRlIHRyYXZhaWxsZXVycyBub3VzIGFycml2YQpwb3VyIHBhcnRhZ2VyIG5vdHJlIGNoYW50aWVyIGV0IGlsIHkgZW4gYXZhaXQgdW4gcGFybWkgbGVzIG5vdXZlYXV4CmFycml2YW50cyBxdWkgY29ubmFpc3NhaXQgVmFuZWxldCBldCBxdWkgdmVuYWl0IGRlIGxhIG3Dqm1lIHBhcm9pc3NlCnF1ZSBsdWksIGF1eCBlbnZpcm9ucyBkZSBNb250csOpYWwuIElscyBzZSBzYWx1w6hyZW50IMOgIHBlaW5lIGV0CmlsIMOpdGFpdCDDqXZpZGVudCBxdSdpbCB5IGF2YWl0IGV1IGdyaWJvdWlsbGUgZW50cmUgZXV4LiBSaWVuCmQnZXh0cmFvcmRpbmFpcmUgbmUgdmludCBkJ2Fib3JkIHRyb3VibGVyIGxhIGJvbm5lIGVudGVudGUsIGp1c3F1J8OgCmNlIHF1J3VuIGpvdXIsIFZhbmVsZXQgdsOubnQgbWUgdHJvdXZlciBldCBtZSBkZW1hbmTDonQgZGUgbHVpIHNlcnZpcgpkZSB0w6ltb2luIGRhbnMgdW5lIGx1dHRlIMOgIGNvdXBzIGRlIHBvaW5ncyBxdSdpbCBkZXZhaXQgYXZvaXIgbGUKbGVuZGVtYWluIGF2ZWMgc29uIGNvcGFyb2lzc2llbi4gIk5vdXMgYWltb25zLCBtZSBkaXQtaWwsIGxhIG3Dqm1lCmZpbGxlLCBhdSBwYXlzLCBldCBjb21tZSBub3VzIG5lIHBvdXZvbnMgbCfDqXBvdXNlciB0b3VzIGxlcyBkZXV4LApub3VzIHZvdWxvbnMgcsOpZ2xlciBsJ2FmZmFpcmUgcGFyIHVuZSBwYXJ0aWUgZGUgYm94ZS4iIExhIHByb3Bvc2l0aW9uCm1lIHBhcnV0IGFzc2V6IHJhaXNvbm5hYmxlLCBjYXIgb24gc2UgYmF0IHZvbG9udGllcnMgZXQgcG91ciBkZSBiaWVuCnBldGl0ZXMgcmFpc29ucyBkYW5zIGxlcyBjaGFudGllcnMuIEonYWNjZXB0YWkgZG9uYyBldCBsZSBsZW5kZW1haW4KbWF0aW4sIGRlIGJvbm5lIGhldXJlLCBhdmFudCBsJ2hldXJlIGRlcyB0cmF2YXV4LCBsZXMgYWR2ZXJzYWlyZXMKw6l0YWllbnQgZmFjZSDDoCBmYWNlIGRhbnMgdW5lIGNsYWlyacOocmUgdm9pc2luZS4gTGEgYmF0YWlsbGUgY29tbWVuw6dhCmFzc2V6IHJvbmRlbWVudCwgbWFpcyDDoCBwZWluZSBsZXMgcHJlbWllcnMgY291cHMgYXZhaWVudC1pbHMgw6l0w6kKcG9ydMOpcyBxdWUgVmFuZWxldCDDqXRhaXQgYWJzb2x1bWVudCBob3JzIGRlIGx1aS1tw6ptZSwgZGFucyB1biBhY2PDqHMKZGUgZnVyZXVyIG5vaXJlLiBQbHVzIGZvcnQgZXQgcGx1cyBhZHJvaXQgcXVlIHNvbiBhZHZlcnNhaXJlLCBpbCBsdWkKcG9ydGFpdCBkZXMgY291cHMgdGVycmlibGVzIHNvdXMgbGVzcXVlbHMgbCdhdXRyZSBzJ8OpY3Jhc2FpdCBjb21tZQpzb3VzIGRlcyBjb3VwcyBkZSBtYXNzdWUuIEonZXNzYXlhaSB2YWluZW1lbnQsIGF2ZWMgbCdhdXRyZSB0w6ltb2luLApkJ2ludGVydmVuaXIgcG91ciBmYWlyZSBjZXNzZXIgbGEgbHV0dGUsIG1haXMgVmFuZWxldCwgZm91IGRlIHJhZ2UKZXQgZm9ydCBjb21tZSB1biB0YXVyZWF1LCBmcmFwcGFpdCB0b3Vqb3VycyBqdXNxdSfDoCBjZSBxdWUgc29uCmFkdmVyc2FpcmUsIGxlcyB5ZXV4IHBvY2jDqXMgZXQgbGEgZmlndXJlIGVuc2FuZ2xhbnTDqWUsIHBlcmTDrnQKY29ubmFpc3NhbmNlIGV0IG5lIHDDu3Qgc2UgcmVsZXZlci4gQWxvcnMgVmFuZWxldCBsZSBzYWlzaXQgZXQsIGxlCmJhbGFuw6dhbnQgYXUgYm91dCBkZSBzZXMgYnJhcywgbGUgbGFuw6dhIHN1ciBsYSBuZWlnZSBkdXJjaWUgZXQgZ2xhY8OpZQpxdWkgcmVjb3V2cmFpdCBsZSBzb2wuIExlIHBhdXZyZSBkaWFibGUgw6l0YWl0IHNhbnMgY29ubmFpc3NhbmNlIGV0IGxlCnNhbmcgbHVpIHNvcnRhaXQgcGFyIGxlIG5leiBldCBwYXIgbGVzIG9yZWlsbGVzLiBWYW5lbGV0IGFsbGFpdCBkZQpub3V2ZWF1IHNlIHByw6ljaXBpdGVyIHN1ciBzYSB2aWN0aW1lIGxvcnNxdWUgbm91cyBub3VzIGpldMOibWVzIHN1cgpsdWkgZXQgYydlc3QgYXZlYyBsYSBwbHVzIGdyYW5kZSBwZWluZSBxdWUgbm91cyByw6l1c3PDrm1lcyDDoCBlbXDDqmNoZXIKdW4gbWV1cnRyZS4gSmFtYWlzIGplIG4nYXZhaXMgdnUgdW4gaG9tbWUgYXVzc2kgZm9ydCwgZGFucyB1bmUgZnVyZXVyCmF1c3NpIHRlcnJpYmxlLiBJbCBzZSBjYWxtYSBjZXBlbmRhbnQgYXByw6hzIHF1ZWxxdWVzIGluc3RhbnRzIGV0CnMnZW5mdWl0IGNvbW1lIHVuIGZvdSDDoCB0cmF2ZXJzIGxhIGZvcsOqdC4gTW9uIGNvbXBhZ25vbiBzZSByZW5kaXQgYXUKY2hhbnRpZXIgcG91ciBvYnRlbmlyIHVuIHRyYcOubmVhdSBhZmluIGRlIHRyYW5zcG9ydGVyIGxlIGNvcnBzCmluYW5pbcOpIGRlIG5vdHJlIGNhbWFyYWRlLiBCaWVuIHF1ZSBub3VzIGZ1c3Npb25zIGF1IG1vaXMgZGUgZsOpdnJpZXIKZXQgZW4gcGxlaW5lIGZvcsOqdCwgdHLDqHMgw6lsb2lnbsOpcyBkZSB0b3V0ZSBoYWJpdGF0aW9uLCBMb3VpcyBWYW5lbGV0CmRpc3BhcnV0IGR1IGNoYW50aWVyLiBKZSBsJ2FpIHJldnUgaGllciBwb3VyIGxhIHByZW1pw6hyZSBmb2lzIGRlcHVpcwpjZXR0ZSDDqXBvcXVlIG3DqW1vcmFibGUsIGNhciBhdWN1biBkZSBub3VzIG5lIHNhdmFpdCBjZSBxdSdpbCDDqXRhaXQKZGV2ZW51LiBMZSBwYXV2cmUgaG9tbWUgcXUnaWwgYXZhaXQgcHJlc3F1ZSBhc3NvbW3DqSByZXN0YSBwZW5kYW50Cmxvbmd0ZW1wcyBlbnRyZSBsYSB2aWUgZXQgbGEgbW9ydCBldCBub3VzIGxlIHJhbWVuw6JtZXMsIGF1IHByaW50ZW1wcywKZGFucyB1biBwaXRveWFibGUgw6l0YXQsIHBvdXIgbGUgcmVudm95ZXIgZGFucyBzYSBmYW1pbGxlLiBKJ2FpIGFwcHJpcwpkZXB1aXMgcXUnaWwgcyfDqXRhaXQgcsOpdGFibGkgZXQgcXUnaWwgYXZhaXQgZmluaSBwYXIgw6lwb3VzZXIgY2VsbGUKcG91ciBxdWkgaWwgYXZhaXQgZmFpbGxpIHNhY3JpZmllciBzYSB2aWUuCgpMZSBtYWdpc3RyYXQsIGxlIGN1csOpIGV0IGxlIG5vdGFpcmUsIGFwcsOocyBhdm9pciDDqWNvdXTDqSBhdHRlbnRpdmVtZW50CmNldHRlIGhpc3RvaXJlLCBzZSBjb25zdWx0w6hyZW50IGxvbmd1ZW1lbnQgZXQgZmluaXJlbnQgcGFyIGTDqWNpZGVyCnF1J2VuIHZ1ZSBkdSBjYXJhY3TDqHJlIGlyYXNjaWJsZSBkdSBww6hyZSBMb3Vpc29uLCBkZSBzZXMgY29sw6hyZXMKdGVycmlibGVzIGV0IGRlIHNhIGZvcmNlIGhlcmN1bMOpZW5uZSwgaWwgZmFsbGFpdCBlbiBmYWlyZSB1biBleGVtcGxlCmV0IGxlIHRyYWR1aXJlIGRldmFudCBsYSBDb3VyIENyaW1pbmVsbGUgcXVpIHNpw6lnZWFpdCDDoCBTb3JlbC4KCkxlIGJhaWxsaSByZWNldnJhaXQgZGVzIGluc3RydWN0aW9ucyDDoCBjZXQgZWZmZXQuCgpWSQoKTG9yc3F1ZSBsZSByZXByw6lzZW50YW50IGRlIGxhIGxvaSBzZSByZW5kaXQsIGxlIGxlbmRlbWFpbiBtYXRpbiwgcG91cgpvcMOpcmVyIGwnYXJyZXN0YXRpb24gZGUgTG91aXMgVmFuZWxldCwgaWwgdHJvdXZhIGxhIGNhYmFuZSB2aWRlLiBMZQp2aWVpbGxhcmQsIHBlbmRhbnQgbGEgbnVpdCwgYXZhaXQgZGlzcGFydSBlbiBlbXBvcnRhbnQgZGFucyBzb24gY2Fub3QKc2VzIGVuZ2lucyBkZSBjaGFzc2UgZXQgZGUgcMOqY2hlLiBQZXJzb25uZSBuZSBsJ2F2YWl0IHZ1IHBhcnRpciBldApsJ29uIGlnbm9yYWl0IGxhIGRpcmVjdGlvbiBxdSdpbCBhdmFpdCBwcmlzZS4KClF1ZWxxdWVzIGpvdXJzIHBsdXMgdGFyZCwgbGUgY2FwaXRhaW5lIGQndW4gYmF0ZWF1IGRlIEwuLi4gcmFjb250YWl0CnF1ZSwgcGVuZGFudCB1bmUgZm9ydGUgYm91cnJhc3F1ZSBkZSBub3JkLWVzdCwgaWwgYXZhaXQgcmVuY29udHLDqSBzdXIKbGUgbGFjIFNhaW50LVBpZXJyZSB1biBsb25nIGNhbm90IGZsb3R0YW50IGF1IGdyw6kgZGVzIHZhZ3VlcyBldCBkZXMKdmVudHMuCgpJbCBhdmFpdCBjcnUgcmVjb25uYcOudHJlIGwnZW1iYXJjYXRpb24gZHUgcMOocmUgTG91aXNvbiBtYWlzIGxlIGNhbm90CsOpdGFpdCB2aWRlIGV0IMOgIG1vaXRpw6kgcmVtcGxpIGQnZWF1LgpFT1QKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBzdGF0aWMiO2I6MTtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo5OiJwcm90ZWN0ZWQiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTA3O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHR5cGUiO047fX1zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbWV0aG9kcyI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";