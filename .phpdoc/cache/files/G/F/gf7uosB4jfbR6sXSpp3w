1639029276
AwuilbDvXz%3A587fa85dac952a9dae7f3709bce914a9-e400ff7d07a6b641a9ba95f836cac696
s:7896:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImU0MDBmZjdkMDdhNmI2NDFhOWJhOTVmODM2Y2FjNjk2IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6InJhbmRvbS10ZXN0cy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNDoidmVuZG9yL2JyaWNrL21hdGgvcmFuZG9tLXRlc3RzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NTExNToiPD9waHAKCi8qKgogKiBUaGlzIHNjcmlwdCBzdHJlc3MgdGVzdHMgY2FsY3VsYXRvcnMgd2l0aCByYW5kb20gbGFyZ2UgbnVtYmVycyBhbmQgZW5zdXJlcyB0aGF0IGFsbCBpbXBsZW1lbnRhdGlvbnMgcmV0dXJuIHRoZSBzYW1lCiAqIHJlc3VsdHMuIEl0IGlzIGRlc2lnbmVkIHRvIHJ1biBpbiBhbiBpbmZpbml0ZSBsb29wIHVubGVzcyBhIGJ1ZyBpcyBmb3VuZC4KICovCgpkZWNsYXJlKHN0cmljdF90eXBlcz0xKTsKCnJlcXVpcmUgX19ESVJfXyAuICcvdmVuZG9yL2F1dG9sb2FkLnBocCc7Cgp1c2UgQnJpY2tcTWF0aFxJbnRlcm5hbFxDYWxjdWxhdG9yOwoKKG5ldyBjbGFzcygzMCkgeyAvLyBtYXggZGlnaXRzCiAgICBwcml2YXRlICRnbXA7CiAgICBwcml2YXRlICRiY21hdGg7CiAgICBwcml2YXRlICRuYXRpdmU7CgogICAgcHJpdmF0ZSAkbWF4RGlnaXRzOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChpbnQgJG1heERpZ2l0cykKICAgIHsKICAgICAgICAkdGhpcy0+Z21wICAgID0gbmV3IENhbGN1bGF0b3JcR21wQ2FsY3VsYXRvcigpOwogICAgICAgICR0aGlzLT5iY21hdGggPSBuZXcgQ2FsY3VsYXRvclxCY01hdGhDYWxjdWxhdG9yKCk7CiAgICAgICAgJHRoaXMtPm5hdGl2ZSA9IG5ldyBDYWxjdWxhdG9yXE5hdGl2ZUNhbGN1bGF0b3IoKTsKCiAgICAgICAgJHRoaXMtPm1heERpZ2l0cyA9ICRtYXhEaWdpdHM7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIF9faW52b2tlKCkgOiB2b2lkCiAgICB7CiAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAkYSA9ICR0aGlzLT5nZW5lcmF0ZVJhbmRvbU51bWJlcigpOwogICAgICAgICAgICAkYiA9ICR0aGlzLT5nZW5lcmF0ZVJhbmRvbU51bWJlcigpOwogICAgICAgICAgICAkYyA9ICR0aGlzLT5nZW5lcmF0ZVJhbmRvbU51bWJlcigpOwoKICAgICAgICAgICAgJHRoaXMtPnJ1blRlc3RzKCRhLCAkYik7CiAgICAgICAgICAgICR0aGlzLT5ydW5UZXN0cygkYiwgJGEpOwoKICAgICAgICAgICAgaWYgKCRhICE9PSAnMCcpIHsKICAgICAgICAgICAgICAgICR0aGlzLT5ydW5UZXN0cygiLSRhIiwgJGIpOwogICAgICAgICAgICAgICAgJHRoaXMtPnJ1blRlc3RzKCRiLCAiLSRhIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkYiAhPT0gJzAnKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+cnVuVGVzdHMoJGEsICItJGIiKTsKICAgICAgICAgICAgICAgICR0aGlzLT5ydW5UZXN0cygiLSRiIiwgJGEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGEgIT09ICcwJyAmJiAkYiAhPT0gJzAnKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+cnVuVGVzdHMoIi0kYSIsICItJGIiKTsKICAgICAgICAgICAgICAgICR0aGlzLT5ydW5UZXN0cygiLSRiIiwgIi0kYSIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGMgIT09ICcwJykgewogICAgICAgICAgICAgICAgJHRoaXMtPnRlc3QoIiRhIFBPVyAkYiBNT0QgJGMiLCBmdW5jdGlvbihDYWxjdWxhdG9yICRjYWxjKSB1c2UoJGEsICRiLCAkYykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkY2FsYy0+bW9kUG93KCRhLCAkYiwgJGMpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhIFRoZSBsZWZ0IG9wZXJhbmQuCiAgICAgKiBAcGFyYW0gc3RyaW5nICRiIFRoZSByaWdodCBvcGVyYW5kLgogICAgICovCiAgICBmdW5jdGlvbiBydW5UZXN0cyhzdHJpbmcgJGEsIHN0cmluZyAkYikgOiB2b2lkCiAgICB7CiAgICAgICAgJHRoaXMtPnRlc3QoIiRhICsgJGIiLCBmdW5jdGlvbihDYWxjdWxhdG9yICRjKSB1c2UoJGEsICRiKSB7CiAgICAgICAgICAgIHJldHVybiAkYy0+YWRkKCRhLCAkYik7CiAgICAgICAgfSk7CgogICAgICAgICR0aGlzLT50ZXN0KCIkYSAtICRiIiwgZnVuY3Rpb24oQ2FsY3VsYXRvciAkYykgdXNlKCRhLCAkYikgewogICAgICAgICAgICByZXR1cm4gJGMtPnN1YigkYSwgJGIpOwogICAgICAgIH0pOwoKICAgICAgICAkdGhpcy0+dGVzdCgiJGEgKiAkYiIsIGZ1bmN0aW9uKENhbGN1bGF0b3IgJGMpIHVzZSgkYSwgJGIpIHsKICAgICAgICAgICAgcmV0dXJuICRjLT5tdWwoJGEsICRiKTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKCRiICE9PSAnMCcpIHsKICAgICAgICAgICAgJHRoaXMtPnRlc3QoIiRhIC8gJGIiLCBmdW5jdGlvbihDYWxjdWxhdG9yICRjKSB1c2UoJGEsICRiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJGMtPmRpdlFSKCRhLCAkYik7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJHRoaXMtPnRlc3QoIiRhIE1PRCAkYiIsIGZ1bmN0aW9uKENhbGN1bGF0b3IgJGMpIHVzZSgkYSwgJGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkYy0+bW9kKCRhLCAkYik7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKCRiICE9PSAnMCcgJiYgJGJbMF0gIT09ICctJykgewogICAgICAgICAgICAkdGhpcy0+dGVzdCgiSU5WICRhIE1PRCAkYiIsIGZ1bmN0aW9uKENhbGN1bGF0b3IgJGMpIHVzZSgkYSwgJGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkYy0+bW9kSW52ZXJzZSgkYSwgJGIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT50ZXN0KCJHQ0QgJGEsICRiIiwgZnVuY3Rpb24oQ2FsY3VsYXRvciAkYykgdXNlKCRhLCAkYikgewogICAgICAgICAgICByZXR1cm4gJGMtPmdjZCgkYSwgJGIpOwogICAgICAgIH0pOwoKICAgICAgICBpZiAoJGFbMF0gIT09ICctJykgewogICAgICAgICAgICAkdGhpcy0+dGVzdCgiU1FSVCAkYSIsIGZ1bmN0aW9uKENhbGN1bGF0b3IgJGMpIHVzZSgkYSwgJGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkYy0+c3FydCgkYSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPnRlc3QoIiRhIEFORCAkYiIsIGZ1bmN0aW9uKENhbGN1bGF0b3IgJGMpIHVzZSgkYSwgJGIpIHsKICAgICAgICAgICAgcmV0dXJuICRjLT5hbmQoJGEsICRiKTsKICAgICAgICB9KTsKCiAgICAgICAgJHRoaXMtPnRlc3QoIiRhIE9SICRiIiwgZnVuY3Rpb24oQ2FsY3VsYXRvciAkYykgdXNlKCRhLCAkYikgewogICAgICAgICAgICByZXR1cm4gJGMtPm9yKCRhLCAkYik7CiAgICAgICAgfSk7CgogICAgICAgICR0aGlzLT50ZXN0KCIkYSBYT1IgJGIiLCBmdW5jdGlvbihDYWxjdWxhdG9yICRjKSB1c2UoJGEsICRiKSB7CiAgICAgICAgICAgIHJldHVybiAkYy0+eG9yKCRhLCAkYik7CiAgICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0gc3RyaW5nICAkdGVzdCAgICAgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0ZXN0IGJlaW5nIGV4ZWN1dGVkLgogICAgICogQHBhcmFtIENsb3N1cmUgJGNhbGxiYWNrIEEgY2FsbGJhY2sgZnVuY3Rpb24gYWNjZXB0aW5nIGEgQ2FsY3VsYXRvciBpbnN0YW5jZSBhbmQgcmV0dXJuaW5nIGEgY2FsY3VsYXRpb24gcmVzdWx0LgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHRlc3Qoc3RyaW5nICR0ZXN0LCBDbG9zdXJlICRjYWxsYmFjaykgOiB2b2lkCiAgICB7CiAgICAgICAgc3RhdGljICRjb3VudGVyID0gMDsKICAgICAgICBzdGF0aWMgJGxhc3RPdXRwdXRUaW1lID0gbnVsbDsKCiAgICAgICAgJGdtcFJlc3VsdCAgICA9ICRjYWxsYmFjaygkdGhpcy0+Z21wKTsKICAgICAgICAkYmNtYXRoUmVzdWx0ID0gJGNhbGxiYWNrKCR0aGlzLT5iY21hdGgpOwogICAgICAgICRuYXRpdmVSZXN1bHQgPSAkY2FsbGJhY2soJHRoaXMtPm5hdGl2ZSk7CgogICAgICAgIGlmICgkZ21wUmVzdWx0ICE9PSAkYmNtYXRoUmVzdWx0KSB7CiAgICAgICAgICAgIHNlbGY6OmZhaWx1cmUoJ0dNUCcsICdCQ01hdGgnLCAkdGVzdCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoJGdtcFJlc3VsdCAhPT0gJG5hdGl2ZVJlc3VsdCkgewogICAgICAgICAgICBzZWxmOjpmYWlsdXJlKCdHTVAnLCAnTmF0aXZlJywgJHRlc3QpOwogICAgICAgIH0KCiAgICAgICAgJGNvdW50ZXIrKzsKICAgICAgICAkdGltZSA9IG1pY3JvdGltZSh0cnVlKTsKCiAgICAgICAgaWYgKCRsYXN0T3V0cHV0VGltZSA9PT0gbnVsbCkgewogICAgICAgICAgICAkbGFzdE91dHB1dFRpbWUgPSAkdGltZTsKICAgICAgICB9IGVsc2VpZiAoJHRpbWUgLSAkbGFzdE91dHB1dFRpbWUgPj0gMC4xKSB7CiAgICAgICAgICAgIGVjaG8gIlxyIiwgbnVtYmVyX2Zvcm1hdCgkY291bnRlcik7CiAgICAgICAgICAgICRsYXN0T3V0cHV0VGltZSA9ICR0aW1lOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBwYXJhbSBzdHJpbmcgJGMxICAgVGhlIG5hbWUgb2YgdGhlIGZpcnN0IGNhbGN1bGF0b3IuCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjMiAgIFRoZSBuYW1lIG9mIHRoZSBzZWNvbmQgY2FsY3VsYXRvci4KICAgICAqIEBwYXJhbSBzdHJpbmcgJHRlc3QgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0ZXN0IGJlaW5nIGV4ZWN1dGVkLgogICAgICovCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBmYWlsdXJlKHN0cmluZyAkYzEsIHN0cmluZyAkYzIsIHN0cmluZyAkdGVzdCkgOiB2b2lkCiAgICB7CiAgICAgICAgZWNobyBQSFBfRU9MOwogICAgICAgIGVjaG8gJ0ZBSUxVUkUhJywgUEhQX0VPTDsKICAgICAgICBlY2hvICRjMSwgJyB2cyAnLCAkYzIsIFBIUF9FT0w7CiAgICAgICAgZWNobyAkdGVzdCwgUEhQX0VPTDsKICAgICAgICBkaWU7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbU51bWJlcigpIDogc3RyaW5nCiAgICB7CiAgICAgICAgJGxlbmd0aCA9IHJhbmRvbV9pbnQoMSwgJHRoaXMtPm1heERpZ2l0cyk7CgogICAgICAgICRudW1iZXIgPSAnJzsKCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgJGxlbmd0aDsgJGkrKykgewogICAgICAgICAgICAkbnVtYmVyIC49IHJhbmRvbV9pbnQoMCwgOSk7CiAgICAgICAgfQoKICAgICAgICAkbnVtYmVyID0gbHRyaW0oJG51bWJlciwgJzAnKTsKCiAgICAgICAgaWYgKCRudW1iZXIgPT09ICcnKSB7CiAgICAgICAgICAgIHJldHVybiAnMCc7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJG51bWJlcjsKICAgIH0KfSkoKTsKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";